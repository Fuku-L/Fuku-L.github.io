

<!DOCTYPE html>
<html lang="zh-CN" data-default-color-scheme=&#34;auto&#34;>



<head>
  <meta charset="UTF-8">
  <link rel="apple-touch-icon" sizes="76x76" href="/img/fishes.png">
  <link rel="icon" href="/img/fishes.png">
  <meta name="viewport"
        content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  
  <meta name="theme-color" content="#2f4154">
  <meta name="description" content="">
  <meta name="author" content="Fuku Lee">
  <meta name="keywords" content="">
  
  <title>lc-1439.有序矩阵中的第 k 个最小数组和 - Fuku</title>

  <link  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" />


  <link  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/github-markdown-css@4.0.0/github-markdown.min.css" />
  <link  rel="stylesheet" href="/lib/hint/hint.min.css" />

  
    
    
      
      <link  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/highlight.js@10.4.0/styles/github-gist.min.css" />
    
  

  
    <link  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css" />
  



<!-- 主题依赖的图标库，不要自行修改 -->

<link rel="stylesheet" href="//at.alicdn.com/t/font_1749284_ba1fz6golrf.css">



<link rel="stylesheet" href="//at.alicdn.com/t/font_1736178_kmeydafke9r.css">


<link  rel="stylesheet" href="/css/main.css" />

<!-- 自定义样式保持在最底部 -->

  
<link rel="stylesheet" href="/css/diy/shubiao.css">



  <script id="fluid-configs">
    var Fluid = window.Fluid || {};
    var CONFIG = {"hostname":"example.com","root":"/","version":"1.8.10","typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":true},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"progressbar":{"enable":true,"height_px":3,"color":"#29d","options":{"showSpinner":false,"trickleSpeed":100}},"copy_btn":true,"image_zoom":{"enable":true,"img_url_replace":["",""]},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}}};
  </script>
  <script  src="/js/utils.js" ></script>
  <script  src="/js/color-schema.js" ></script>
<meta name="generator" content="Hexo 5.4.0"></head>


<body>
  <header style="height: 70vh;">
    <nav id="navbar" class="navbar fixed-top  navbar-expand-lg navbar-dark scrolling-navbar">
  <div class="container">
    <a class="navbar-brand"
       href="/">&nbsp;<strong>F's Log</strong>&nbsp;</a>

    <button id="navbar-toggler-btn" class="navbar-toggler" type="button" data-toggle="collapse"
            data-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <div class="animated-icon"><span></span><span></span><span></span></div>
    </button>

    <!-- Collapsible content -->
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav ml-auto text-center">
        
          
          
          
          
            <li class="nav-item">
              <a class="nav-link" href="/">
                <i class="iconfont icon-home-fill"></i>
                首页
              </a>
            </li>
          
        
          
          
          
          
            <li class="nav-item">
              <a class="nav-link" href="/archives/">
                <i class="iconfont icon-archive-fill"></i>
                归档
              </a>
            </li>
          
        
          
          
          
          
            <li class="nav-item">
              <a class="nav-link" href="/categories/">
                <i class="iconfont icon-category-fill"></i>
                分类
              </a>
            </li>
          
        
          
          
          
          
            <li class="nav-item">
              <a class="nav-link" href="/tags/">
                <i class="iconfont icon-tags-fill"></i>
                标签
              </a>
            </li>
          
        
          
          
          
          
            <li class="nav-item">
              <a class="nav-link" href="/about/">
                <i class="iconfont icon-user-fill"></i>
                关于
              </a>
            </li>
          
        
        
          <li class="nav-item" id="search-btn">
            <a class="nav-link" target="_self" data-toggle="modal" data-target="#modalSearch">&nbsp;<i
                class="iconfont icon-search"></i>&nbsp;</a>
          </li>
        
        
          <li class="nav-item" id="color-toggle-btn">
            <a class="nav-link" target="_self">&nbsp;<i
                class="iconfont icon-dark" id="color-toggle-icon"></i>&nbsp;</a>
          </li>
        
      </ul>
    </div>
  </div>
</nav>

    <div class="banner" id="banner" parallax=true
         style="background: url('https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427005926.jpg') no-repeat center center;
           background-size: cover;">
      <div class="full-bg-img">
        <div class="mask flex-center" style="background-color: rgba(0, 0, 0, 0.3)">
          <div class="page-header text-center fade-in-up">
            <span class="h2" id="subtitle" title="lc-1439.有序矩阵中的第 k 个最小数组和">
              
            </span>

            
              <div class="mt-3">
  
  
    <span class="post-meta">
      <i class="iconfont icon-date-fill" aria-hidden="true"></i>
      <time datetime="2022-10-12 11:28" pubdate>
        2022年10月12日 上午
      </time>
    </span>
  
</div>

<div class="mt-1">
  
    
    <span class="post-meta mr-2">
      <i class="iconfont icon-chart"></i>
      1.3k 字
    </span>
  

  
    
    <span class="post-meta mr-2">
      <i class="iconfont icon-clock-fill"></i>
      
      
      22
       分钟
    </span>
  

  
  
</div>

            
          </div>

          
        </div>
      </div>
    </div>
  </header>

  <main>
    
      

<div class="container-fluid nopadding-x">
  <div class="row nomargin-x">
    <div class="d-none d-lg-block col-lg-2"></div>
    <div class="col-lg-8 nopadding-x-md">
      <div class="container nopadding-x-md" id="board-ctn">
        <div class="py-5" id="board">
          <article class="post-content mx-auto">
            <!-- SEO header -->
            <h1 style="display: none">lc-1439.有序矩阵中的第 k 个最小数组和</h1>
            
            <div class="markdown-body">
              <h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个 m * n 的矩阵 mat，以及一个整数 k ，矩阵中的每一行都以非递减的顺序排列。</p>
<p>你可以从每一行中选出 1 个元素形成一个数组。返回所有可能数组中的第 k 个 最小 数组和。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p>
<figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：mat = <span class="hljs-comment">[<span class="hljs-comment">[1,3,11]</span>,<span class="hljs-comment">[2,4,6]</span>]</span>, k = 5<br>输出：7<br>解释：从每一行中选出一个元素，前 k 个和最小的数组分别是：<br><span class="hljs-comment">[1,2]</span>, <span class="hljs-comment">[1,4]</span>, <span class="hljs-comment">[3,2]</span>, <span class="hljs-comment">[3,4]</span>, <span class="hljs-comment">[1,6]</span>。其中第 5 个的和是 7 。<br></code></pre></div></td></tr></table></figure>
<p>eg2:</p>
<figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">输入：mat = <span class="hljs-string">[[1,3,11],[2,4,6]]</span>, k = <span class="hljs-number">9</span><br>输出：<span class="hljs-number">17</span><br></code></pre></div></td></tr></table></figure>
<p>eg3:</p>
<figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：mat = <span class="hljs-comment">[<span class="hljs-comment">[1,10,10]</span>,<span class="hljs-comment">[1,4,5]</span>,<span class="hljs-comment">[2,3,6]</span>]</span>, k = 7<br>输出：9<br>解释：从每一行中选出一个元素，前 k 个和最小的数组分别是：<br><span class="hljs-comment">[1,1,2]</span>, <span class="hljs-comment">[1,1,3]</span>, <span class="hljs-comment">[1,4,2]</span>, <span class="hljs-comment">[1,4,3]</span>, <span class="hljs-comment">[1,1,6]</span>, <span class="hljs-comment">[1,5,2]</span>, <span class="hljs-comment">[1,5,3]</span>。其中第 7 个的和是 9 。 <br></code></pre></div></td></tr></table></figure>
<p>eg4:</p>
<figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">输入：mat = <span class="hljs-string">[[1,1,10],[2,2,9]]</span>, k = <span class="hljs-number">7</span><br>输出：<span class="hljs-number">12</span><br></code></pre></div></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol>
<li>使用最小堆。最小堆的排序使用 sum 作为排序条件。</li>
<li>最小堆的每个结点需要记录两个值：sum， 以及组成sum的指针序列。 – python 可以用与元组来做，go 可以用多个结构体来组合。</li>
<li>取第k个最小，由于矩阵是有序的，首个入堆即为最小，但不是第k个。因此需要入栈&gt;k次，出栈k次。即为所得。</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">kthSmallest</span><span class="hljs-params">(mat [][]<span class="hljs-keyword">int</span>, k <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>	m,n := <span class="hljs-built_in">len</span>(mat),<span class="hljs-built_in">len</span>(mat[<span class="hljs-number">0</span>])<br>	h := &amp;SPS&#123;&#125;<br>	heap.Init(h)<br><br>	<span class="hljs-comment">// 初始化</span><br>	curSum := <span class="hljs-number">0</span><br>	<span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i&lt;m; i++ &#123;<br>		curSum += mat[i][<span class="hljs-number">0</span>]<br>	&#125;<br>	<span class="hljs-comment">// 初始入栈</span><br>	heap.Push(h, SumPointer&#123;sum:curSum, pointer:<span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, m)&#125;)<br><br>	visited := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">bool</span>) <span class="hljs-comment">//去重</span><br>	<span class="hljs-keyword">for</span> ki:=<span class="hljs-number">1</span>; ki&lt;k; ki++&#123;<br>		sp := heap.Pop(h).(SumPointer)<br>		curSum = sp.sum<br>		<span class="hljs-keyword">for</span> i,j := <span class="hljs-keyword">range</span> sp.pointer &#123;<br>			<span class="hljs-keyword">if</span> <span class="hljs-keyword">int</span>(j) &lt; n<span class="hljs-number">-1</span> &#123;<br>				newPointer := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(sp.pointer))<br>				<span class="hljs-built_in">copy</span>(newPointer, sp.pointer) <span class="hljs-comment">// 复制</span><br>				newPointer[i]++<br>				<span class="hljs-keyword">var</span> build strings.Builder<br>				<span class="hljs-keyword">for</span> _, pointer := <span class="hljs-keyword">range</span> newPointer &#123;<br>					build.WriteString(strconv.Itoa(pointer))<br>				&#125;<br>				<span class="hljs-keyword">if</span> !visited[build.String()] &#123;<br>					newSum := curSum + mat[i][j+<span class="hljs-number">1</span>] - mat[i][j]<br>					heap.Push(h, SumPointer&#123;sum:newSum, pointer: newPointer&#125;)<br>					visited[build.String()] = <span class="hljs-literal">true</span><br>				&#125;<br>			&#125;<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">return</span> heap.Pop(h).(SumPointer).sum<br>&#125;<br><br><span class="hljs-keyword">type</span> SumPointer <span class="hljs-keyword">struct</span> &#123;<br>	pointer []<span class="hljs-keyword">int</span><br>	sum <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> SPS []SumPointer<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h SPS)</span> <span class="hljs-title">Len</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(h)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h SPS)</span> <span class="hljs-title">Swap</span><span class="hljs-params">(i,j <span class="hljs-keyword">int</span>)</span></span> &#123;<br>	h[i],h[j] = h[j], h[i]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h SPS)</span> <span class="hljs-title">Less</span><span class="hljs-params">(i,j <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>	<span class="hljs-keyword">return</span> h[i].sum &lt; h[j].sum<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *SPS)</span> <span class="hljs-title">Push</span><span class="hljs-params">(v <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>	*h = <span class="hljs-built_in">append</span>(*h, v.(SumPointer))<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *SPS)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br>	e := (*h)[h.Len() - <span class="hljs-number">1</span>]<br>	*h = (*h)[:h.Len()<span class="hljs-number">-1</span>]<br>	<span class="hljs-keyword">return</span> e<br>&#125;<br></code></pre></div></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">kthSmallest</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] mat, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> m = mat.length;<br>        <span class="hljs-keyword">int</span> n = mat[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-comment">// 构建小顶堆</span><br>        PriorityQueue&lt;SumPointer&gt; heap <br>            = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;((p1,p2) -&gt; p1.sum - p2.sum);<br><br>        <span class="hljs-keyword">int</span> curSum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>            curSum+= mat[i][<span class="hljs-number">0</span>];<br>        &#125;<br>        heap.add(<span class="hljs-keyword">new</span> SumPointer(curSum, <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m]));<br>        <span class="hljs-comment">// 使用set保存是否访问过该数组</span><br>        Set&lt;String&gt; visited = <span class="hljs-keyword">new</span> HashSet();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> ki = <span class="hljs-number">1</span>; ki&lt;k; ki++)&#123;<br>            SumPointer sp = heap.poll();<br>            curSum = sp.sum;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;sp.pointer.length; i++)&#123;<br>                <span class="hljs-keyword">if</span> (sp.pointer[i] &lt; n-<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">int</span>[] newPointer = Arrays.copyOf(sp.pointer, sp.pointer.length);<br>                    newPointer[i]++;<br>                    <span class="hljs-comment">// Arrays.toString(newPointer), 将 newPointer[] 数组转为字符串保存.</span><br>                    <span class="hljs-keyword">if</span>(!visited.contains(Arrays.toString(newPointer))) &#123;<br>                        <span class="hljs-keyword">int</span> newSum = curSum + mat[i][sp.pointer[i]+<span class="hljs-number">1</span>] - mat[i][sp.pointer[i]];<br>                        heap.add(<span class="hljs-keyword">new</span> SumPointer(newSum, newPointer));<br>                        visited.add(Arrays.toString(newPointer));<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br><br>        <span class="hljs-keyword">return</span> heap.poll().sum;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 构造对象</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SumPointer</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> sum;<br>    <span class="hljs-keyword">int</span>[] pointer;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SumPointer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sum , <span class="hljs-keyword">int</span>[] pointer)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.sum = sum;<br>        <span class="hljs-keyword">this</span>.pointer = pointer;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">kthSmallest</span><span class="hljs-params">(mat [][]<span class="hljs-keyword">int</span>, k <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>	m,n := <span class="hljs-built_in">len</span>(mat),<span class="hljs-built_in">len</span>(mat[<span class="hljs-number">0</span>])<br>	h := &amp;SPS&#123;&#125;<br>	heap.Init(h)<br><br>	<span class="hljs-comment">// 初始化</span><br>	curSum := <span class="hljs-number">0</span><br>	<span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i&lt;m; i++ &#123;<br>		curSum += mat[i][<span class="hljs-number">0</span>]<br>	&#125;<br>	<span class="hljs-comment">// 初始入栈</span><br>	heap.Push(h, SumPointer&#123;sum:curSum, pointer:<span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, m)&#125;)<br><br>	visited := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">bool</span>) <span class="hljs-comment">//去重</span><br>	<span class="hljs-keyword">for</span> ki:=<span class="hljs-number">1</span>; ki&lt;k; ki++&#123;<br>		sp := heap.Pop(h).(SumPointer)<br>		curSum = sp.sum<br>		<span class="hljs-keyword">for</span> i,j := <span class="hljs-keyword">range</span> sp.pointer &#123;<br>			<span class="hljs-keyword">if</span> <span class="hljs-keyword">int</span>(j) &lt; n<span class="hljs-number">-1</span> &#123;<br>				newPointer := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(sp.pointer))<br>				<span class="hljs-built_in">copy</span>(newPointer, sp.pointer) <span class="hljs-comment">// 复制</span><br>				newPointer[i]++<br>				<span class="hljs-keyword">var</span> build strings.Builder<br>				<span class="hljs-keyword">for</span> _, pointer := <span class="hljs-keyword">range</span> newPointer &#123;<br>					build.WriteString(strconv.Itoa(pointer))<br>				&#125;<br>				<span class="hljs-keyword">if</span> !visited[build.String()] &#123;<br>					newSum := curSum + mat[i][j+<span class="hljs-number">1</span>] - mat[i][j]<br>					heap.Push(h, SumPointer&#123;sum:newSum, pointer: newPointer&#125;)<br>					visited[build.String()] = <span class="hljs-literal">true</span><br>				&#125;<br>			&#125;<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">return</span> heap.Pop(h).(SumPointer).sum<br>&#125;<br><br><span class="hljs-keyword">type</span> SumPointer <span class="hljs-keyword">struct</span> &#123;<br>	pointer []<span class="hljs-keyword">int</span><br>	sum <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> SPS []SumPointer<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h SPS)</span> <span class="hljs-title">Len</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(h)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h SPS)</span> <span class="hljs-title">Swap</span><span class="hljs-params">(i,j <span class="hljs-keyword">int</span>)</span></span> &#123;<br>	h[i],h[j] = h[j], h[i]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h SPS)</span> <span class="hljs-title">Less</span><span class="hljs-params">(i,j <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>	<span class="hljs-keyword">return</span> h[i].sum &lt; h[j].sum<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *SPS)</span> <span class="hljs-title">Push</span><span class="hljs-params">(v <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>	*h = <span class="hljs-built_in">append</span>(*h, v.(SumPointer))<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *SPS)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br>	e := (*h)[h.Len() - <span class="hljs-number">1</span>]<br>	*h = (*h)[:h.Len()<span class="hljs-number">-1</span>]<br>	<span class="hljs-keyword">return</span> e<br>&#125;<br></code></pre></div></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">kthSmallest</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] mat, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> m = mat.length;<br>        <span class="hljs-keyword">int</span> n = mat[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-comment">// 构建小顶堆</span><br>        PriorityQueue&lt;SumPointer&gt; heap <br>            = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;((p1,p2) -&gt; p1.sum - p2.sum);<br><br>        <span class="hljs-keyword">int</span> curSum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>            curSum+= mat[i][<span class="hljs-number">0</span>];<br>        &#125;<br>        heap.add(<span class="hljs-keyword">new</span> SumPointer(curSum, <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m]));<br>        <span class="hljs-comment">// 使用set保存是否访问过该数组</span><br>        Set&lt;String&gt; visited = <span class="hljs-keyword">new</span> HashSet();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> ki = <span class="hljs-number">1</span>; ki&lt;k; ki++)&#123;<br>            SumPointer sp = heap.poll();<br>            curSum = sp.sum;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;sp.pointer.length; i++)&#123;<br>                <span class="hljs-keyword">if</span> (sp.pointer[i] &lt; n-<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">int</span>[] newPointer = Arrays.copyOf(sp.pointer, sp.pointer.length);<br>                    newPointer[i]++;<br>                    <span class="hljs-comment">// Arrays.toString(newPointer), 将 newPointer[] 数组转为字符串保存.</span><br>                    <span class="hljs-keyword">if</span>(!visited.contains(Arrays.toString(newPointer))) &#123;<br>                        <span class="hljs-keyword">int</span> newSum = curSum + mat[i][sp.pointer[i]+<span class="hljs-number">1</span>] - mat[i][sp.pointer[i]];<br>                        heap.add(<span class="hljs-keyword">new</span> SumPointer(newSum, newPointer));<br>                        visited.add(Arrays.toString(newPointer));<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br><br>        <span class="hljs-keyword">return</span> heap.poll().sum;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 构造对象</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SumPointer</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> sum;<br>    <span class="hljs-keyword">int</span>[] pointer;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SumPointer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sum , <span class="hljs-keyword">int</span>[] pointer)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.sum = sum;<br>        <span class="hljs-keyword">this</span>.pointer = pointer;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>




            </div>
            <hr>
            <div>
              <div class="post-metas mb-3">
                
                
                  <div class="post-meta">
                    <i class="iconfont icon-tags"></i>
                    
                      <a class="hover-with-bg" href="/tags/lc/">lc</a>
                    
                      <a class="hover-with-bg" href="/tags/%E7%BB%83%E4%B9%A0/">练习</a>
                    
                      <a class="hover-with-bg" href="/tags/%E5%A0%86/">堆</a>
                    
                      <a class="hover-with-bg" href="/tags/%E5%A4%9A%E8%B7%AF%E5%BD%92%E5%B9%B6/">多路归并</a>
                    
                  </div>
                
              </div>
              
                <p class="note note-warning">
                  
                    本博客所有文章除特别声明外，均采用 <a target="_blank" href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh" rel="nofollow noopener noopener">CC BY-SA 4.0 协议</a> ，转载请注明出处！
                  
                </p>
              
              
                <div class="post-prevnext">
                  <article class="post-prev col-6">
                    
                    
                      <a href="/lc-1488-%E9%81%BF%E5%85%8D%E6%B4%AA%E6%B0%B4%E6%B3%9B%E6%BB%A5">
                        <i class="iconfont icon-arrowleft"></i>
                        <span class="hidden-mobile">lc-1488.避免洪水泛滥</span>
                        <span class="visible-mobile">上一篇</span>
                      </a>
                    
                  </article>
                  <article class="post-next col-6">
                    
                    
                      <a href="/lc-0871-%E6%9C%80%E4%BD%8E%E5%8A%A0%E6%B2%B9%E6%AC%A1%E6%95%B0">
                        <span class="hidden-mobile">lc-0871.最低加油次数</span>
                        <span class="visible-mobile">下一篇</span>
                        <i class="iconfont icon-arrowright"></i>
                      </a>
                    
                  </article>
                </div>
              
            </div>

            
          </article>
        </div>
      </div>
    </div>
    
      <div class="d-none d-lg-block col-lg-2 toc-container" id="toc-ctn">
        <div id="toc">
  <p class="toc-header"><i class="iconfont icon-list"></i>&nbsp;目录</p>
  <div class="toc-body" id="toc-body"></div>
</div>

      </div>
    
  </div>
</div>

<!-- Custom -->


    

    
      <a id="scroll-top-button" href="#" role="button">
        <i class="iconfont icon-arrowup" aria-hidden="true"></i>
      </a>
    

    
      <div class="modal fade" id="modalSearch" tabindex="-1" role="dialog" aria-labelledby="ModalLabel"
     aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header text-center">
        <h4 class="modal-title w-100 font-weight-bold">搜索</h4>
        <button type="button" id="local-search-close" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body mx-3">
        <div class="md-form mb-5">
          <input type="text" id="local-search-input" class="form-control validate">
          <label data-error="x" data-success="v"
                 for="local-search-input">关键词</label>
        </div>
        <div class="list-group" id="local-search-result"></div>
      </div>
    </div>
  </div>
</div>
    

    
  </main>

  <footer class="text-center mt-5 py-3">
  <div class="footer-content">
     <a href="https://hexo.io" target="_blank" rel="nofollow noopener"><span>Hexo</span></a> <i class="iconfont icon-love"></i> <a href="https://github.com/fluid-dev/hexo-theme-fluid" target="_blank" rel="nofollow noopener"><span>Fluid</span></a> 
  </div>
  

  

  
</footer>


  <!-- SCRIPTS -->
  
  <script  src="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.min.js" ></script>
  <link  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.min.css" />

  <script>
    NProgress.configure({"showSpinner":false,"trickleSpeed":100})
    NProgress.start()
    window.addEventListener('load', function() {
      NProgress.done();
    })
  </script>


<script  src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js" ></script>
<script  src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js" ></script>
<script  src="/js/events.js" ></script>
<script  src="/js/plugins.js" ></script>

<!-- Plugins -->


  
    <script  src="/js/img-lazyload.js" ></script>
  



  



  <script  src="https://cdn.jsdelivr.net/npm/tocbot@4.12.0/dist/tocbot.min.js" ></script>



  <script  src="https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js" ></script>



  <script  src="https://cdn.jsdelivr.net/npm/anchor-js@4.3.0/anchor.min.js" ></script>



  <script defer src="https://cdn.jsdelivr.net/npm/clipboard@2.0.6/dist/clipboard.min.js" ></script>






  <script  src="https://cdn.jsdelivr.net/npm/typed.js@2.0.11/lib/typed.min.js" ></script>
  <script>
    (function (window, document) {
      var typing = Fluid.plugins.typing;
      var title = document.getElementById('subtitle').title;
      
      typing(title)
      
    })(window, document);
  </script>



  <script  src="/js/local-search.js" ></script>
  <script>
    (function () {
      var path = "/local-search.xml";
      $('#local-search-input').on('click', function() {
        searchFunc(path, 'local-search-input', 'local-search-result');
      });
      $('#modalSearch').on('shown.bs.modal', function() {
        $('#local-search-input').focus();
      });
    })()
  </script>














  
<script src="/js/diy/caidai.js"></script>



<!-- 主题的启动项 保持在最底部 -->
<script  src="/js/boot.js" ></script>


</body>
</html>
