<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/wechat-project-01-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91/"/>
    <url>/2022/wechat-project-01-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="小程序入门知识"><a href="#小程序入门知识" class="headerlink" title="小程序入门知识"></a>小程序入门知识</h1><h2 id="1-小程序的概念和应用前景"><a href="#1-小程序的概念和应用前景" class="headerlink" title="1.小程序的概念和应用前景"></a>1.小程序的概念和应用前景</h2><p>不用安装，通过扫描二维码或搜索打开就可以使用的<strong>应用程序</strong>。</p><p>小程序特点：</p><ol><li>不用安装</li><li>应用体积较小：上限是 2048KB ( 2MB )</li><li>跨平台</li></ol><p>应用前景：</p><p>​    适合用来开发一些业务逻辑简单、低频使用、对性能要求不高的应用程序。</p><p>发展特点：</p><div class="hljs code-wrapper"><pre><code>1. 生态系统庞大 2. 开放能力越来越强，能够匹配多种用户和场景。 3. 用户黏性高</code></pre></div><h2 id="2-开发环境的搭建和工具使用"><a href="#2-开发环境的搭建和工具使用" class="headerlink" title="2.*开发环境的搭建和工具使用"></a>2.*开发环境的搭建和工具使用</h2><p><strong>小程序开发环境的搭建</strong></p><ol><li>下载安装“微信开发者工具”</li><li>在 <a href="https://mp.weixin.qq.com/">微信公众平台</a> 注册申请公众号、并开通开发者权限</li><li>打开开发者工具，使用微信登录后，单击“小程序项目”，就可以创建一个小程序项目</li><li>根据页面提示进行小程序项目的创建，选择项目目录，填写 AppID、项目名称，点击“确定”按钮即可。</li><li>创建成功后，会进入开发调试工具界面。</li></ol><p><strong>开发调试工具使用</strong></p><p>微信开发者工具的界面主要分为 5 个部分，分别是：菜单栏、工具栏、模拟器、编辑器和调试器。</p><ol><li>菜单栏：提供大部分<strong>工具功能入口</strong></li><li>工具栏：提供一些<strong>常用功能的快捷按钮</strong></li><li>模拟器：用来模拟手机运行环境，可以配置不同型号手机的运行效果，还可以切换网络环境</li><li>编辑器：类似于 vscode 软件的代码编写环境。</li><li>调试器：类似于 chrome 浏览器中的开发者工具</li></ol><h2 id="3-小程序项目结构"><a href="#3-小程序项目结构" class="headerlink" title="3.*小程序项目结构"></a>3.*小程序项目结构</h2><p>小程序项目分为 4 个部分，包括：项目配置、应用程序配置、页面配置目录、公共脚本目录。</p><ol><li>项目配置：一个 <code>project.config.json</code> 文件，用来管理项目的各种配置信息，包括项目名称、版本、依赖库等</li><li>应用程序配置：有三个文件：逻辑文件 <code>app.js</code>，配置文件 <code>app.json</code>，公共样式文件 <code>app.wxss</code></li><li>页面配置目录：用来存放小程序的各个页面。每个页面是一个文件夹，文件夹中存放同命名的三个文件：逻辑、结构、配置。</li><li>公共脚本目录：存放公共方法的脚本，方便各个页面引入和使用。</li></ol><p>各个页面的关系如下图：</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220122181130.png" alt="image-20220122181129605"></p><h2 id="4-小程序项目的团队管理和开发"><a href="#4-小程序项目的团队管理和开发" class="headerlink" title="4.小程序项目的团队管理和开发"></a>4.小程序项目的团队管理和开发</h2><p><strong>项目人员结构</strong></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220122185347.png" alt="image-20220122185344625"></p><p><strong>项目开发流程</strong></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220122190639.png" alt="image-20220122190638107"></p><h1 id="小程序开发基础"><a href="#小程序开发基础" class="headerlink" title="小程序开发基础"></a>小程序开发基础</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h2 id="事件处理函数"><a href="#事件处理函数" class="headerlink" title="事件处理函数"></a>事件处理函数</h2><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><h2 id="小程序与服务器交互的实现"><a href="#小程序与服务器交互的实现" class="headerlink" title="小程序与服务器交互的实现"></a>小程序与服务器交互的实现</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>01-xxxx</title>
    <link href="/2022/vue-cli-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E8%BF%9B%E9%98%B6-00-%E6%A8%A1%E6%9D%BF/"/>
    <url>/2022/vue-cli-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E8%BF%9B%E9%98%B6-00-%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>参考链接：</p><h2 id="this-相关知识点："><a href="#this-相关知识点：" class="headerlink" title="this 相关知识点："></a>this 相关知识点：</h2><h3 id="this-到底指向谁"><a href="#this-到底指向谁" class="headerlink" title="this 到底指向谁"></a>this 到底指向谁</h3><h3 id="结论：this-的指向，是在调用函数时根据执行上下文所动态确定的。"><a href="#结论：this-的指向，是在调用函数时根据执行上下文所动态确定的。" class="headerlink" title="结论：this 的指向，是在调用函数时根据执行上下文所动态确定的。"></a>结论：this 的指向，是在调用函数时根据执行上下文所动态确定的。</h3><h2 id="实战例题分析"><a href="#实战例题分析" class="headerlink" title="实战例题分析"></a>实战例题分析</h2>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-this的指向由执行上下文动态确定</title>
    <link href="/2022/vue-cli-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E8%BF%9B%E9%98%B6-01-this%E7%9A%84%E6%8C%87%E5%90%91%E7%94%B1%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8A%A8%E6%80%81%E7%A1%AE%E5%AE%9A/"/>
    <url>/2022/vue-cli-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E8%BF%9B%E9%98%B6-01-this%E7%9A%84%E6%8C%87%E5%90%91%E7%94%B1%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8A%A8%E6%80%81%E7%A1%AE%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<p>参考链接：<a href="https://www.jianshu.com/p/625a84c0b43f">https://www.jianshu.com/p/625a84c0b43f</a></p><h2 id="this-相关知识点："><a href="#this-相关知识点：" class="headerlink" title="this 相关知识点："></a>this 相关知识点：</h2><h3 id="this-到底指向谁"><a href="#this-到底指向谁" class="headerlink" title="this 到底指向谁"></a>this 到底指向谁</h3><p>结论：this 的指向，是在调用函数时根据执行上下文所动态确定的。</p><p>具体环节和规则，可以先「死记硬背」以下几条规律，后面来慢慢一一分析：</p><ul><li>在函数体中，简单调用该函数时（非显式/隐式绑定下），严格模式下 this 绑定到undefined，否则绑定到全局对象 window／global；</li><li>一般构造函数 new 调用，绑定到新创建的对象上；</li><li>一般由 call/apply/bind 方法显式调用，绑定到指定参数的对象上；</li><li>一般由上下文对象调用，绑定在该对象上；</li><li>箭头函数中，根据外层上下文绑定的 this 决定 this 指向。</li></ul><h2 id="实战例题分析"><a href="#实战例题分析" class="headerlink" title="实战例题分析"></a>实战例题分析</h2><h3 id="例题组合-1：全局环境下的-this"><a href="#例题组合-1：全局环境下的-this" class="headerlink" title="例题组合 1：全局环境下的 this"></a>例题组合 1：全局环境下的 this</h3><h4 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h4><p>在执行函数时，如果函数中的 this 是被上一级的对象所调用，那么 this 指向的就是上一级的对象；否则指向全局环境。</p><h3 id="例题组合-2：上下文对象调用中的-this"><a href="#例题组合-2：上下文对象调用中的-this" class="headerlink" title="例题组合 2：上下文对象调用中的 this"></a>例题组合 2：上下文对象调用中的 this</h3><h4 id="结论：-1"><a href="#结论：-1" class="headerlink" title="结论："></a>结论：</h4><p>this 指向最后调用它的对象，在 fn 执行时，挂到 o2 对象上即可，我们提前进行了赋值操作。</p><h3 id="例题组合-3：bind-call-apply-改变-this-指向"><a href="#例题组合-3：bind-call-apply-改变-this-指向" class="headerlink" title="例题组合 3：bind/call/apply 改变 this 指向"></a>例题组合 3：bind/call/apply 改变 this 指向</h3><p>一句话总结，他们都是用来改变相关函数 this 指向的，但是 call/apply 是直接进行相关函数调用；bind 不会执行相关函数，而是返回一个新的函数，这个新的函数已经自动绑定了新的 this 指向，开发者需要手动调用即可。</p><h4 id="结论：-2"><a href="#结论：-2" class="headerlink" title="结论："></a>结论：</h4><h3 id="例题组合-4：构造函数和-this"><a href="#例题组合-4：构造函数和-this" class="headerlink" title="例题组合 4：构造函数和 this"></a>例题组合 4：构造函数和 this</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.bar = <span class="hljs-string">&#x27;Lucas&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> instance = <span class="hljs-keyword">new</span> Foo();<br><span class="hljs-built_in">console</span>.log(instance.bar); <span class="hljs-comment">// Lucas</span><br></code></pre></div></td></tr></table></figure><p>答案将会输出 Lucas。<br>但是这样的场景往往伴随着下一个问题：new 操作符调用构造函数，具体做了什么？<br>以下供参考：</p><ul><li>创建一个新的对象；</li><li>将构造函数的 this 指向这个新对象；</li><li>为这个对象添加属性、方法等；</li><li>最终返回新对象。<br>以上new操作符过程，用代码表述为：<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>obj.__proto__ = Foo.prototype;<br>Foo.call(obj);<br><br><span class="hljs-built_in">console</span>.log(obj.bar); <span class="hljs-comment">// Lucas</span><br></code></pre></div></td></tr></table></figure>这里对 new 的模拟是一个简单基本版的，更复杂的情况会在原型、原型链相关的《面向对象和原型——永不过时的话题》中讲述。</li></ul><blockquote><p>需要指出的是，如果在构造函数中出现了显式 return 的情况，那么需要注意分为两种场景：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.user = <span class="hljs-string">&#x27;Lucas&#x27;</span>;<br>  <span class="hljs-keyword">const</span> o = &#123;&#125;;<br>  <span class="hljs-keyword">return</span> o;<br>&#125;<br><br><span class="hljs-keyword">const</span> instance = <span class="hljs-keyword">new</span> Foo();<br><span class="hljs-built_in">console</span>.log(instance.user); <span class="hljs-comment">// undef将会输出 undefined，此时 instance 是返回的空对象 o。ined</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.user = <span class="hljs-string">&#x27;Lucas&#x27;</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> instance = <span class="hljs-keyword">new</span> Foo();<br><span class="hljs-built_in">console</span>.log(instance.user); <span class="hljs-comment">//  将会输出 Lucas，也就是说此时 instance 是返回的目标对象实例 this。</span><br></code></pre></div></td></tr></table></figure><h4 id="结论：-3"><a href="#结论：-3" class="headerlink" title="结论："></a>结论：</h4><p>结论：如果构造函数中显式返回一个值，且返回的是一个对象，那么 this 就指向这个返回的对象；如果返回的不是一个对象，那么 this 仍然指向实例。</p><h3 id="例题组合-5：箭头函数中的-this-指向"><a href="#例题组合-5：箭头函数中的-this-指向" class="headerlink" title="例题组合 5：箭头函数中的 this 指向"></a>例题组合 5：箭头函数中的 this 指向</h3><h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> foo = &#123;<br>  fn: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);  <span class="hljs-comment">// 这道题中，this 出现在 setTimeout() 中的匿名函数里，因此 this 指向 window 对象。</span><br>    &#125;);<br>  &#125;,<br>&#125;;<br><br>foo.fn(); <span class="hljs-comment">// window</span><br></code></pre></div></td></tr></table></figure><p>使用箭头函数改变this指向</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> foo = &#123;<br>  fn: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">// 使用箭头函数改变this指向</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    &#125;);<br>  &#125;,<br>&#125;;<br><br>foo.fn(); <span class="hljs-comment">// &#123;fn:f&#125;</span><br></code></pre></div></td></tr></table></figure><h4 id="结论：-4"><a href="#结论：-4" class="headerlink" title="结论："></a>结论：</h4><p>箭头函数使用 this 不适用以上标准规则，而是根据外层（函数或者全局）上下文来决定。<br>单纯箭头函数中的 this 非常简单，但是综合所有情况，结合 this 的优先级考察，这时候 this 指向并不好确定。请继续阅读。</p><h3 id="例题组合-6：this-优先级相关"><a href="#例题组合-6：this-优先级相关" class="headerlink" title="例题组合 6：this 优先级相关"></a>例题组合 6：this 优先级相关</h3><p>我们常常把通过 call、apply、bind、new 对 this 绑定的情况称为显式绑定；根据调用关系确定的 this 指向称为隐式绑定  </p><p>那么显式绑定和隐式绑定谁的优先级更高呢？</p><h4 id="题目：-1"><a href="#题目：-1" class="headerlink" title="题目："></a>题目：</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">a</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a);<br>&#125;<br><br><span class="hljs-keyword">const</span> obj1 = &#123;<br>  a: <span class="hljs-number">1</span>,<br>  foo: foo,<br>&#125;;<br><br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  a: <span class="hljs-number">2</span>,<br>  foo: foo,<br>&#125;;<br><br>obj1.foo.call(obj2); <span class="hljs-comment">// 2</span><br>obj2.foo.call(obj1); <span class="hljs-comment">// 1</span><br></code></pre></div></td></tr></table></figure><p>输出2和1，表示call/apply的显示绑定一般来说优先级更高</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">a</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.a = a;<br>&#125;<br><br><span class="hljs-keyword">const</span> obj1 = &#123;&#125;;<br><span class="hljs-keyword">var</span> bar = foo.bind(obj1);<br>bar(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(obj1.a); <span class="hljs-comment">// 2</span><br></code></pre></div></td></tr></table></figure><p>上述代码通过 bind，将 bar 函数中的 this 绑定为 obj1 对象。执行 bar(2) 后，obj1.a 值为 2。即经过 bar(2) 执行后，obj1 对象为：{a: 2}。</p><p>当再使用 bar 作为构造函数时：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> baz = <span class="hljs-keyword">new</span> bar(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">console</span>.log(baz.a) <span class="hljs-comment">// 3</span><br></code></pre></div></td></tr></table></figure><p>将会输出 3。我们看 bar 函数本身是通过 bind 方法构造的函数，其内部已经对将 this 绑定为 obj1，它再作为构造函数，通过 new 调用时，返回的实例已经与 obj1 解绑。 也就是说：new 绑定修改了 bind 绑定中的 this，因此 new 绑定的优先级比显式 bind 绑定更高。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">a</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a);<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">const</span> obj1 = &#123;<br>  a: <span class="hljs-number">2</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  a: <span class="hljs-number">3</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> bar = foo.call(obj1);<br>bar.call(obj2); <span class="hljs-comment">// 2</span><br></code></pre></div></td></tr></table></figure><p>将会输出 2。由于 foo() 的 this 绑定到 obj1，bar（引用箭头函数）的 this 也会绑定到 obj1，箭头函数的绑定无法被修改。</p><p>如果将 foo 完全写成箭头函数的形式：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>  <span class="hljs-keyword">const</span> foo = <span class="hljs-function">() =&gt;</span> <span class="hljs-function">(<span class="hljs-params">a</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a);<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> obj1 = &#123;<br>    a: <span class="hljs-number">2</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> obj2 = &#123;<br>    a: <span class="hljs-number">3</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> bar = foo.call(obj1);<br>  <span class="hljs-built_in">console</span>.log(bar.call(obj2)); <span class="hljs-comment">// 123</span><br></code></pre></div></td></tr></table></figure><p>将会输出 123.<br>「抖个机灵」，仅仅将上述代码的第一处变量 a 的赋值改为：const a = 123;</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">const</span> foo = <span class="hljs-function">() =&gt;</span> <span class="hljs-function">(<span class="hljs-params">a</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a);<br>&#125;;<br><br><span class="hljs-keyword">const</span> obj1 = &#123;<br>  a: <span class="hljs-number">2</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  a: <span class="hljs-number">3</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> bar = foo.call(obj1);<br>bar.call(obj2); <span class="hljs-comment">// undefined</span><br></code></pre></div></td></tr></table></figure><p>答案将会输出为 undefined，原因是因为使用 const 声明的变量不会挂载到 window 全局对象当中。因此 this 指向 window 时，自然也找不到 a 变量了。</p><h4 id="结论：-5"><a href="#结论：-5" class="headerlink" title="结论："></a>结论：</h4><p>优先级排序：call/apply &gt; new &gt; bind<br>call/apply/bind 是显示绑定this，new则是隐式绑定this </p><h2 id="开放例题分析"><a href="#开放例题分析" class="headerlink" title="开放例题分析"></a>开放例题分析</h2><h3 id="最典型的一道题目为：实现一个-bind-函数。"><a href="#最典型的一道题目为：实现一个-bind-函数。" class="headerlink" title="最典型的一道题目为：实现一个 bind 函数。"></a>最典型的一道题目为：实现一个 bind 函数。</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype.bind =<br>  <span class="hljs-built_in">Function</span>.prototype.bind ||<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> me = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bound</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> innerArgs = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>);<br>      <span class="hljs-keyword">var</span> finalArgs = args.concat(innerArgs);<br>      <span class="hljs-keyword">return</span> me.apply(context, finalArgs);<br>    &#125;;<br>  &#125;;<br></code></pre></div></td></tr></table></figure><blockquote><p>分析：就如同之前 this 优先级分析所示：bind 返回的函数如果作为构造函数，搭配 new 关键字出现的话，我们的绑定 this 就需要「被忽略」。为了实现这样的规则，开发者就应该需要考虑如何区分这两种调用方式。具体来讲 bound 函数中就要进行 this instanceof 的判断。<br>另外一个细节是，函数具有 length 属性，表示形参的个数。上述实现方式形参的个数显然会失真。我们的实现就需要对 length 属性进行还原。可是难点在于：函数的 length 属性值是不可重写的。<br>我们看到 this 纷繁多象，确实不容易彻底掌握。本节尽可能系统地进行讲解、说明，例题尽可能地覆盖更多 case。与此同时，需要读者在阅读之外继续进行消化与吸收。只有「记死」，才能「用活」。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/tools-git-maven-02-git%E5%9B%9E%E6%BB%9A%E5%88%86%E6%94%AF%E4%BB%A3%E7%A0%81/"/>
    <url>/2022/tools-git-maven-02-git%E5%9B%9E%E6%BB%9A%E5%88%86%E6%94%AF%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="git-回滚分支代码"><a href="#git-回滚分支代码" class="headerlink" title="git 回滚分支代码"></a>git 回滚分支代码</h1><p>基于工作需要将一个分支的版本回退到指定分支，查看“git中文文档”之后，发现并没有特别详细的解释。所以整理了本篇笔记，记录一下过程。</p><p>使用开始之前，需要知道以下 git 的两个概念：“本地工作空间” 和 “远程仓库”。如果已知这两个概念，可以跳过第一节内容，直接查看第二节内容 <a href="#titleA">使用 git reset 命令回滚分支版本</a>。</p><h2 id="本地工作空间-amp-远程仓库"><a href="#本地工作空间-amp-远程仓库" class="headerlink" title="本地工作空间 &amp; 远程仓库"></a>本地工作空间 &amp; 远程仓库</h2><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211221151659.png" alt="image-20211221151650675"></p><p>此时本地有 master ，远程有 master 和 b1 两个分支。</p><p>将远程仓库中的 b1 分支捡出到本地空间，本地master分支的内容会被暂存 or 覆盖。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> checkout b<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>新建分支 b2，并且将本地工作空间切到 b2.(idea 中，new branch 是同时执行了以下两条命令)</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> branch b<span class="hljs-number">2</span><br><span class="hljs-attribute">git</span> checkout b<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>git branch 新建分支操作只是在本地工作空间生效。<br>远程仓库中并不存在 b2 分支。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211221152609.png" alt="image-20211221152608489"></p><p>使用以下命令可以将本地建立的分支，推送到远程仓库。</p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm">git <span class="hljs-keyword">push</span> --<span class="hljs-keyword">set</span>-upstream origin b2<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211221152822.png" alt="image-20211221152821397"></p><p>结果如下：</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211221152924.png" alt="image-20211221152923230"></p><h2 id="使用-git-reset-命令回滚分支版本"><a href="#使用-git-reset-命令回滚分支版本" class="headerlink" title="使用 git reset 命令回滚分支版本"></a><a id="titleA">使用 git reset 命令回滚分支版本</a></h2><p>当前分支情况：b2 在 test-b3 版本，master 在 test-m4，希望将 b2 分支版本回退到 test-b1。</p><ol><li>checkout 本地工作空间到 b2 分支 test3。使用 reset 命令，回滚本地工作空间的 b2 分支到指定版本 test-b1，从test-b1 版本到 test-b1 版本所有修改内容会以<strong>待 commit 的方式</strong>放在本地工作空间。</li></ol><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211222004445.png" alt="image-20211222004443878"></p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--soft </span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>根据需要保留or舍弃这个期间的修改内容。这里不做任何保留直接将所有待提交的修改内容清除，使用 <code>git push -f</code> 强制推送使得远程仓库的分支和本地空间的版本一致。最终，即可将本地空间和远程 b2 分支都回退到指定版本 test-b1。</li></ol><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> -f <br></code></pre></div></td></tr></table></figure><p>如果遇到强制推送失败的报错，可以查看一下当前分支的修改权限，需要设置分支修改权限可以参考以下文章：<br><a href="https://www.cnblogs.com/panwenbin-logs/p/11212359.html">https://www.cnblogs.com/panwenbin-logs/p/11212359.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/tools-git-maven-01-git-cmd-list/"/>
    <url>/2022/tools-git-maven-01-git-cmd-list/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用60个git命令</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/spring-09-2-Spring-Data-REST%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/spring-09-2-Spring-Data-REST%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Data-REST-的使用"><a href="#Spring-Data-REST-的使用" class="headerlink" title="Spring Data REST 的使用"></a>Spring Data REST 的使用</h1><h2 id="在-SpringMVC-中配置使用-Spring-Data-REST"><a href="#在-SpringMVC-中配置使用-Spring-Data-REST" class="headerlink" title="在 SpringMVC 中配置使用 Spring Data REST"></a>在 SpringMVC 中配置使用 Spring Data REST</h2><p>新建项目，引入 JPA 和 rest 依赖，需要添加 Oracle JDBC 驱动依赖，并在 application.properties 配置相关属性。</p><p>和 <code>highlight_spring_jpa</code> 项目结构保持一致。</p><ol><li>在 <code>PersonRepository</code> 中定义查询方法，并使用 <code>@RestResource</code> 注解将该方法暴露为 REST 资源。</li></ol><ol start="2"><li><p>IDEA环境下，在 resource 目录下建立 <code>rest-default-setting.http</code> 测试 REST 请求。 </p></li><li><p>在<code>xxRepository</code> 上通过 <code>@RepositoryRestResource</code> 注解修改path属性（默认spring会加自动加上复苏）；在 application.properties 中添加<code>spring.data.rest.base-path=/api</code> 修改访问根路径，建立 <code>rest-setRestResource.http</code> 测试 REST 请求。</p></li></ol><p>具体代码查看 项目 <code>highlight_spring_rest</code> 下的对应层内容。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/spring-09-3-Spring%E7%9A%84%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <url>/2022/spring-09-3-Spring%E7%9A%84%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-的事务机制"><a href="#Spring-的事务机制" class="headerlink" title="Spring 的事务机制"></a>Spring 的事务机制</h1><p>所有的数据访问技术都有事务处理机制，这些技术提供了API来开启事务、提交事务来完成数据的操作，或者在发生错误的时候回滚数据。</p><p>Spring 的事务机制是通过统一的机制来处理不同数据访问技术的事务处理。<br>Spring 的事务机制提供了一个 <code>PlatformTranscationManager</code> 接口，用来定义统一的事务处理机制。不同的数据访问技术的事务使用不同的接口实现。</p><table><thead><tr><th>数据访问技术</th><th>实现</th></tr></thead><tbody><tr><td>JDBC</td><td>DataSourceTransactionManager</td></tr><tr><td>JPA</td><td>JpaTransactionManager</td></tr><tr><td>Hibernate</td><td>HibernateTransactionManager</td></tr><tr><td>JDO</td><td>JdoTransactionManager</td></tr><tr><td>分布式事务</td><td>JtaTransactionManager</td></tr></tbody></table><h2 id="1-声明式事务"><a href="#1-声明式事务" class="headerlink" title="1. 声明式事务"></a>1. 声明式事务</h2><p>Spring 支持通过注解来选择使用事务的方法，使用 <code>@Transactional</code> 注解表明某个 <code>public</code> 方法需要事务的支持，这是一个基于 AOP 的实现操作。</p><h2 id="2-Transactional的事务行为"><a href="#2-Transactional的事务行为" class="headerlink" title="2. @Transactional的事务行为"></a>2. <code>@Transactional</code>的事务行为</h2><ol><li>propagation: 定义了<strong>事务的生命周期</strong></li><li>isolation： 定义了<strong>事务的完整性</strong>或者是事务的隔离级别</li><li>timeout：定义事务过期时间，默认为当前数据库的过期时间</li><li>readOnly：指定当前事务是否是“只读事务”</li><li>rollbackFor：指定<strong>哪个或者哪些异常</strong>可以引起事务的回滚 (项目 <code>highlight_spring_transaction</code> 中在 serviceImpl 中演示了使用。)</li><li>noRollbackFor：指定<strong>哪个或者那些异常</strong>不需要引起事务的回滚</li></ol><h3 id="2-1-事务的生命周期propagation"><a href="#2-1-事务的生命周期propagation" class="headerlink" title="2.1 事务的生命周期propagation"></a>2.1 事务的生命周期<code>propagation</code></h3><ol><li>REQUIRED[必须的]：方法 A 调用时没有事务就新建一个事务，在 A 中调用另一个方法 B 时，方法 B 使用相同的事务；如果方法 B 发生异常需要数据回滚，整个事务数据回滚。</li><li>REQUIRES_NEW[需要新的]：对于方法 A 和 B，在方法调用时无论是否有事务都会开启一个新的事务，即：方法 B 中有异常，不会导致方法 A 中的数据回滚。</li><li>NESTED[嵌套]：和 REQUIRES_NEW 类似，支持 JDBC，不支持 JPS 和 Hibernate。</li><li>SUPPORTS[支持事务]：方法调用时有事务就用事务，没有就不用事务。</li><li>NOT_SUPPORTED[不支持事务]：强制方法不在事务中执行，若有事务，在方法调用到结束阶段事务都将被挂起。</li><li>NEVER[从不]：强制方法不在事务中执行，若有事务则抛出异常。</li><li>MANDATORY[强制性的]：强制方法在事务中执行，若无事务则抛出异常。</li></ol><h3 id="2-2-事务的完整性-隔离级别isolation"><a href="#2-2-事务的完整性-隔离级别isolation" class="headerlink" title="2.2 事务的完整性/隔离级别isolation"></a>2.2 事务的完整性/隔离级别<code>isolation</code></h3><ol><li>READ_UNCOMMITTED[读未提交]：A 事务里修改了一条记录当没有提交事务，在 B 事务中可以读到修改后的记录。可导致脏读、不可重复读以及幻读。</li><li>READ_COMMITTED[读已提交]：在 A 事务中修改了一条记录且提交事务之后，B 事务才可以读取到提交后的记录。阻止脏读，可导致不可重复读以及幻读。</li><li>REPEATABLE_READ[可重复读]：当 A 事务读取了一条记录，B 事务可以读取该条记录，但不允许修改这条记录。可阻止脏读和不可重复读，可出现幻读。</li><li>SERIALIZABLE[序列化读]：所有事务都是顺序执行的。避免避免脏读、不可重复读和幻读。</li><li>DEFAULT[默认]：使用当前数据库的默认隔离级别</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/spring-09-1-Spring-JPA%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/spring-09-1-Spring-JPA%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-JPA-的使用"><a href="#Spring-JPA-的使用" class="headerlink" title="Spring JPA 的使用"></a>Spring JPA 的使用</h1><h2 id="1-搭建数据库环境"><a href="#1-搭建数据库环境" class="headerlink" title="1. 搭建数据库环境"></a>1. 搭建数据库环境</h2><p>在win10环境中，安装 docker desktop，配置 wsl 和容器镜像加速即可。</p><p>使用<code>docker pull</code>拉取镜像，并使用以下<code>docker run</code>命令启动一个 oracle-xe 的容器。<br>拉取镜像：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker pull wnameless/oracle-xe-11g <br></code></pre></div></td></tr></table></figure><p>启动容器，名为<code>oracle-test</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker run -d --name oracle-test -p 9090:8080 -p 1521:1521 wnameless/oracle-xe-11g <br></code></pre></div></td></tr></table></figure><p>使用 idea 的 database 工具连接到数据库。<br><code>oracle-test</code>容器提供如下安装信息：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">1521</span><br><span class="hljs-attr">SID:</span> <span class="hljs-string">XE</span><br><span class="hljs-attr">username:</span> <span class="hljs-string">system/sys</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">oracle</span><br></code></pre></div></td></tr></table></figure><p>管理界面访问：</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">url:</span> http:<span class="hljs-comment">//localhost:9090/apex</span><br><span class="hljs-symbol">workspace:</span> internal<br><span class="hljs-symbol">username:</span> admin<br><span class="hljs-symbol">password:</span> oracle<br></code></pre></div></td></tr></table></figure><p>连接到数据库后，创建用户 boot，并给该用户授权，直接在system用户下执行<code>create-dbaUser.sql</code>脚本即可。（关于oracle用户的创建和详细授权的内容可以查看文章：<code>03-Oracle的用户创建及相关权限.md</code>）<br>使用 boot 用户登录并执行<code>create-person.sql</code> 脚本即可。</p><h2 id="2-新建-Spring-Boot-项目"><a href="#2-新建-Spring-Boot-项目" class="headerlink" title="2. 新建 Spring Boot 项目"></a>2. 新建 Spring Boot 项目</h2><p>建立 maven 空项目，在其中创建一个 module 项目 <code>springboot_jpa</code>。</p><ol><li>项目依赖<br>项目依赖选择 JPA 和 Web。注意由于教程使用比较旧的内容，需要 JPA 版本为 <code>&lt;version&gt;2.1.0.RELEASE&lt;/version&gt;</code>（需要注意的是，jpa 和 web 依赖版本需要选择一致，否则会出现依赖冲突。无需解决依赖冲突可以跳过 2.1 小节。）</li></ol><p>项目可以不用使用 spring-boot-starter-parent 也不用 spring-boot-starter, 因为在引入 JPA 和 Web 的时候，也都有自动引入这两个。</p><p>现在，只需要 Spring Boot 的约定配置那样，进行包文件的创建和 xxApplication.class 的创建即可。配置步骤查看 2.2 小节内容，具体代码查看 项目 <code>highlight_spring_jpa</code> 下的子项目 <code>springboot_jpa</code>。</p><p>启动成功之后，可以使用子项目根目录下的 <code>rest-api.http</code> 文件测试功能。</p><h3 id="2-1-解决依赖冲突"><a href="#2-1-解决依赖冲突" class="headerlink" title="2.1 解决依赖冲突"></a>2.1 解决依赖冲突</h3><p>pom.xml 依赖版本不一致的情况，运行时会出现冲突</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 选择 web 和 jpa 依赖， 注意version需要一致 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.oracle<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ojdbc6<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>11.2.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- google guava 包含大量 Java 常用工具类 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>21.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>运行时会出现的错误提示：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs log">2021-12-16 13:58:11.486 ERROR 22916 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   : <br><br>***************************<br>APPLICATION FAILED TO START<br>***************************<br><br>Description:<br><br>An attempt was made to call a method that does not exist. The attempt was made from the following location:<br><br>    org.springframework.boot.autoconfigure.data.AbstractRepositoryConfigurationSourceSupport$AutoConfiguredAnnotationRepositoryConfigurationSource.&lt;init&gt;(AbstractRepositoryConfigurationSourceSupport.java:128)<br><br>The following method did not exist:<br><br>    org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource.&lt;init&gt;(Lorg&#x2F;springframework&#x2F;core&#x2F;type&#x2F;AnnotationMetadata;Ljava&#x2F;lang&#x2F;Class;Lorg&#x2F;springframework&#x2F;core&#x2F;io&#x2F;ResourceLoader;Lorg&#x2F;springframework&#x2F;core&#x2F;env&#x2F;Environment;Lorg&#x2F;springframework&#x2F;beans&#x2F;factory&#x2F;support&#x2F;BeanDefinitionRegistry;Lorg&#x2F;springframework&#x2F;beans&#x2F;factory&#x2F;support&#x2F;BeanNameGenerator;)V<br><br>The method&#39;s class, org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource, is available from the following locations:<br><br>    jar:file:&#x2F;~maven&#x2F;maven-repo&#x2F;org&#x2F;springframework&#x2F;data&#x2F;spring-data-commons&#x2F;2.1.2.RELEASE&#x2F;spring-data-commons-2.1.2.RELEASE.jar!&#x2F;org&#x2F;springframework&#x2F;data&#x2F;repository&#x2F;config&#x2F;AnnotationRepositoryConfigurationSource.class<br><br>It was loaded from the following location:<br><br>    file:&#x2F;~maven&#x2F;maven-repo&#x2F;org&#x2F;springframework&#x2F;data&#x2F;spring-data-commons&#x2F;2.1.2.RELEASE&#x2F;spring-data-commons-2.1.2.RELEASE.jar<br><br><br>Action:<br><br>Correct the classpath of your application so that it contains a single, compatible version of org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource<br><br><br>Process finished with exit code 1<br></code></pre></div></td></tr></table></figure><p>解决方法：</p><ol><li>将版本换成一致的内容即可，<code>springboot_jpa</code> 项目完整依赖如下：<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 选择 web 和 jpa 依赖， 注意version需要一致</span><br><span class="hljs-comment">           而且 jpa 版本只能为 2.1.0.RELEASE</span><br><span class="hljs-comment">           2.2之后的版本将 public Sort(Sort.Direction direction, String... properties) &#123;&#125; 改成 private了，不能直接调用。如果想要使用其他版本，需要查看相应版本源码，然后修改 DataController.class </span><br><span class="hljs-comment">       --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.oracle<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ojdbc6<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>11.2.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- google guava 包含大量 Java 常用工具类 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>21.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><h3 id="2-2-项目配置步骤解析"><a href="#2-2-项目配置步骤解析" class="headerlink" title="2.2 项目配置步骤解析"></a>2.2 项目配置步骤解析</h3><ol><li>配置基本属性<br>在 application.properties 中配置数据源和 jpa 的相关属性</li><li>定义实体类映射<br>在 domain 包下，编写数据库实体 Person.class，提供构造方法和 getter/setter 方法。</li><li>定义数据访问接口<br>在 dao 包下，编写数据访问接口，interface，定义数据查询语句</li><li>编写 mvc 控制器<br>DI 注入数据访问接口，调用相关接口获得数据，并返回成 json 到前端中。</li></ol><p>具体代码查看 项目 <code>highlight_spring_jpa</code> 下的子项目 <code>springboot_jpa</code>的对应层内容。启动成功之后，可以使用<code>springboot_jpa</code>项目根目录下的 <code>rest-api.http</code> 文件测试对应接口的功能。</p><p>Spring Data JPA : 基于 Spring Data 的 repository 之上，将 repository 自动输出为 REST 资源。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/spring-08-BootStrap-AngularJS%E7%9A%84web%E5%BA%94%E7%94%A8/"/>
    <url>/2022/spring-08-BootStrap-AngularJS%E7%9A%84web%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="BootStrap和AngularJS的web应用"><a href="#BootStrap和AngularJS的web应用" class="headerlink" title="BootStrap和AngularJS的web应用"></a>BootStrap和AngularJS的web应用</h1><p>7.6 WebSocket 开发聊天室应用 –待定实战。</p><h2 id="BootStrap和Angular使用相关"><a href="#BootStrap和Angular使用相关" class="headerlink" title="BootStrap和Angular使用相关"></a>BootStrap和Angular使用相关</h2><p>BootStrap 用于控制页面样式。</p><p>AngularJS 用于 DOM 操作。</p><h2 id="实践制作导航栏功能"><a href="#实践制作导航栏功能" class="headerlink" title="实践制作导航栏功能"></a>实践制作导航栏功能</h2><ol><li>BootStrap 制作导航样式</li><li>使用 AngularJS 实现导航切换页面的路由功能</li><li>AngularJS 通过内置对象 $http 服务和SpringBoot提供的REST服务</li><li>使用指令封装 jQuery UI的日期选择器</li></ol><p>highlight_springboot_AngularJS</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/spring-07-SpringBoot%E7%9A%84Web%E5%BC%80%E5%8F%91/"/>
    <url>/2022/spring-07-SpringBoot%E7%9A%84Web%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="基于-Spring-Boot-进行-web-开发"><a href="#基于-Spring-Boot-进行-web-开发" class="headerlink" title="基于 Spring Boot 进行 web 开发"></a>基于 Spring Boot 进行 web 开发</h1><h2 id="1-SpringBoot-的-Web开发支持"><a href="#1-SpringBoot-的-Web开发支持" class="headerlink" title="1. SpringBoot 的 Web开发支持"></a>1. SpringBoot 的 Web开发支持</h2><p>在 pom.xml 的依赖中，直接使用 starter-web 即可导入 spring-mvc 和 tomcat 依赖。</p><p>SpringBoot 的 autoconfiguration 配置的类会自动进行相关配置</p><h2 id="2-Thymeleaf-模板引擎"><a href="#2-Thymeleaf-模板引擎" class="headerlink" title="2. Thymeleaf 模板引擎"></a>2. Thymeleaf 模板引擎</h2><p>Thymeleaf 是一个 Java 类库，一个 xml、xhtml、html5 的模板引擎。</p><ol><li>引入 Thymeleaf</li></ol><p>使用时候需要在 pom.xml 中导入starter-thymeleaf依赖，<html> 标签需通过 <code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code> 引入命名空间。<br>基本的 Thymeleaf 模板页面如下，引入了 Bootstrap（css样式控制） 和 jQuery（DOM操作）【不需要可以去掉】</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;bootstrap/css/bootstrap.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;bootstrap/css/bootstrap-theme.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>访问 model 中的数据<br>通过 “${}” 访问 model 中的属性，需要处理动态内容需要加上”th:”前缀</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-primary&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-title&quot;</span>&gt;</span>访问model<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;singlePerson.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li>model 中数据的迭代<br>通过 “th:each”来做循环迭代</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;not #lists.isEmpty(people)&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-primary&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-title&quot;</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-group&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-group-item&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;person:$&#123;people&#125;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;person.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;person.age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--&lt;button class=&quot;btn&quot; th:onclick=&quot;&#x27;getName(\&#x27;&#x27;+$&#123;person.name&#125;+&#x27;\&#x27;);&#x27;&quot;&gt;获得名字&lt;/button&gt;--&gt;</span><br>                    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                    Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Only variable expressions returning</span><br><span class="hljs-comment">                    添加点击事件时出现了问题,报错日志说是参数只允许数值或布尔，如果所以用字符串类型使用 [[$&#123;变量&#125;&#125;]] 的形式。</span><br><span class="hljs-comment">                    --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">th:onclick</span>=<span class="hljs-string">&quot;getName([[$&#123;person.name&#125;]])&quot;</span>&gt;</span>获得名字<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="4"><li>数据判断<br>使用 “th:if” 进行条件判断，支持 “&gt;”,”&lt;”,”&gt;=”,”&lt;=”,”==”,”!=”<br>支持使用 SpringEL 表达式语言用于条件判断中。</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;not #lists.isEmpty(people)&#125;&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--条件成立的话，显示内容--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="5"><li>在 JS 中访问 model 值</li></ol><ul><li>通过 <code>th:inline=&quot;javascript&quot;</code> 添加到script，在 JS 代码中可以访问 model 中的属性</li><li>通过 “[[${}]]” 格式获得实际的值</li></ul><h2 id="3-SSL-配置"><a href="#3-SSL-配置" class="headerlink" title="3. SSL 配置"></a>3. SSL 配置</h2><ol><li><p>使用 keytools 生成密钥和证书<br>keytool是JDK自带的密钥和证书管理工具，在系统变量配置一下 JAVA_HOME 即可使用。</p></li><li><p>使用命令：</p></li></ol><ul><li><p>生成密钥和证书</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 交互模式生成</span><br>keytool -genkeypair -alias coco -keyalg RSA -keysize 1024 -keypass 123456 -validity 365 -keystore d:\coco.keystore -storepass 123456<br><span class="hljs-meta">#</span><span class="bash"> 一步到位生成</span><br>keytool -genkeypair -alias &quot;coco&quot; -keypass 123456 -keyalg &quot;RSA&quot; -keystore &quot;d:\coco.keystore&quot; -storepass 123456 -dname <br>&quot;CN=www.****.com, OU=anything, O=anything, L=anything, ST=anything, C=anything&quot;<br></code></pre></div></td></tr></table></figure></li><li><p>导出证书</p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">keytool -exportcert -alias tomcat -file d:<span class="hljs-symbol">\t</span>omcat.crt -keystore d:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\a</span>dmin<span class="hljs-symbol">\.</span>keystore -storepass xxxxx<br></code></pre></div></td></tr></table></figure><p>导出证书之后，可以在浏览器中导入证书。 <code>入口：工具》Internet 选项》内容》证书》受信任的根证书颁发机构》导入</code></p></li></ul><h2 id="4-Favicon-图标配置"><a href="#4-Favicon-图标配置" class="headerlink" title="4. Favicon 图标配置"></a>4. Favicon 图标配置</h2><p>2.2.x之前，在 application.properties 中可以进行 Favicon 配置，然后</p><p>2.2.x之后，不需要在yml文件中配置了，而是在html中配置即可</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Favicon<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/public/favicon.ico&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;bookmark&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/public/favicon.ico&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>配置icon<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/spring-06-SpringBoot%E6%A0%B8%E5%BF%83/"/>
    <url>/2022/spring-06-SpringBoot%E6%A0%B8%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-核心"><a href="#Spring-Boot-核心" class="headerlink" title="Spring Boot 核心"></a>Spring Boot 核心</h1><h2 id="1-基本配置"><a href="#1-基本配置" class="headerlink" title="1. 基本配置"></a>1. 基本配置</h2><h3 id="1-1-了解即可的配置"><a href="#1-1-了解即可的配置" class="headerlink" title="1.1 了解即可的配置"></a>1.1 了解即可的配置</h3><div class="hljs code-wrapper"><pre><code>1. 启动类 和 @SpringBootApplication2. 关闭特定的自动配置3. 定制 Banner</code></pre></div><h3 id="1-2-Spring-Boot-的配置文件-xxx-yaml"><a href="#1-2-Spring-Boot-的配置文件-xxx-yaml" class="headerlink" title="1.2 Spring Boot 的配置文件 xxx.yaml"></a>1.2 Spring Boot 的配置文件 xxx.yaml</h3><h3 id="1-3-starter-pom-的依赖支持"><a href="#1-3-starter-pom-的依赖支持" class="headerlink" title="1.3 starter pom 的依赖支持"></a>1.3 starter pom 的依赖支持</h3><p>Spring Boot 自身提供了很多功能的自动配置支持。只要在 pom.xml 中引入对应的 starter pom 即可使用在项目依赖中找到对应功能支持的Bean。 </p><p>除了官方的 starter pom 之外，还有第三方为 Spring Boot 所写的 starter pom，也是在 pom.xml 中引入相应依赖即可。 – 比如 Spring Batch 批处理sql</p><h3 id="1-4-使用-xml-配置"><a href="#1-4-使用-xml-配置" class="headerlink" title="1.4 使用 xml 配置"></a>1.4 使用 xml 配置</h3><p>Spring Boot 虽然提倡零配置，但是有一些特殊情况需要使用 xml 配置，可以通过 Spring 提供的<code>@ImportResource</code> 来加载配置。如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ImportResource(&#123;&quot;classpath:some-context.xml&quot;, &quot;classpath:anoter-context.xml&quot;&#125;)</span><br></code></pre></div></td></tr></table></figure><h2 id="2-外部配置"><a href="#2-外部配置" class="headerlink" title="2. 外部配置"></a>2. 外部配置</h2><p>Spring Boot 允许使用 properties 或 yaml 文件或者命令行参数的方式，进行自定义外部配置。</p><ol><li><p>使用命令行参数的方式<br>使用默认配置运行 springboot打包后的jar包</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>xx.<span class="hljs-keyword">jar</span><br></code></pre></div></td></tr></table></figure><p>使用命令行参数的方式，在运行时修改Tomcat端口号</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>xxx.<span class="hljs-keyword">jar </span>--server.port=<span class="hljs-number">9090</span> <br></code></pre></div></td></tr></table></figure></li><li><p>使用@Value方式，注入 properties 文件中的值 – 可以用来设置一些静态资源，文件缓存路径等。</p></li></ol><p>注意：这种方式没有指定资源文件位置的话，只能在 application.yml 中编写自定义的值。</p><ol start="3"><li>通过 Bean 类型映射一个properties的属性（基于properties）</li></ol><p>通过 @ConfigurationProperties注解，使用类型安全的配置方式。</p><p><strong>Spring Boot 1.4之后取消了 ConfigurationProperties 的 locations 属性，无法指定属性资源的位置。</strong></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211213160619.png" alt="image-20211213160611139"></p><p>两种替代方案：</p><ol><li>使用 @Component 注册为组件，然后使用 @PropertySource 指定资源位置。</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;author&quot;)</span><br><span class="hljs-meta">@PropertySource(value = &#123;&quot;classpath:author.properties&quot;&#125;)</span>  <span class="hljs-comment">// 不需要加 src/..../resource的路径前缀</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Author</span> </span>&#123;&#125;<br></code></pre></div></td></tr></table></figure><p><strong>缺点</strong>：只能使用 xxx.properties 文件。</p><ol start="2"><li>新建 application-animal.yml 文件，然后在 application.yml 中开启该属性文件</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">spring:<br>  profiles:<br>    active: animal<br></code></pre></div></td></tr></table></figure><p><strong>缺点</strong>：要按 SpringBoot 的规定的格式配置，即 application-XXX.yml<br>         一次只能开启一个 -xxx.yml 文件，最好用来配置环境变量。<br>         属于 Profile 配置内容。</p><h2 id="3-日志配置"><a href="#3-日志配置" class="headerlink" title="3. 日志配置"></a>3. 日志配置</h2><p>默认使用 Logback 作为日志框架，支持Log4J,Log4J2,Java Util Logging, Logback等作为日志框架。</p><h2 id="4-Profile-配置"><a href="#4-Profile-配置" class="headerlink" title="4. Profile 配置"></a>4. Profile 配置</h2><p>需要注意配置文件的文件命名格式应该为：application-{xxx}.yml 才可以被 springboot 自动解析。</p><p>一次只能开启一个 -xxx.yml 文件，最好用来配置环境变量。</p><h2 id="5-SpringBoot-运行原理"><a href="#5-SpringBoot-运行原理" class="headerlink" title="5. SpringBoot 运行原理"></a>5. SpringBoot 运行原理</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/spring-05-SpringBoot%E6%9E%84%E5%BB%BA/"/>
    <url>/2022/spring-05-SpringBoot%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><h2 id="构建-SpringBoot"><a href="#构建-SpringBoot" class="headerlink" title="构建 SpringBoot"></a>构建 SpringBoot</h2><p>构建 SpringBoot 项目的方式有多种，通过官方网站 <a href="http://start.spring.io/">http://start.spring.io</a> 生成项目包，通过 Spring Tool Suite，IDEA，Spring Boot CLI，Maven 手工构建。直接通过 spring.io 选择提前确定</p><p>本案例选择Maven 手工构建，步骤如下：</p><ol><li>新建空maven</li><li>引入springboot-starter父依赖， 引入starter pom 的 web 依赖</li><li>建立包结构，建立 springboot 入口类（命名规则为：’artifactId + Application.class’）</li><li>测试项目部署是否正确：建立 controller 类进行测试。</li></ol><p>具体实例代码查看 highlight_springboot 项目下，git log 为 ‘springboot项目基础构建’ 的提交内容。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/spring-04-SpringMVC/"/>
    <url>/2022/spring-04-SpringMVC/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="4-1-快速构建-SpringMVC-项目"><a href="#4-1-快速构建-SpringMVC-项目" class="headerlink" title="4.1 快速构建 SpringMVC 项目"></a>4.1 快速构建 SpringMVC 项目</h2><p>代码示例查看：highlight_springmvc4 项目。<br>该项目的 pom.xml 中定义打包模式为 <code>war</code>包，需要部署到 tomcat 下才可以运行调试。</p><p>如果使用 IDEA ，可以通过如下配置直接使用 IDEA 内置 tomcat 插件， 注意 Application Context 需要和 URL 访问路径保持一致。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211209155827.png" alt="image-20211209155826272"></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211209155751.png" alt="image-20211209155750147"></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211209155712.png" alt="image-20211209155702641"></p><h2 id="4-2-Spring-MVC-常用注解"><a href="#4-2-Spring-MVC-常用注解" class="headerlink" title="4.2 Spring MVC 常用注解"></a>4.2 Spring MVC 常用注解</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><p>@Controller注解在<code>类</code>上。<br>用来声明<code>控制器Bean</code>, Dispatcher Servlet 会自动扫描该注解下的类。<br>普通Bean时，使用 @Component、@Service、@Repository、@Controller都是等同的。</p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p>注解在<code>类</code>或者<code>方法</code>之上。<br>用来映射 Web 请求（访问路径和参数）、处理类和方法。<br>注解在方法上的 @RequestMapping 路径会继承继承在类上的路径。<br>支持 Servlet 的request 和 response作为参数，也支持对 request和response的媒体类型进行配置（文件格式）</p><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><p>注解在<code>返回值前面</code>或者<code>方法上</code>。<br>支持将返回值放在 response 体内，而不是返回一个页面。<br>在基于 Ajax的程序时，可以以此注解返回数据而不是也页面。</p><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><p>注解在 <code>参数前</code>。<br>允许 request 的参数在 request 体中，而不是直接拼接在链接地址中。</p><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h3><p>注解在 <code>参数前</code>。<br>用来接收路径参数，如 /news/001, 可以接收 001 作为参数</p><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><p>注解在 <code>类</code>。<br>一个组合注解，组合了 @Controller 和 <code>@ResponseBody</code>。<br>当只开发一个与页面交互数据的控制时，可以使用此注解。</p><h2 id="4-3-传值类"><a href="#4-3-传值类" class="headerlink" title="4.3 传值类"></a>4.3 传值类</h2><h2 id="4-4-Spring-MVC-基本配置"><a href="#4-4-Spring-MVC-基本配置" class="headerlink" title="4.4 Spring MVC 基本配置"></a>4.4 Spring MVC 基本配置</h2><h3 id="1-静态资源配置"><a href="#1-静态资源配置" class="headerlink" title="1. 静态资源配置"></a>1. 静态资源配置</h3><h3 id="2-拦截器配置"><a href="#2-拦截器配置" class="headerlink" title="2. 拦截器配置"></a>2. 拦截器配置</h3><ol><li><p>继承 HanlerInterceptorAdapter类（拦截器的处理适配器类） 或者实现 HandlerInterceptor接口来实现自定义拦截器。</p></li><li><p>通过重写 preHandle() 和 postHandle() 来编写请求前和请求后的相关业务处理代码。</p></li><li><p>需要在 WebMvcConfigurerAdapter 的Web配置Bean中通过依赖注入得到自定义拦截器的Bean，重写 addInterceptors()方法，注册自定义的拦截器。</p></li></ol><p>具体实例代码查看 highlight_springmvc4 项目下，git log 为 ‘4.2.2拦截器配置’ 的提交内容。</p><h3 id="3-ControllerAdvice"><a href="#3-ControllerAdvice" class="headerlink" title="3. ControllerAdvice"></a>3. ControllerAdvice</h3><p>类上：<br>@ControllerAdvice: 作用是将对控制器的全局配置放在同一个位置<br>方法内：<br>@ExceptionHandler(value=Exception.class):  全局处理控制器中的异常，可以通过value来过滤拦截天降<br>@ModelAttribute: 将键值对添加到全局，所有注解了 @RequeMapping()的方法，都可以通过@ModelAttribute(“xxx”)获取对用值。<br>@InitBinder: 用来设置 WebDataBinder，绑定前台请求参数到 Model 中</p><p>具体实例代码查看 highlight_springmvc4 项目下，git log 为 ‘@ControllerAdvice-全局控制器建言实例’ 的提交内容。</p><h3 id="4-SpringMVC-的其他配置"><a href="#4-SpringMVC-的其他配置" class="headerlink" title="4. SpringMVC 的其他配置"></a>4. SpringMVC 的其他配置</h3><h3 id="4-1-快捷的-ViewController"><a href="#4-1-快捷的-ViewController" class="headerlink" title="4.1 快捷的 ViewController"></a>4.1 快捷的 ViewController</h3><p>在 继承了 WebMvcConfigurerAdapter 的 Bean 中，重写 addViewControllers() 方法，简化页面转向配置。<br>具体实例代码查看 highlight_springmvc4 项目下，git log 为 ‘使用addViewControllers()方法，简化页面转向配置’ 的提交内容。</p><h3 id="4-2-路径匹配参数配置"><a href="#4-2-路径匹配参数配置" class="headerlink" title="4.2 路径匹配参数配置"></a>4.2 路径匹配参数配置</h3><p>在 Spring MVC 中，如果路径参数带“.”， “.”后的值将会被忽略。例如，访问“<a href="http://localhost:8080/springmvc_war/anno/pathvar/xx.yy%E2%80%9D%EF%BC%8C%E6%AD%A4%E6%97%B6%EF%BC%8C%E2%80%9C.%E2%80%9D%E5%90%8E%E7%9A%84yy%E4%BC%9A%E8%A2%AB%E5%BF%BD%E7%95%A5%E3%80%82">http://localhost:8080/springmvc_war/anno/pathvar/xx.yy”，此时，“.”后的yy会被忽略。</a></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211210142713.png" alt="image-20211210142704907"></p><p>通过重写 方法可以不忽略“.”后面的参数，具体实例代码查看 highlight_springmvc4 项目下，git log 为 ‘修改路径匹配参数配置为：不忽略参数中“.”后面的内容’ 的提交内容。<br>再次访问“<a href="http://localhost:8080/springmvc_war/anno/pathvar/xx.yy%E2%80%9D%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%E3%80%82">http://localhost:8080/springmvc_war/anno/pathvar/xx.yy”，结果如下。</a></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211210143327.png" alt="image-20211210143326590"></p><h3 id="SpringMVC-的更多其他配置查看源码API和官方文档即可"><a href="#SpringMVC-的更多其他配置查看源码API和官方文档即可" class="headerlink" title="SpringMVC 的更多其他配置查看源码API和官方文档即可"></a>SpringMVC 的更多其他配置查看源码API和官方文档即可</h3><p>查看类 <code>extends WebMvcConfigurerAdapter</code> 或者 接口<code>implements WebMvcConfigurer &#123;</code></p><h2 id="4-5-SpringMVC-的高级配置"><a href="#4-5-SpringMVC-的高级配置" class="headerlink" title="4.5 SpringMVC 的高级配置"></a>4.5 SpringMVC 的高级配置</h2><h3 id="1-文件上传配置"><a href="#1-文件上传配置" class="headerlink" title="1. 文件上传配置"></a>1. 文件上传配置</h3><p>使用 multipartResolver 配置实现文件上传。</p><p>具体实例代码查看 highlight_springmvc4 项目下，git log 为 ‘文件上传配置-已解决文件名称中文乱码问题’ 的提交内容。</p><p><strong>注意</strong>:设置文件上传编码为 UTF-8，否则保存的文件名称会出现中文乱码<br>即，在 MyMvcConfig Class 中的 @Bean 的 multipartResolver() 中添加 <code>multipartResolver.setDefaultEncoding(&quot;UTF-8&quot;);</code></p><h3 id="2-自定义-HttpMessageConverter"><a href="#2-自定义-HttpMessageConverter" class="headerlink" title="2. 自定义 HttpMessageConverter"></a>2. 自定义 HttpMessageConverter</h3><p>可以自定义处理的 contentType 类型。</p><p>具体实例代码查看 highlight_springmvc4 项目下，git log 为 ‘自定义消息转化器HttpMessageConverter’ 的提交内容。</p><p><strong>注意：</strong></p><ol><li>页面跳转的为 <code>registry.addViewController(&quot;/converter&quot;).setViewName(&quot;/converter&quot;); </code>– 访问URI为 converter，页面名称为 <code>converter.jsp</code></li><li>方法请求的 controller 为：<code>RequestMapping(value= &quot;/convert&quot;)</code>, 页面请求 url 为：’convert’</li></ol><h3 id="3-服务器端推送技术"><a href="#3-服务器端推送技术" class="headerlink" title="3. 服务器端推送技术"></a>3. 服务器端推送技术</h3><p>服务器推送方案都是基于：当客户端向服务端发送请求，服务段会抓住这个请求不放，等有数据更新的时候才返回给客户。</p><p>除了上述服务器推送技术以外，还有 WebSocket – 双向通信技术可以实现服务器向客户端发送消息。</p><p>spring 实现服务端推送技术有两种方式：</p><ol><li>使用 sse ：<br>具体实例代码查看 highlight_springmvc4 项目下，git log 为 ‘基于sse的服务端推送’ 的提交内容。</li><li>基于异步支持：Async，需要配置开启 Async 方式：<br>具体实例代码查看 highlight_springmvc4 项目下，git log 为 ‘基于servlet异步方法特性实现定时向客户端推送数据’ 的提交内容。</li></ol><h3 id="4-SpringMVC的测试"><a href="#4-SpringMVC的测试" class="headerlink" title="4. SpringMVC的测试"></a>4. SpringMVC的测试</h3><p>为了在<strong>不启动项目</strong>状态下，测试 Web 项目，需要一些 Servlet 相关的模拟对象，比如：MockMVC、MockHttpServletRequest、MockHttpServletResponse、MockHttpSession等。</p><p>以下示例借助 JUnit 和 Spring TestContext framework 分别对’普通页面转向控制器’和’RestController’进行测试。<br>具体实例代码查看 highlight_springmvc4 项目下，git log 为 ‘springmvc-MvcMock测试实现’ 的提交内容。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>此处的 spring mvc 配置，没有内嵌 tomcat，需要将项目打包成war包，部署到 tomcat/weblogic 等 apache 服务器中发布运行。</li><li>测试相关的controller或service，可以通过一些servlet相关的模拟对象进行用例测试。 – 基于测试驱动开发（TDD）</li><li>spring mvc 和 spring boot 不一样的地方在于，spring mvc 没有启动类，在项目源码中没有任何一个地方有 psvm 项目运行入口。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/spring-03-Spring%E9%AB%98%E7%BA%A7%E8%AF%9D%E9%A2%98/"/>
    <url>/2022/spring-03-Spring%E9%AB%98%E7%BA%A7%E8%AF%9D%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-高级话题"><a href="#Spring-高级话题" class="headerlink" title="Spring 高级话题"></a>Spring 高级话题</h1><h2 id="3-1-Spring-Aware"><a href="#3-1-Spring-Aware" class="headerlink" title="3.1 Spring Aware"></a>3.1 Spring Aware</h2><p>Spring Aware 能够让自定义的Bean获得Spring容器的服务。因为 Spring容器（ApplicationContext） 接口继承了 MessageSource 接口、ApplicationEventPublisher接口和ResourceLoader接口。</p><p>Spring Aware 是设计也用来 Spring 框架内部使用的，如果在自定义Bean中使用了Spring Aware（即实现了相关的 Aware接口），那么这个Bean就和Spring的框架耦合。</p><p>Spring Aware 提供的相关 Aware 接口如下：可以按需implement对应的接口，调用相关功能。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>BeanNameAware</td><td>获取容器中Bean的名称</td></tr><tr><td>BeanFactoryAware</td><td>获取当前 bean factory，这样可以调用容器服务</td></tr><tr><td>ApplicationContextAware</td><td>当前的 application context，这样可以调用容器的服务</td></tr><tr><td>MessageSourceAware</td><td>获取 message source，可以获取文本信息</td></tr><tr><td>ApplicationEventPublisherAware</td><td>应用事件发布其，可以发布事件，02-spring常用配置的事件Event也可以通过实现这个接口来发布事件</td></tr><tr><td>ResourceLoaderAware</td><td>获取资源加载器，可以获得外部资源文件</td></tr></tbody></table><p>具体实例代码查看:<br><code>com.wisely.highlight_spring4.ch3.aware</code> 包 和 <code>resource\ch3\testAware.txt</code> 文件内容</p><h2 id="3-2-多线程任务-–-并发任务"><a href="#3-2-多线程任务-–-并发任务" class="headerlink" title="3.2 多线程任务 – 并发任务"></a>3.2 多线程任务 – 并发任务</h2><p>Spring 通过<strong>任务执行器</strong>(TaskExecutor)来实现多线程和并发编程。使用<code>ThreadPoolTaskExecutor</code>可以实现一个基于线程池的任务执行器，但是需要 @EnableAsync 来开启异步任务支持</p><p>具体实例代码查看:<br><code>com.wisely.highlight_spring4.ch3.taskexecutor</code> 包内容</p><h2 id="3-3-计划任务"><a href="#3-3-计划任务" class="headerlink" title="3.3 计划任务"></a>3.3 计划任务</h2><h2 id="3-4-条件注解-Conditional"><a href="#3-4-条件注解-Conditional" class="headerlink" title="3.4 条件注解 @Conditional"></a>3.4 条件注解 <code>@Conditional</code></h2><p>使用 <code>@Conditional</code>实现基于条件的Bean的创建.</p><h2 id="3-5-组合注解和元注解"><a href="#3-5-组合注解和元注解" class="headerlink" title="3.5 组合注解和元注解"></a>3.5 组合注解和元注解</h2><p>多个元注解组合到一起形成一个组合注解.</p><h2 id="3-6-Enable-注解的工作原理"><a href="#3-6-Enable-注解的工作原理" class="headerlink" title="3.6 @Enable* 注解的工作原理"></a>3.6 @Enable* 注解的工作原理</h2><p>通过 <code>@Enable*</code> 可以开启一项功能的支持。减少自己配置大量代码，降低使用难度。</p><table><thead><tr><th>注解名称</th><th>注解含义</th><th>出现位置</th></tr></thead><tbody><tr><td>@EnableAspectJAutoProxy</td><td>开启对 AspectJ 自动代理的支持</td><td>part 1</td></tr><tr><td>@EnableAsync</td><td>开启异步方法的支持</td><td>part 1</td></tr><tr><td>@EnableScheduling</td><td>开启计划任务的支持</td><td>part 1</td></tr><tr><td>@EnableWebMvc</td><td>Web MVC 的配置支持</td><td>part 2</td></tr><tr><td>@EnableConfigurationProperties</td><td>开启对 ConfigurationProperties 注解配置 Bean 的支持</td><td>part 3</td></tr><tr><td>@EnableJpaRepositories</td><td>开启对 Spring Data JPS Repository 的支持</td><td>part 3</td></tr><tr><td>@EnableTransactionManagement</td><td>注解式事务的支持</td><td>part 3</td></tr><tr><td>@EnableCaching</td><td>注解式缓存的支持</td><td>part 3</td></tr></tbody></table><p>在 <code>@Enable*</code>注解的源码中，所有注解都有一个 <code>@Import</code>注解，用来导入配置类。</p><ol><li>直接导入配置类</li><li>依据条件按选择配置类</li><li>动态注册 Bean</li></ol><h2 id="3-7-Spring-集成测试"><a href="#3-7-Spring-集成测试" class="headerlink" title="3.7 Spring 集成测试"></a>3.7 Spring 集成测试</h2><p>Spring TestContext Framework 对集成测试提供顶级支持，不依赖于特定的测试框架：可以使用 Junit，也可以使用 TestNG。<br>集成测试涉及程序中的各个分层，前面“运行”部分都可以用 Spring 测试来检验功能是否正常。</p><p>基于 Maven 构建的项目结构默认有关的测试目录为：<code>src/test/java</code> (测试代码) 和 <code>src/test/resource</code>（测试资源） 区别于 <code>src/main/java</code>（项目源码） 和 <code>src/main/resource</code>（项目资源）</p><p>Spring 提供了 <code>SrpingJUnit4ClassRunner</code> 类，用于提供 Spring TestContext Framework 的功能。配合 <code>@ContextConfiguration(classes = &#123;xxxConfig.class&#125;)</code>来配置 Application Context，通过 <code>@ActiveProfiles(&quot;xxx&quot;)</code>来确定活动的 profile</p><p>具体实例代码查看:<br>src\mian 和 src\test 下 <code>com.wisely.highlight_spring4.ch3.fortest</code> 包的内容。 – <em>注意：spring-test 的版本要和本身 Spring 的版本一致，否则运行报错。</em></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/spring-02-Spring%E7%9A%84%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/spring-02-Spring%E7%9A%84%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-的常用配置"><a href="#Spring-的常用配置" class="headerlink" title="Spring 的常用配置"></a>Spring 的常用配置</h1><h2 id="2-1-Bean的Scope"><a href="#2-1-Bean的Scope" class="headerlink" title="2.1 Bean的Scope"></a>2.1 Bean的Scope</h2><p>Spring 中 Bean的Scope有5种:分别是 <code>Singleton</code>,<code>Prototype</code>,<code>Request</code>,<code>Session</code>,<code>GlobalSession</code><br>另外,在 Spring Batch 中还有一个 Scope 是使用 <code>@StepScope</code>.</p><p>@Bean的注解默认是’Singleton’单例模式,在容器中只会存在一个.</p><h2 id="2-2-EL-Spring-表达式语言"><a href="#2-2-EL-Spring-表达式语言" class="headerlink" title="2.2 EL-Spring 表达式语言"></a>2.2 EL-Spring 表达式语言</h2><p>在 Spring 中涉及调用各种资源的情况,包括普通文件,网址,配置文件,系统环境变量等,可以使用 EL表达式语言实现资源的注入.</p><p>有7种方式：</p><ol><li>注入普通字符串</li><li>注入操作系统属性</li><li>注入表达式结果</li><li>其他Bean属性</li><li>文件资源</li><li>网址资源</li><li>配置文件</li></ol><p>具体实例代码查看:</p><ol><li><code>com.wisely.highlight_spring4.ch2.el</code> 包</li><li>Resource目录下的<code>ch2\el</code>文件。</li><li>pom.xml 导入 <code>commons-io</code> 提供文件流读写的支持</li></ol><h2 id="2-3-Bean-的初始化和销毁"><a href="#2-3-Bean-的初始化和销毁" class="headerlink" title="2.3 Bean 的初始化和销毁"></a>2.3 Bean 的初始化和销毁</h2><p>Spring 对 Bean 的生命周期的操作提供了支持。在使用 Java 配置和注解配置下提供了如下两种方式：<br>（1） Java 配置方式：使用<code>@Bean</code>的<code>initMethod</code>和<code>destroyMethod</code>（相当于 xml 配置的 init-method 和 destroy-method）<br>（2）注解方式：利用<code>JSR-250</code>的<code>@PostConstruct</code> 和 <code>@PreDestroy</code>。</p><p>具体实例代码查看:<br><code>com.wisely.highlight_spring4.ch2.prepost</code> 包以及需要在 pom.xml 中导入 <code>JSR250-api</code> 提供注解方式的支持。</p><h2 id="2-4-Profile-配置文件"><a href="#2-4-Profile-配置文件" class="headerlink" title="2.4 Profile 配置文件"></a>2.4 Profile 配置文件</h2><p>Profile 为在不同环境下使用不同配置提供了支持（开发环境下的配置和生产环境下的配置肯定是不一致的，比如：数据库配置，各种路径配置。）</p><ol><li>通过设定 Environment 的ActiveProfiles 来设定当前 context 需要使用的配置环境。在开发中使用 @Profile 注解类或者方法，达到不同情况下实例化不同的Bean。 – 具体实例看<code>com.wisely.highlight_spring4.ch2.profile</code> 下的内容。</li></ol><p>还可以<br>2. 通过设定 jvm 的 spring.profiles.active 参数来设置配置环境<br>3. 如果是 Web项目，在 Servlet 的 context parameter 中配置<br>    Servlet2.5 及以下：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcher<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>spring.profile.active<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>production<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>Servlet3.0 及以上：</code></pre></div><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebInit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebApplicationInitializer</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStartup</span><span class="hljs-params">(ServletContext servletContext)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        servletContext.setAttribute(<span class="hljs-string">&quot;spring.profile.default&quot;</span>,<span class="hljs-string">&quot;dev&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-5-Application-Event（事件）"><a href="#2-5-Application-Event（事件）" class="headerlink" title="2.5 Application Event（事件）"></a>2.5 Application Event（事件）</h2><p>Spring 的事件为Bean与Bean之间的<code>消息通信</code>提供了支持。</p><p>当一个Bean A处理完一个任务之后，希望另一个Bean B直到并能做出相应处理。这就需要 Bean B 监听当前Bean A 所发送的事件<code>Application Event</code>。</p><p>Spring 的事件需要遵循如下流程：</p><ol><li>自定义事件，集成 ApplicationEvent</li><li>定义事件监听器，在接收消息者B中，实现 ApplicationListener</li><li>发布事件，在发送消息者A中，注入容器并使用容器发布事件</li></ol><p>具体实例代码查看:<br><code>com.wisely.highlight_spring4.ch2.event</code> 包 或者 <code>com.wisely.highlight_spring4.ch2.AtoB_Event</code> 包中。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/spring-01-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5or%E5%8F%8D%E8%BD%AC%E6%8E%A7%E5%88%B6/"/>
    <url>/2022/spring-01-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5or%E5%8F%8D%E8%BD%AC%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>依赖注入（DI）和 反转控制（IOC）在 Spring 环境下是等同的概念。</p><p><strong>控制反转</strong>时通过依赖注入实现的。</p><p><code>依赖注入：通过容器创建和维护对象间的依赖关系，而不是通过对象本身负责自己的创建和解决自己的依赖问题。</code></p><p><strong>依赖注入的目的是解耦合</strong>。希望自己的类A具备某项功能的时候，通过和具备该功能的类B进行组合，而不是继承B（继承关系的话，A与B之间耦合度过高）</p><p>Spring IoC 容器负责创建 Bean，并通过容器将功能类B的 Bean 注入到你需要的类A的 Bean 中。<br>Spring 提供了使用 xml、注解、Java 配置、groovy 等配置方式实现 Bean 的创建和注入。</p><p>xml、注解、Java 配置统称为“配置元数据”，”元数据”本身不具备任何可执行能力，只能通过外界代码对其进行<code>解析</code>后进行一些<code>有意义操作</code>。</p><p>Spring 容器解析这些配置元数据，进行 Bean 初始化、配置和管理依赖。</p><p><strong>Spring 容器注解配置</strong><br><strong>声明 Bean 的注解：</strong></p><ul><li><code>@Component</code>:没有明确角色</li><li><code>@Service</code>:在业务逻辑层使用（service 层）</li><li><code>@Repository</code>:在数据访问层使用（dao 层）</li><li><code>@Controller</code>:在展现层使用（MVC -&gt; Spring MVC)</li><li><em>注入 Bean 的注解：</em>*</li><li><code>@Autowired</code>：Spring 提供的注解</li><li><code>@Inject</code>：JSR-330 提供的注解</li><li><code>@Resource</code>：JSR-250 提供的注解</li></ul><p>spring 依赖注入“注解配置”实践代码示例：<br><code>com.wisely.highlight_spring4.ch1.di</code>包下的类即为 Di 示例。<br>该示例中包含 4 个类： 两个功能类、一个配置类、一个启动入口，使用注解配置的方式实现依赖注入。（详细代码看项目代码。）</p><p><strong>Java 配置</strong>通过 <code>@Configuration</code> 和 <code>@Bean</code> 实现，是 spring4.x, SpringBoot推荐的配置方式。（可以完全取代 xml 配置）<br>一般情况下，使用 Java 配置和注解混合配置，各自的使用原则：</p><ol><li>全局配置使用 Java 配置（如数据库相关配置、MVC 相关配置）</li><li>业务 Bean 的配置使用注解配置（<code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>）</li></ol><p>spring 依赖注入“Java配置”实践代码示例：<br><code>com.wisely.highlight_spring4.ch1.javaconfig</code>包下的类即为 javaconfig 示例。<br>该示例中包含 4 个类： 两个功能类、一个配置类、一个启动入口，使用 Java 配置的方式实现依赖注入。（详细代码看项目代码。）<br>特点：在 Java 配置方式中，功能类不用添加注解，两个功能类的依赖注入关系通过 <code>setClassB(ClassB)</code> 声明实现，真正的Bean实例化（new）在配置类<code>JavaConfig.class</code>中通过两个注解实现。(<code>@Configuration</code> 和 <code>@Bean</code>)</p><p>AOP目的是为了<code>解耦合</code>:<strong>AOP可以让一组类’共享’相同的行为</strong>。</p><ul><li>AOP：面向<em>切面</em>编程，能够使一组类共享相同的行为。</li><li>OOP: 面对<em>对象</em>编程，在 OOP 中，只能通过继承类和实现接口，来增强代码的耦合度，且只能为单继承，阻止更多行为添加到一组类上。</li></ul><p>Spring 支持 AspectJ 的注解式切面编程,通过 <code>@EnableAspectJAutoProxy</code> 开启 Spring 中对 AspectJ的代理支持.</p><ol><li>使用 <code>@Aspect</code> 声明是一个切面。</li><li>使用 <code>@After</code>,<code>@Before</code>,<code>@Around</code>定义<code>建言（advice）</code>,可直接将<code>拦截规则（切点 PointCut ）</code>作为参数。</li></ol><p>Spring 支持两种 AOP 模式:</p><ol><li>通过 AspectJ 完成全注解式声明的切面</li><li>通过 <code>@After(adivce)</code> 中的 advice 声明方法规则声明的切面.</li></ol><p>具体实现应用实例看:</p><ol><li> <code>com.wisely.highlight_spring4.ch1.aop</code>包下的类即为 aop 应用示例。</li><li>需要在 pom.xml 中导入 Spring AOP 和 AspectsJ 依赖，提供支持<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- ch1/aop ==  添加 Spring AOP 支持和 AspectsJ 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.24.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjrt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/spring-00-Spring%E6%A6%82%E5%BF%B5/"/>
    <url>/2022/spring-00-Spring%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-梗概"><a href="#Spring-梗概" class="headerlink" title="Spring 梗概"></a>Spring 梗概</h1><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><ul><li>Eclipse 用户下载 STS ，配置maven，然后进行项目启动。</li><li>IDEA 用户直接 New-Project 即可。</li></ul><p>spring 基础配置的 pom.xml 文件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wisely<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>highlight_spring4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>highlight_spring4<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Spring Demo<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.24.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>项目依赖树查看：</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211206144942.png" alt="image-20211206144941431"></p><p>Spring 基础配置原则(Spring 框架设计和实现的四大原则)</p><ol><li>使用 POJO 进行轻量级和最小侵入式开发。</li><li>通过依赖注入和基于接口编程实现松耦合。</li><li>通过 AOP 和默认习惯进行声明式编程。</li><li>通过 AOP 和模板（template)减少模式化代码。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>01-01-工厂模式（静态工厂、工厂方法、抽象工厂）</title>
    <link href="/01-01-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%9D%99%E6%80%81%E5%B7%A5%E5%8E%82%E3%80%81%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E3%80%81%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%EF%BC%89"/>
    <url>/01-01-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%9D%99%E6%80%81%E5%B7%A5%E5%8E%82%E3%80%81%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E3%80%81%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%EF%BC%89</url>
    
    <content type="html"><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p><code>工厂模式主要是为创建对象提供过过渡接口</code>，将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>在《Java与模式》中分为三类</p><ol><li>简单工厂模式（Simple Factory)</li><li>工厂方法模式（Factory Method)</li><li>抽象工厂模式（Abstract Factory)</li></ol><p>这三种模式，从上到下初步抽象，并且更具有一般性。</p><p>GOF在《设计模式》一书中将工厂模式分为两类：工厂方法模式(Factory Method)与抽象工厂模式(Abstract Factory)。其中，将简单工厂模式看作是工厂方法模式的一中特例，二者归为一类。</p><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>简单工厂模式，也称为<code>静态工厂方法模式</code>。从命名上就可以看出这个模式一定很简单。它存<br>在的目的很简单：<code>定义一个用于创建对象的接口</code>。</p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><ol><li><code>工厂类角色</code>（核心）：含有一定的商业逻辑与判断逻辑。是一个具体实现类。</li><li><code>抽象产品角色</code>：具体产品继承的父类或实现的接口。是一个接口或抽象类。</li><li><code>具体产品角色</code>: 工厂类创建的对象就是此具体产品的实例。</li></ol><h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p><strong>应用</strong>： 虚拟构造函数、<code>Virtual Constructor</code>、<code>Factory Method</code></p><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>工厂方法模式</strong>是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h3><p>比如一款物流管理应用，最初版本只有卡车运输，因此大部分业务代码都位于<strong>卡车</strong>类中。</p><p>后期物流管理需要添加海上运输，这就造成了在程序中添加<strong>轮船</strong>类需要修改全部代码。</p><p>而且每次增加一种交通工具，都有可能需要大幅修改代码。根据不同的运输类对象，在应用中进行不同的处理。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用特殊的工厂方法代替对于对象构造函数的直接调用，而不直接通过<code>new 卡车类</code> 来获得卡车对象。<br>如下图，创建卡车类需要通过工厂类<code>Logistics</code>下的 <code>createTransport()</code> 方法创建。</p><p><img src="https://refactoringguru.cn/images/patterns/diagrams/factory-method/solution1.png" alt="子类可以修改工厂方法返回的对象类型"></p><p>现在，我们可以在子类中重写工厂方法，从而改变其创建产品的类型。</p><p>需要注意一点：当且仅当这些产品<strong>具有共同的基类或者接口</strong>时， 子类才能返回不同类型的产品， 同时基类中的工厂方法还应将其返回类型声明为这一共有接口。</p><p><img src="https://refactoringguru.cn/images/patterns/diagrams/factory-method/solution2-zh.png" alt="所有产品都必须使用同一接口。"></p><p>解释：卡车 <code>Truck</code> 和 轮船 <code>Ship</code> 类都必须实现 <code>Transport</code> 运输接口，该接口声明了一个名为 <code>deliver()</code> 交付的方法。每个子类以不同方式去实现该方法：卡车走陆地交付货物，轮船走水路交付货物。</p><p>陆地运输<code>RoadLogistics</code>类中的工厂方法返回卡车对象，而海路运输<code>SeaLogistics</code>类则返回轮船对象。</p>]]></content>
    
    
    
    <tags>
      
      <tag>refactoring</tag>
      
      <tag>知识点</tag>
      
      <tag>创建型模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>00-设计模式目录</title>
    <link href="/00-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9B%AE%E5%BD%95"/>
    <url>/00-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9B%AE%E5%BD%95</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="创建型模式（5）"><a href="#创建型模式（5）" class="headerlink" title="创建型模式（5）"></a>创建型模式（5）</h3><ul><li>工厂方法 </li><li>抽象工厂</li><li>生成器</li><li>原型</li><li>单例</li></ul><a href="#">Post not found: 01-01-工厂方法 工厂方法</a><a href="#">Post not found: 01-02-抽象工厂 抽象工厂</a><a href="#">Post not found: 01-03-生成器 生成器</a><a href="#">Post not found: 01-04-原型 原型</a><a href="#">Post not found: 01-05-单例 单例</a><h3 id="结构型模式（7）"><a href="#结构型模式（7）" class="headerlink" title="结构型模式（7）"></a>结构型模式（7）</h3><ul><li>适配器</li><li>桥接</li><li>组合</li><li>装饰</li><li>外观</li><li>享元</li><li>代理</li></ul><a href="#">Post not found: 02-1-适配器 适配器</a><a href="#">Post not found: 02-2-桥接 桥接</a><a href="#">Post not found: 02-3-组合 组合</a><a href="#">Post not found: 02-4-装饰 装饰</a><a href="#">Post not found: 02-5-外观 外观</a><a href="#">Post not found: 02-6-享元 享元</a><a href="#">Post not found: 02-7-代理 代理</a><h3 id="行为型模式（10）"><a href="#行为型模式（10）" class="headerlink" title="行为型模式（10）"></a>行为型模式（10）</h3><ul><li>责任链</li><li>命令</li><li>迭代器</li><li>中介者</li><li>备忘录</li><li>观察者</li><li>状态</li><li>策略</li><li>模板方法</li><li>访问者</li></ul><a href="#">Post not found: 03-01-责任链 责任链</a><a href="#">Post not found: 03-02-命令 命令</a><a href="#">Post not found: 03-03-迭代器 迭代器</a><a href="#">Post not found: 03-04-中介者 中介者</a><a href="#">Post not found: 03-05-备忘录 备忘录</a><a href="#">Post not found: 03-06-观察者 观察者</a><a href="#">Post not found: 03-07-状态 状态</a><a href="#">Post not found: 03-08-策略 策略</a><a href="#">Post not found: 03-09-模板方法 模板方法</a><a href="#">Post not found: 03-10-访问者 访问者</a>]]></content>
    
    
    
    <tags>
      
      <tag>refactoring</tag>
      
      <tag>知识点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/leetcode-%E9%93%BE%E8%A1%A8%E4%B8%93%E9%A2%98-%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/leetcode-%E9%93%BE%E8%A1%A8%E4%B8%93%E9%A2%98-%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="链表相关概念"><a href="#链表相关概念" class="headerlink" title="链表相关概念"></a>链表相关概念</h2><p>不管是栈、队列、二叉树、图等数据结构，其底层都是通过数组或者链表实现的。</p><h3 id="链表定义"><a href="#链表定义" class="headerlink" title="链表定义"></a>链表定义</h3><p>链表由一个一个结点构成，单链表的定义可以如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ListNode</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    data: T;<br>    next: ListNode&lt;T&gt;;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>data 是数据域，存放数据，next 是一个指向下一个节点的指针。</p><p>链表是一种<strong>物理存储单元</strong>上非连续、非顺序的存储结构。<br><strong>数据元素的逻辑顺序</strong>是通过链表中的指针链接次序实现的。</p><p><strong>链表只有一个后驱节点 next，如果是双向链表还会有一个前驱节点 pre。</strong></p><h3 id="数组VS链表"><a href="#数组VS链表" class="headerlink" title="数组VS链表"></a>数组VS链表</h3><p>数组在物理上是连续的，可以通过索引随机访问。但是长度固定，增删麻烦。 – 访问：O(1), 增删：O(N)<br>链表在物理上是不连续的，由一个一个结点构成，访问需要进行遍历。长度不固定，增删方便。 – 访问：O(N), 增删：O(1)</p><h3 id="链表的基本操作（-熟悉）"><a href="#链表的基本操作（-熟悉）" class="headerlink" title="链表的基本操作（*熟悉）"></a>链表的基本操作（*熟悉）</h3><h4 id="插入-insert-e-add-e-insert-e-index"><a href="#插入-insert-e-add-e-insert-e-index" class="headerlink" title="插入 insert(e)/ add(e) / insert(e, index)"></a>插入 insert(e)/ add(e) / insert(e, index)</h4><p>插入只需要考虑<strong>要插入位置前驱节点和后继节点</strong>（双向链表的情况下需要<strong>更新后继节点</strong>）即可，其他节点不受影响，因此在给定指针的情况下插入的操作时间复杂度为O(1)。这里给定指针中的指针指的是插入位置的前驱节点。</p><p>伪代码：</p><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit">tmp = 待插入位置的前驱结点.<span class="hljs-keyword">next</span><br>待插入位置的前驱结点.<span class="hljs-keyword">next</span> = 待插入结点<br>待插入结点.<span class="hljs-keyword">next</span> = tmp<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211125143945.png" alt="image-20211125143936811"></p><p>如果没有给定指定结点，需要先遍历找到前驱结点，最坏情况下时间复杂度为O(N)。</p><p><strong>注意点</strong></p><ol><li>考虑头尾指针情况。</li><li>画图分析后再写代码。</li></ol><h4 id="删除-delete-e-delete-e-index"><a href="#删除-delete-e-delete-e-index" class="headerlink" title="删除 delete(e) / delete(e , index)"></a>删除 delete(e) / delete(e , index)</h4><p>只需要将需要删除的节点的前驱指针的 next 指针修正为其下下个节点即可，注意<strong>考虑边界条件</strong>。<br>伪代码</p><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit">待删除位置的前驱结点.<span class="hljs-keyword">next</span> = 待删除位置的前驱结点.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211125144639.png" alt="image-20211125144637359"></p><p><strong>注意点</strong></p><ol><li>考虑头尾指针情况。</li><li>画图分析后再写代码。</li></ol><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>迭代遍历伪代码</p><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta">当前指针 = 头节点<br><span class="hljs-keyword">while</span>(当前指针 ！= <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">print</span>(当前结点)<br>    当前指针 = 当前指针.<span class="hljs-keyword">next</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>一个前序遍历的递归的伪代码：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dfs</span><span class="hljs-params">(cur)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> cur == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <br>    &#125;<br>    <span class="hljs-built_in">print</span>(cur.val)<br>    <span class="hljs-keyword">return</span> dfs(cur.next)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="数组和链表使用上的差异比较"><a href="#数组和链表使用上的差异比较" class="headerlink" title="数组和链表使用上的差异比较"></a>数组和链表使用上的差异比较</h3><p><strong>数组和链表同样作为线性的数组结构，二者在很多方便都是相同的，只在细微的操作和使用场景上有差异而已</strong></p><h5 id="数组遍历-vs-链表遍历"><a href="#数组遍历-vs-链表遍历" class="headerlink" title="数组遍历 vs 链表遍历"></a>数组遍历 vs 链表遍历</h5><p>数组遍历</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>    print(arr[i]);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>链表遍历</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (ListNode cur = head; cur != <span class="hljs-keyword">null</span>; cur = cur.next)&#123;<br>    print(cur.val)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>二者逻辑是一致的，只不过细微操作不一样。</p><ol><li>都是顺序遍历</li><li>循环结束的判断不同：数组是 <code>i&lt;arr.length</code>, 链表是 <code>cur != null</code></li><li>递增条件：数组是 <code>i++</code>, 链表是 <code>cur = cur.next</code></li></ol><h5 id="数组后序遍历-vs-链表后序遍历"><a href="#数组后序遍历-vs-链表后序遍历" class="headerlink" title="数组后序遍历 vs 链表后序遍历"></a>数组后序遍历 vs 链表后序遍历</h5><p>数组后序遍历</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr.length-<span class="hljs-number">1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>    print(arr[i]);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>链表后序遍历<br>需要借助双向链表,记录一个前驱结点。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (ListNode cur = tail; cur != <span class="hljs-keyword">null</span>; cur = cur.pre) &#123;<br>    print(cur.val);<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="数组末尾添加元素-vs-链表末尾添加元素"><a href="#数组末尾添加元素-vs-链表末尾添加元素" class="headerlink" title="数组末尾添加元素 vs 链表末尾添加元素"></a>数组末尾添加元素 vs 链表末尾添加元素</h5><p>数组末尾添加元素</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">arr.push(<span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><p>链表末尾添加元素<br>链表的话，很多语言没有内置的数组类型。比如力扣通常使用如下的类来模拟。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span></span>&#123;<br>    <span class="hljs-keyword">int</span> val;<br>    ListNode next;<br>    ListNode()&#123;&#125;<br>    ListNode(<span class="hljs-keyword">int</span> val) &#123;<span class="hljs-keyword">this</span>.val = val;&#125;<br>    ListNode(<span class="hljs-keyword">int</span> val, ListNode next) &#123;<span class="hljs-keyword">this</span>.val = val; <span class="hljs-keyword">this</span>.next = next;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>假设知道链表的尾部节点 tail,实现push的话</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">tail.next = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-string">&#x27;addNode&#x27;</span>);<br>tail = tail.next; <span class="hljs-comment">// 移动尾结点指针</span><br></code></pre></div></td></tr></table></figure><h2 id="题目要点"><a href="#题目要点" class="headerlink" title="题目要点"></a>题目要点</h2><h3 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h3><h4 id="1-穿针引线法（头插法）"><a href="#1-穿针引线法（头插法）" class="headerlink" title="1.穿针引线法（头插法）"></a>1.穿针引线法（头插法）</h4><p>要点：</p><ul><li>prev 为 head 结点，cur 从 head.next 开始</li><li>cur在反转过程中位置已经发生变化了，所以不用移动 <code>cur = cur.next</code></li><li>注意指针赋值顺序，prev不变</li></ul><h4 id="2-递归反转链表"><a href="#2-递归反转链表" class="headerlink" title="2. 递归反转链表"></a>2. 递归反转链表</h4><p>要点：</p><ul><li>prev 初始为 null， cur 从 head 开始</li><li>反转过程，不断变化 prev 和 cur</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-comment"># 反转一个子链表，并返回新的头与尾</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse</span>(<span class="hljs-params">self, head:ListNode, tail:ListNode, terminal: ListNode</span>):</span><br>        cur = head<br>        pre = <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># terminal 是 tail 后面的结点</span><br>        <span class="hljs-keyword">while</span> cur != terminal:<br>            <span class="hljs-comment"># 留下联系方式</span><br>            <span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span><br>            <span class="hljs-comment"># 修改指针</span><br>            cur.<span class="hljs-built_in">next</span> = pre<br>            <span class="hljs-comment"># 继续周</span><br>            pre = cur<br>            cur = <span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> tail,head<br></code></pre></div></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(head,tail,terminal *ListNode)</span> <span class="hljs-params">(*ListNode, *ListNode)</span></span>&#123;<br>    cur := head<br>    <span class="hljs-keyword">var</span> pre *ListNode = <span class="hljs-literal">nil</span><br>    <span class="hljs-keyword">for</span> cur != terminal &#123;<br>        <span class="hljs-comment">// 留下联系方式</span><br>        next := cur.next<br>        <span class="hljs-comment">// 修改指针</span><br>        cur.next = prev<br>        <span class="hljs-comment">// 往下走</span><br>        prev = cur<br>        cur = next<br>    &#125;<br>    <span class="hljs-keyword">return</span> tail,head<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="判断是否有环、环的位置"><a href="#判断是否有环、环的位置" class="headerlink" title="判断是否有环、环的位置"></a>判断是否有环、环的位置</h3><h4 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h4><h4 id="虚拟头节点-–-简化考虑边界情况"><a href="#虚拟头节点-–-简化考虑边界情况" class="headerlink" title="虚拟头节点 – 简化考虑边界情况"></a>虚拟头节点 – 简化考虑边界情况</h4><h4 id="前后序遍历"><a href="#前后序遍历" class="headerlink" title="前后序遍历"></a>前后序遍历</h4><p>链表结构天生具有递归新，使用递归的解法或者递归的思路有助于解题。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">前中后序实际上是指的当前节点相对子节点的处理顺序。如果先处理当前节点再处理子节点，那么就是前序。如果先处理左节点，再处理当前节点，最后处理右节点，就是中序遍历。后序遍历自然是最后处理当前节点了。<br></code></pre></div></td></tr></table></figure><p>绝大多数的题目都是单链表，而单链表只有一个后继指针。因此只有前序和后序，没有中序遍历</p><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><ul><li><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></li><li><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/">82. 删除排序链表中的重复元素 II</a></li><li><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素</a></li><li><a href="https://leetcode-cn.com/problems/partition-list/">86. 分隔链表</a></li><li><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">92. 反转链表 II</a></li><li><a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/">138. 复制带随机指针的链表</a></li><li><a href="https://leetcode-cn.com/problems/linked-list-cycle/">141. 环形链表</a></li><li><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II</a></li><li><a href="https://leetcode-cn.com/problems/reorder-list/">143. 重排链表</a></li><li><a href="https://leetcode-cn.com/problems/sort-list/">148. 排序链表</a></li><li><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a></li><li><a href="">234. 回文链表</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>lc-0234.回文链表</title>
    <link href="/lc-0234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8"/>
    <url>/lc-0234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">head</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">head</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>输出：<span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><h2 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h2><ol><li>快慢指针找到中间结点：<ul><li>特殊情况为两个结点情况：[1,2] – 此时，s == l，</li><li>结点个数 n &gt;= 3 时，s 指向中间结点。（奇数为中间，偶数为 n/2 前一个）</li></ul></li><li>处理好特殊情况（两个结点）后，将 s 后的链表进行翻转。（s不需要参与翻转）</li><li>使用两个指针，分别从 头结点 和 s后的结点 开始遍历，结束条件为 指向s后的结点的指针遍历到nil。</li></ol><p>– 画图分一下情况，比较好理解。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(head *ListNode)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>s,l := head, head<br><span class="hljs-keyword">for</span> l.Next != <span class="hljs-literal">nil</span> &amp;&amp; l.Next.Next != <span class="hljs-literal">nil</span> &#123;<br>s = s.Next<br>l = l.Next.Next<br>&#125;<br><span class="hljs-keyword">if</span> s == l &#123;<br><span class="hljs-keyword">return</span> head.Val == head.Next.Val<br>&#125;<br>prev := s<br>cur := prev.Next<br><span class="hljs-keyword">for</span> cur.Next != <span class="hljs-literal">nil</span> &#123;<br>tmp := cur.Next<br>cur.Next = tmp.Next<br>tmp.Next = prev.Next<br>prev.Next = tmp<br>&#125;<br><br>pA,pB := head, s.Next <br><span class="hljs-keyword">for</span> pB != <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">if</span> pA.Val != pB.Val &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>pA = pA.Next<br>pB = pB.Next <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>解题思路：</p><ol><li>快慢指针找到中间节点 slow：索引位置为 i=(N/2-1)</li><li>使用头插法将 slow 节点之后的链表进行翻转。</li><li>使用双指针的方法比较二者之间的大小。当中间段走到null停止比较。（避免由于中间节点多出而导致多种情况）<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(head *ListNode)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-comment">// 快慢指针找到中间节点</span><br>s,l := head, head<br><span class="hljs-keyword">for</span> l.Next != <span class="hljs-literal">nil</span> &amp;&amp; l.Next.Next != <span class="hljs-literal">nil</span> &#123;<br>s = s.Next<br>l = l.Next.Next<br>&#125;<br>    <span class="hljs-comment">// 特殊案例： 只有两个节点 [1,2] 时</span><br><span class="hljs-comment">// [1,2] head = s = l</span><br><span class="hljs-keyword">if</span> s == l &#123;<br><span class="hljs-keyword">return</span> head.Val == head.Next.Val<br>&#125;<br>    <br><span class="hljs-comment">// 翻转 s 节点后的链表</span><br>prev := s<br>cur := prev.Next<br><span class="hljs-comment">// fmt.Println(head, s, l)</span><br><span class="hljs-keyword">for</span> cur.Next != <span class="hljs-literal">nil</span> &#123;<br>tmp := cur.Next<br>cur.Next = tmp.Next<br>tmp.Next = prev.Next<br>prev.Next = tmp<br>&#125;<br><span class="hljs-comment">// fmt.Println(head, s, l)</span><br><span class="hljs-comment">// [1,2,3] head = 1, s = 2, l = 3</span><br><span class="hljs-comment">// [1,2,3,4] head = 1, s = 2, l = 3</span><br><span class="hljs-comment">// [1,2,3,4,5] head = 1, s = 3, l = 5</span><br>pA,pB := head, s.Next <br><span class="hljs-keyword">for</span> pB != <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">if</span> pA.Val != pB.Val &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-comment">// 记得移动节点</span><br>pA = pA.Next<br>pB = pB.Next <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0148.排序链表</title>
    <link href="/lc-0148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8"/>
    <url>/lc-0148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你链表的头结点 head ，请将其按 升序 排列并返回 排序后的链表 。</p><p>进阶：</p><p>你可以在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序吗？</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">输入：head = [<span class="hljs-number">4,2,1,3</span>]<br>输出：[<span class="hljs-number">1,2,3,4</span>]<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">输入：head = [-<span class="hljs-number">1,5,3,4</span>,<span class="hljs-number">0</span>]<br>输出：[-<span class="hljs-number">1,0,3,4</span>,<span class="hljs-number">5</span>]<br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sortList</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br><br>mid := mid(head)<br>node := mid.Next<br>mid.Next = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> merge(sortList(head),sortList(node))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mid</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br>s,l := head, head.Next.Next<br><span class="hljs-keyword">for</span> l != <span class="hljs-literal">nil</span> &amp;&amp; l.Next != <span class="hljs-literal">nil</span> &#123;<br>s = s.Next<br>l = l.Next.Next<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">merge</span><span class="hljs-params">(l1,l2 *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>sent := &amp;ListNode&#123;Val: <span class="hljs-number">-1</span>&#125;<br>cur := sent<br><span class="hljs-keyword">for</span> l1!= <span class="hljs-literal">nil</span> &amp;&amp; l2 != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> l1.Val &lt; l2.Val &#123;<br>cur.Next = l1<br>l1 = l1.Next<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cur.Next = l2<br>l2 = l2.Next<br>&#125;<br>cur = cur.Next<br>&#125;<br><span class="hljs-keyword">if</span> l1 != <span class="hljs-literal">nil</span> &#123;<br>cur.Next = l1<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cur.Next = l2<br>&#125;<br><span class="hljs-keyword">return</span> sent.Next<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>归并排序算法。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 归并排序链表</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sortList</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br><br>mid := mid(head)<br>node := mid.Next<br>mid.Next = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> merge(sortList(head),sortList(node))<br>&#125;<br><span class="hljs-comment">// 快慢指针查找中间结点</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mid</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br>s,l := head, head.Next.Next<br><span class="hljs-keyword">for</span> l != <span class="hljs-literal">nil</span> &amp;&amp; l.Next != <span class="hljs-literal">nil</span> &#123;<br>s = s.Next<br>l = l.Next.Next<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br><span class="hljs-comment">// 合并有序的链表 l1,l2</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">merge</span><span class="hljs-params">(l1,l2 *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>sent := &amp;ListNode&#123;Val: <span class="hljs-number">-1</span>&#125;<br>cur := sent<br><span class="hljs-keyword">for</span> l1!= <span class="hljs-literal">nil</span> &amp;&amp; l2 != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> l1.Val &lt; l2.Val &#123;<br>cur.Next = l1<br>l1 = l1.Next<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cur.Next = l2<br>l2 = l2.Next<br>&#125;<br>cur = cur.Next<br>&#125;<br><span class="hljs-keyword">if</span> l1 != <span class="hljs-literal">nil</span> &#123;<br>cur.Next = l1<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cur.Next = l2<br>&#125;<br><span class="hljs-keyword">return</span> sent.Next<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0082.删除排序链表中的重复元素ii</title>
    <link href="/lc-0082-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0ii"/>
    <url>/lc-0082-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0ii</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中 没有重复出现 的数字。</p><p>返回同样按升序排列的结果链表。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1,2,3,3,4,4,5]</span><br>输出：<span class="hljs-comment">[1,2,5]</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1,1,1,2,3]</span><br>输出：<span class="hljs-comment">[2,3]</span><br></code></pre></div></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>newHead := &amp;ListNode&#123;Next:head&#125;<br><span class="hljs-keyword">for</span> parent,cur := newHead,newHead.Next; cur != <span class="hljs-literal">nil</span> &amp;&amp; cur.Next != <span class="hljs-literal">nil</span>; &#123;<br><span class="hljs-keyword">if</span> cur.Val == cur.Next.Val &#123;<br>parent.Next = deleteNode(cur)<br>cur = parent.Next<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>parent = cur<br>cur = cur.Next<br>&#125;<br>&#125; <br><span class="hljs-keyword">return</span> newHead.Next<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(cur *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">for</span> cur !=<span class="hljs-literal">nil</span> &amp;&amp; cur.Next !=<span class="hljs-literal">nil</span> &amp;&amp; cur.Val == cur.Next.Val &#123;<br>cur = cur.Next<br>&#125;<br><span class="hljs-keyword">return</span> cur.Next<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p><strong>解题思路</strong></p><ul><li>需要删去重复的元素，头节点也可能被删除，需要设置虚拟头节点。</li><li>如果找到 cur.Val = cur.Next.Val，需要记录头结点parent，然后不断删掉与cur.val相等的结点，所以需要一个方法删除从头部开始的重复结点。</li><li>注意：*<br><code>for循环移动时，考虑普通情况下，哪些指针移动以及如何移动。</code></li></ul><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-comment">// 头节点也可能被删除，设置虚拟头节点</span><br>newHead := &amp;ListNode&#123;Next:head&#125;<br><span class="hljs-keyword">for</span> parent,cur := newHead,newHead.Next; cur != <span class="hljs-literal">nil</span> &amp;&amp; cur.Next != <span class="hljs-literal">nil</span>; &#123;<br><span class="hljs-keyword">if</span> cur.Val == cur.Next.Val &#123;<br><span class="hljs-comment">// 找到 parent。删除 parent.Next 重复的结点，返回</span><br>parent.Next = deleteNode(cur)<br>cur = parent.Next<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 考虑普通情况下，各指针情况如何移动。</span><br>parent = cur<br>cur = cur.Next<br>&#125;<br>&#125; <br><span class="hljs-keyword">return</span> newHead.Next<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(cur *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">for</span> cur !=<span class="hljs-literal">nil</span> &amp;&amp; cur.Next !=<span class="hljs-literal">nil</span> &amp;&amp; cur.Val == cur.Next.Val &#123;<br>cur = cur.Next<br>&#125;<br><span class="hljs-keyword">return</span> cur.Next<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/leetcode-%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%87%8D%E9%9A%BE%E7%82%B9/"/>
    <url>/2022/leetcode-%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%87%8D%E9%9A%BE%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="算法与数据结构重难点"><a href="#算法与数据结构重难点" class="headerlink" title="算法与数据结构重难点"></a>算法与数据结构重难点</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="基础技巧"><a href="#基础技巧" class="headerlink" title="基础技巧"></a>基础技巧</h3><h4 id="1-分治"><a href="#1-分治" class="headerlink" title="1. 分治"></a>1. 分治</h4><h4 id="2-二分"><a href="#2-二分" class="headerlink" title="2. 二分"></a>2. 二分</h4><h4 id="3-贪心"><a href="#3-贪心" class="headerlink" title="3. 贪心"></a>3. 贪心</h4><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><h4 id="1-快排"><a href="#1-快排" class="headerlink" title="1. 快排"></a>1. 快排</h4><h4 id="2-归并"><a href="#2-归并" class="headerlink" title="2. 归并"></a>2. 归并</h4><h4 id="3-计数"><a href="#3-计数" class="headerlink" title="3. 计数"></a>3. 计数</h4><h3 id="搜索算法"><a href="#搜索算法" class="headerlink" title="搜索算法"></a>搜索算法</h3><h4 id="1-回溯"><a href="#1-回溯" class="headerlink" title="1. 回溯"></a>1. 回溯</h4><h4 id="2-递归"><a href="#2-递归" class="headerlink" title="2. 递归"></a>2. 递归</h4><h4 id="3-深度优先（DFS）"><a href="#3-深度优先（DFS）" class="headerlink" title="3. 深度优先（DFS）"></a>3. 深度优先（DFS）</h4><h4 id="4-广度优先（BFS）"><a href="#4-广度优先（BFS）" class="headerlink" title="4. 广度优先（BFS）"></a>4. 广度优先（BFS）</h4><h4 id="5-二叉搜索树"><a href="#5-二叉搜索树" class="headerlink" title="5. 二叉搜索树"></a>5. 二叉搜索树</h4><h4 id="6-…"><a href="#6-…" class="headerlink" title="6. …"></a>6. …</h4><h3 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h3><h4 id="1-最短路径（dijkstra-算法）"><a href="#1-最短路径（dijkstra-算法）" class="headerlink" title="1. 最短路径（dijkstra 算法）"></a>1. 最短路径（dijkstra 算法）</h4><h4 id="2-最小生成树"><a href="#2-最小生成树" class="headerlink" title="2. 最小生成树"></a>2. 最小生成树</h4><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="1-数组和链表：单-双链表"><a href="#1-数组和链表：单-双链表" class="headerlink" title="1. 数组和链表：单/双链表"></a>1. 数组和链表：单/双链表</h3><h3 id="2-栈与队列"><a href="#2-栈与队列" class="headerlink" title="2. 栈与队列"></a>2. 栈与队列</h3><h3 id="3-哈希表"><a href="#3-哈希表" class="headerlink" title="3. 哈希表"></a>3. 哈希表</h3><h3 id="4-堆：最大堆和最小堆"><a href="#4-堆：最大堆和最小堆" class="headerlink" title="4. 堆：最大堆和最小堆"></a>4. 堆：最大堆和最小堆</h3><h3 id="5-树与图：最近公共祖先、并查集"><a href="#5-树与图：最近公共祖先、并查集" class="headerlink" title="5. 树与图：最近公共祖先、并查集"></a>5. 树与图：最近公共祖先、并查集</h3><h3 id="6-字符串：前缀树（字典树）-后缀树"><a href="#6-字符串：前缀树（字典树）-后缀树" class="headerlink" title="6. 字符串：前缀树（字典树）/后缀树"></a>6. 字符串：前缀树（字典树）/后缀树</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>lc-0000.xxxx</title>
    <link href="/lc-0000-xxxx"/>
    <url>/lc-0000-xxxx</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain"><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain"><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain"><br></code></pre></div></td></tr></table></figure><p>eg4:</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain"><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/leetcode-%E5%A0%86%E4%B8%93%E9%A2%98-%E5%A0%86%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/leetcode-%E5%A0%86%E4%B8%93%E9%A2%98-%E5%A0%86%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><h2 id="堆的概念"><a href="#堆的概念" class="headerlink" title="堆的概念"></a>堆的概念</h2><p>可以近似看成是优先队列，但是实现形式是二叉树结构。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p><strong>动态</strong>求极值<br>动态 – 在满足插队情况（找到对应位置并插入元素）时间复杂度为 O(logN) 的条件下，使得求极值（最大or最小值）的时间复杂度为 O(1)。</p><p>因此，选择的数据结构上需要满足：一个有序列表，其插入元素的时间复杂度为 O(logN). – 数组不行（移动数组的情况代价很大），链表可以（有序列表可以通过跳表优化查找时间），二叉树可以。</p><p>引用：</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">上面这个场景单纯使用数组和链表都可以满足需求，但是使用其他数据结构在应对”插队“的情况表现地会更好。<br><br>具体来说：<br><br><span class="hljs-bullet">* </span>如果永远都维护一个有序数组的方式取极值很容易，但是插队麻烦。<br><br><span class="hljs-bullet">* </span>如果永远都维护一个有序链表的方式取极值也容易。 不过要想查找足够快，而不是线性扫描，就需要借助索引，这种实现对应的就是优先级队列的跳表实现。<br><br><span class="hljs-bullet">* </span>如果永远都维护一个树的方式取极值也可以实现，比如根节点就是极值，这样 O(1) 也可以取到极值，但是调整过程需要 $O(logN)$。这种实现对应的就是优先级队列的二叉堆实现。<br><br>简单总结下就是，堆就是动态帮你求极值的。当你需要动态求最大或最小值就就用它。而具体怎么实现，复杂度的分析我们之后讲，现在你只要记住使用场景，堆是如何解决这些问题的以及堆的 api 就够了。<br></code></pre></div></td></tr></table></figure><h2 id="队列-VS-优先队列"><a href="#队列-VS-优先队列" class="headerlink" title="队列 VS 优先队列"></a>队列 VS 优先队列</h2><p>普通的队列也可以看成是一个特殊的优先级队列， 这和网上大多数的说法优先级队列和队列没什么关系有所不同。我认为<strong>队列无非就是以时间这一变量作为优先级的优先队列</strong>，时间越早，优先级越高，优先级越高越先出队。</p><p>大家平时写 BFS 的时候都会用到队列来帮你处理节点的访问顺序。那使用优先队列行不行？当然可以了！</p><p>例题：<br><a href="https://leetcode-cn.com/problems/find-bottom-left-tree-value/solution/">513. 找树左下角的值</a> – <a href="https://www.cnblogs.com/lemon-flm/p/7877898.html">Java队列相关知识</a></p><h2 id="一个中心"><a href="#一个中心" class="headerlink" title="一个中心"></a>一个中心</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><code>动态</code> + <code>求极值</code> –&gt; 维护一个有序列表</p><p>tips: 求一个数组的第 k 小的数</p><p>由于堆只能求极值。比如能求最小值，但不能直接求第 k 小的值。先求最小的值，然后将其出队，重复k次，即得到第k小的数。<br>这个过程中给，数据是动态变化的，对应的是堆的大小在变化。</p><h3 id="堆应用的例题"><a href="#堆应用的例题" class="headerlink" title="堆应用的例题:"></a>堆应用的例题:</h3><ol><li><a href="https://leetcode-cn.com/problems/last-stone-weight/">1046. 最后一块石头的重量</a></li><li><a href="https://leetcode-cn.com/problems/super-ugly-number/">313.超级丑数</a></li></ol><h2 id="堆的两种实现"><a href="#堆的两种实现" class="headerlink" title="堆的两种实现"></a>堆的两种实现</h2><p>堆的两种常见实现方式：</p><ol><li>基于链表的实现 - 跳表</li><li>基于数组的实现 - 二叉堆</li></ol><blockquote><p>使用跳表实现，如果算法没有进行优化，性能不稳定，数据量大的情况下内存占用会明显增加。 – 下面只是阐述了跳表的基本原理(实现待定)</p></blockquote><h3 id="跳表实现堆"><a href="#跳表实现堆" class="headerlink" title="跳表实现堆"></a>跳表实现堆</h3><p>跳表也是一种数据结构，因此 ta 其实也是服务于某种算法的，主要应用于：空间换时间的思想，效率的取舍问题等。</p><p>上面提到了<code>应付插队问题</code>是设计堆应该考虑的首要问题。堆的跳表实现是如何解决这个问题的呢？</p><p>选择链表相关结构实现堆：</p><ol><li>普通的单链表结构 的查找需要从头结点开始，时间复杂度 O(N), 空间复杂度 O(N)</li><li>哈希表+单链表结构 的查找， 时间复杂度 O(1), 空间复杂度 O(2N). – 不够通用，不是和有重复结点的情况（否则需要排序），只适合用 key 相关结点的获取</li><li>固定为抽出索引（跳表）结构 的查找， 时间复杂度 O(logN), 空间复杂度 O(3/2N) – 需要构建链表时候，维护链表有序。才可以实现基于二分查找的性能。</li></ol><p>理解了上面的内容，<strong>使用跳表实现堆</strong>就不难了。</p><ul><li>入堆操作，只需要根据索引插到链表中，并更新索引（可选）。</li><li>出堆操作，只需要删除头部（或者尾部），并更新索引（可选）。<br>大家如果想检测自己的实现是否有问题，可以去力扣的<a href="https://leetcode-cn.com/problems/design-skiplist/">1206. 设计跳表</a> 检测。</li></ul><h3 id="基于数组实现二叉堆-–-完全二叉树"><a href="#基于数组实现二叉堆-–-完全二叉树" class="headerlink" title="基于数组实现二叉堆 – 完全二叉树"></a>基于数组实现二叉堆 – 完全二叉树</h3><p>二叉堆的实现，我们仅讲解<strong>最核心的两个操作： heappop（出堆） 和 heappush（入堆）。</strong>对于其他操作不再讲解，不过我相信你会了这两个核心操作，其他的应该不是难事。</p><p>实现之后的使用效果大概是这样的：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">h = min_heap()<br>h.build_heap([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><br>h.heappush(<span class="hljs-number">1</span>)<br>h.heappop() <span class="hljs-comment"># 1</span><br>h.heappop() <span class="hljs-comment"># 2</span><br>h.heappush(<span class="hljs-number">1</span>)<br>h.heappop() <span class="hljs-comment"># 1</span><br>h.heappop() <span class="hljs-comment"># 3</span><br></code></pre></div></td></tr></table></figure><h4 id="出-入堆操作思路"><a href="#出-入堆操作思路" class="headerlink" title="出/入堆操作思路"></a>出/入堆操作思路</h4><ol><li>出堆：根节点要出堆，最大的尾结点放到根节点位置，然后不断下沉。</li><li>入堆：在尾巴结点添加新元素，然后将新元素不断上浮（只需要和其父节点比较即可）。</li></ol><p>核心伪代码（上浮和下沉）：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// x 是要上浮的元素索引，从根的底部开始上浮</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> voide <span class="hljs-title">shift_up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">1</span> &amp;&amp; h[x] &gt; h[x/<span class="hljs-number">2</span>]) &#123;<br>        <span class="hljs-comment">// swap 交换数组两个位置的值</span><br>        swap(h[x], h[x/<span class="hljs-number">2</span>]);<br>        x /= <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// x 是要下沉的元素索引，从树的顶部开始下沉</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shift_down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>( x * <span class="hljs-number">2</span> &lt;= n) &#123;<br>        <span class="hljs-comment">// minChild 获取更小的直接点的索引并且返回</span><br>        mc = minChild(x);<br>        <span class="hljs-keyword">if</span> (h[mc] &lt;= h[x]) <span class="hljs-keyword">break</span>;<br>        swap(h[x], h[mc]);<br>        x = mc;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="java代码实现“使用完全二叉树构建堆”"><a href="#java代码实现“使用完全二叉树构建堆”" class="headerlink" title="java代码实现“使用完全二叉树构建堆”"></a>java代码实现“使用完全二叉树构建堆”</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用完全二叉树来构建 堆</span><br><span class="hljs-comment"> * 前置条件 起点为 1</span><br><span class="hljs-comment"> * 那么 子节点为  i &lt;&lt;1 和 i&lt;&lt;1 + 1</span><br><span class="hljs-comment"> * 核心方法为</span><br><span class="hljs-comment"> * shiftdown 交换下沉</span><br><span class="hljs-comment"> * shiftup 交换上浮</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * build 构建堆</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Heap</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> queue[];<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Heap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapactity)</span> <span class="hljs-keyword">throws</span> IllegalAccessException </span>&#123;<br>        <span class="hljs-keyword">if</span> (initialCapactity &lt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalAccessException();<br>        &#125;<br>        <span class="hljs-keyword">this</span>.queue = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[initialCapactity];<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Heap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        size = arr.length;<br>        queue = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> val : arr) &#123;<br>            queue[i++] = val;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shiftDown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp = queue[i];<br><br>        <span class="hljs-keyword">while</span> ((i&lt;&lt;<span class="hljs-number">1</span>) &lt;= size)&#123;<br>            <span class="hljs-comment">// 找两个子树中小的那个</span><br>            <span class="hljs-keyword">int</span> child = i &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// 左孩子</span><br>            <span class="hljs-keyword">if</span> (child != size &amp;&amp; queue[child + <span class="hljs-number">1</span>] &lt; queue[child]) &#123;<br>                child++;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (temp &gt; queue[child])&#123;<br>                queue[i] = queue[child];<br>                i = child;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        queue[i] = temp;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shiftUp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp = queue[i];<br>        <span class="hljs-keyword">while</span> ((i&gt;&gt;<span class="hljs-number">1</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp &lt; queue[i&gt;&gt;<span class="hljs-number">1</span>]) &#123;<br>                queue[i] = queue[i&gt;&gt;<span class="hljs-number">1</span>];<br>                i &gt;&gt;= <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        queue[i] = temp;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> queue[<span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res = queue[<span class="hljs-number">1</span>];<br>        queue[<span class="hljs-number">1</span>] = queue[size--];<br>        shiftDown(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (size == queue.length - <span class="hljs-number">1</span>) &#123;<br>            queue = Arrays.copyOf(queue, size&lt;&lt;<span class="hljs-number">1</span>+<span class="hljs-number">1</span>);<br>        &#125;<br>        queue[++size] = val;<br>        shiftUp(size);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildHeap</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = size&gt;&gt;<span class="hljs-number">1</span>; i&gt;<span class="hljs-number">0</span>; i--)&#123;<br>            shiftDown(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>&#125;;<br>        Heap heap = <span class="hljs-keyword">new</span> Heap(arr);<br>        heap.buildHeap();<br>        System.out.println(heap.peek());<br>        heap.push(<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">while</span> (heap.size &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">int</span> num = heap.pop();<br>            System.out.printf(num + <span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="堆的使用技巧"><a href="#堆的使用技巧" class="headerlink" title="堆的使用技巧"></a>堆的使用技巧</h2><h3 id="技巧一：固定堆"><a href="#技巧一：固定堆" class="headerlink" title="技巧一：固定堆"></a>技巧一：固定堆</h3><p>固定堆的大小 k 不变，代码上可通过每 pop 出去一个就 push 进来一个来实现。而由于初始堆可能是 0，我们刚开始需要一个一个 push 进堆以达到堆的大小为 k，因此严格来说应该是<code>维持堆的大小不大于 k</code>。<br>要点：固定一个大小为 k 的大顶堆可以快速求第 k 小的数，反之固定一个大小为 k 的小顶堆可以快速求第 k 大的数。</p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><a href="https://leetcode-cn.com/problems/find-median-from-data-stream/">295. 数据流的中位数</a><br><a href="https://leetcode-cn.com/problems/minimum-cost-to-hire-k-workers/">857. 雇佣 K 名工人的最低成本</a></p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p><a href="https://leetcode-cn.com/problems/find-kth-largest-xor-coordinate-value/">5663. 找出第 K 大的异或坐标值</a></p><h3 id="技巧二：多路归并"><a href="#技巧二：多路归并" class="headerlink" title="技巧二：多路归并"></a>技巧二：多路归并</h3><ul><li>多路体现在：有多条候选路线。代码上，我们可使用多指针来表示。</li><li>归并体现在：结果可能是多个候选路线中最长的或者最短，也可能是第 k 个 等。因此我们需要对多条路线的结果进行比较，并根据题目描述舍弃或者选取某一个或多个路线。</li></ul><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><p><a href="https://leetcode-cn.com/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows/">1439. 有序矩阵中的第 k 个最小数组和</a><br><a href="https://leetcode-cn.com/problems/find-k-th-smallest-pair-distance/">719. 找出第 k 小的距离对</a>  – 使用小顶堆实现有问题，存在一条案例过不去。只能用二分查找实现。但是二分查找的没看懂 — <strong>待理解。</strong><br><a href="https://leetcode-cn.com/problems/smallest-range-covering-elements-from-k-lists/">632.最小区间</a><br><a href="https://leetcode-cn.com/problems/minimize-deviation-in-array/description/">1675. 数组的最小偏移量</a></p><h3 id="技巧三-事后小诸葛"><a href="#技巧三-事后小诸葛" class="headerlink" title="技巧三 - 事后小诸葛"></a>技巧三 - 事后小诸葛</h3><p>这个技巧指的是：当从左到右遍历的时候，我们是不知道右边是什么的，需要等到你到了右边之后才知道。</p><p>想要知道右边是什么有两种方式：<br>第一种是遍历两次，第一次遍历将数记录下来，第二次遍历的时候，使用上次遍历记录的数据。<br>第二种是使用一次遍历，边遍历边存储，当遍历到指定元素后，往前回溯。具体来说就是将从左往右的数据全部收集起来，等到需要用的时候，在其中挑一个使用。</p><h4 id="例题：-1"><a href="#例题：-1" class="headerlink" title="例题："></a>例题：</h4><p><a href="https://leetcode-cn.com/problems/minimum-number-of-refueling-stops/">871. 最低加油次数</a><br><a href="">1488. 避免洪水泛滥</a><br><a href="">1642. 可以到达的最远建筑</a></p><h2 id="堆的四种应用"><a href="#堆的四种应用" class="headerlink" title="堆的四种应用"></a>堆的四种应用</h2><h3 id="1-topK"><a href="#1-topK" class="headerlink" title="1. topK"></a>1. topK</h3><div class="hljs code-wrapper"><pre><code>题目要求包含“动态求极值”使用固定堆（最大值or最小值）eg: 求第k个最小数。方法一：创建最小堆，将所有数入堆，然后出堆 k 次，即求得第k个最小数。方法二：创建固定大小为k的最大堆，将数字依次入堆。当最大堆的大小到达k之后的数字再入堆时，只需要和堆顶数字比较，如果大于堆顶数字可以直接跳过，小于堆顶数字则需要将堆顶出堆，将该数字入堆，调整堆的结构。</code></pre></div><p>相关题目：<br><a href="https://leetcode-cn.com/problems/smallest-k-lcci/">面试题 17.14. 最小 K 个数</a><br><a href="https://leetcode-cn.com/problems/top-k-frequent-elements/">347. 前 K 个高频元素</a><br><a href="https://leetcode-cn.com/problems/k-closest-points-to-origin/">973. 最接近原点的 K 个点</a></p><h3 id="2-最短带权路径"><a href="#2-最短带权路径" class="headerlink" title="2. 最短带权路径"></a>2. 最短带权路径</h3><p>带权图的最短路径问题，如果用队列做 BFS 那就需要优先队列才可以，因为路径之间是有权重的差异的。</p><p>使用<strong>优先队列的 BFS</strong> 实现典型的就是<strong>dijkstra 算法</strong>。</p><h4 id="Dijkstra-算法"><a href="#Dijkstra-算法" class="headerlink" title="Dijkstra 算法"></a>Dijkstra 算法</h4><p>主要是解决：图中任意两点的最短路径。<br>基本思想是“贪心”：每次都遍历所有邻居，并从中找到距离最小的，本质上是一种<strong>广度优先遍历</strong>。<br>实现方式：借助‘堆’的数据结构，使得可以再 <code>logN</code> 的时间内找到 cost 最小的点，其中 N 为堆的大小。</p><p>代码模板：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dijkstra</span>(<span class="hljs-params">graph, start, end</span>):</span><br>    heap = [(<span class="hljs-number">0</span>, start)]<br>    visited = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">while</span> heap:<br>        (cost, u) = heapq.heappop(heap)<br>        <span class="hljs-keyword">if</span> u <span class="hljs-keyword">in</span> visited:<br>            <span class="hljs-keyword">continue</span><br>        visited.add(u)<br>        <span class="hljs-keyword">if</span> u == end:<br>            <span class="hljs-keyword">return</span> cost<br>        <span class="hljs-keyword">for</span> v, c <span class="hljs-keyword">in</span> graph[u]:<br>            <span class="hljs-keyword">if</span> v <span class="hljs-keyword">in</span> visited:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-built_in">next</span> = cost + c<br>            heapq.heappush(heap, (<span class="hljs-built_in">next</span>, v))<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>上述模板应用：<a href="https://leetcode-cn.com/problems/network-delay-time/">743. 网络延迟时间</a><br>类似题目 <a href="https://leetcode-cn.com/problems/cheapest-flights-within-k-stops/">787. K 站中转内最便宜的航班</a></p><h3 id="3-因子分解"><a href="#3-因子分解" class="headerlink" title="3. 因子分解"></a>3. 因子分解</h3><h3 id="4-堆排序"><a href="#4-堆排序" class="headerlink" title="4. 堆排序"></a>4. 堆排序</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>lc-1675.数组的最小偏移量</title>
    <link href="/lc-1675-%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E5%81%8F%E7%A7%BB%E9%87%8F"/>
    <url>/lc-1675-%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E5%81%8F%E7%A7%BB%E9%87%8F</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个由 n 个正整数组成的数组 nums 。</p><p>你可以对数组的任意元素执行任意次数的两类操作：</p><p>如果元素是 偶数 ，除以 2<br>例如，如果数组是 [1,2,3,4] ，那么你可以对最后一个元素执行此操作，使其变成 [1,2,3,2]<br>如果元素是 奇数 ，乘上 2<br>例如，如果数组是 [1,2,3,4] ，那么你可以对第一个元素执行此操作，使其变成 [2,2,3,4]<br>数组的 偏移量 是数组中任意两个元素之间的 最大差值 。</p><p>返回数组在执行某些操作之后可以拥有的 最小偏移量 。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">1,2,3,4</span>]<br>输出：<span class="hljs-number">1</span><br>解释：你可以将数组转换为 [<span class="hljs-number">1,2,3,2</span>]，然后转换成 [<span class="hljs-number">2,2,3,2</span>]，偏移量是 <span class="hljs-number">3</span> - <span class="hljs-number">2</span> = <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog">输入：nums = <span class="hljs-string">[4,1,5,20,3]</span><br>输出：<span class="hljs-number">3</span><br>解释：两次操作后，你可以将数组转换为 <span class="hljs-string">[4,2,5,5,3]</span>，偏移量是 <span class="hljs-number">5</span> - <span class="hljs-number">2</span> = <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight fix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs fix"><span class="hljs-attr">输入：nums </span>=<span class="hljs-string"> [2,10,8]</span><br><span class="hljs-string">输出：3</span><br></code></pre></div></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>题目说可对数组中每一项都执行任意次操作，但其实操作是有限的。</p><ul><li>我们只能对奇数进行一次 2 倍操作，因为 2 倍之后其就变成了偶数了。</li><li>我们可以对偶数进行若干次除 2 操作，直到等于一个奇数，不难看出这也是一个有限次的操作。</li></ul><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211201152319.png" alt="image-20211201152311015"></p><p>由上图可知，可以将每个数按照其本身是奇数or偶数进行扩展，将这个包含k个元素一维数组扩展成一个包含k个一维数组的二维数组。各个数组的长度不确定，然后类似例题（632.最小区间）的求解方式求题目要求的最小差值。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-comment"># 扩展成二维数组，再取k个一维数组的最小区间</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">minimumDeviation</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        martrix = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums))]<br>        <span class="hljs-keyword">for</span> i,num <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            <span class="hljs-keyword">if</span> num &amp; <span class="hljs-number">1</span> == <span class="hljs-number">1</span> :<br>                <span class="hljs-comment"># 本身是奇数</span><br>                martrix[i] += [num,num*<span class="hljs-number">2</span>]<br>            <span class="hljs-keyword">else</span> :<br>                <span class="hljs-comment"># 如果是偶数，需要不断除2知道为奇数</span><br>                temp =[]<br>                <span class="hljs-keyword">while</span> num <span class="hljs-keyword">and</span> num &amp; <span class="hljs-number">1</span> == <span class="hljs-number">0</span>:<br>                    temp += [num]<br>                    num //= <span class="hljs-number">2</span><br>                temp += [num]<br>                martrix[i] += temp[::-<span class="hljs-number">1</span>]<br>        a,b = self.smallestRange(martrix)<br>        <span class="hljs-keyword">return</span> b-a<br>    <br>    <span class="hljs-comment"># 取 k 个一维数组的最小区间</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">smallestRange</span>(<span class="hljs-params">self, martrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:</span><br>        l, r = -<span class="hljs-number">10</span>**<span class="hljs-number">9</span>,<span class="hljs-number">10</span>**<span class="hljs-number">9</span><br>        h = [(row[<span class="hljs-number">0</span>],i,<span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> i, row <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(martrix)]<br>        <span class="hljs-comment"># 维护小顶堆</span><br>        heapq.heapify(h)<br>        <span class="hljs-comment"># 维护最大值</span><br>        max_v = <span class="hljs-built_in">max</span>(row[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> martrix)<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            min_v, row, col = heapq.heappop(h)<br>            <span class="hljs-keyword">if</span> max_v - min_v &lt; r-l:<br>                l,r = min_v, max_v<br>            <span class="hljs-keyword">if</span> col == <span class="hljs-built_in">len</span>(martrix[row])-<span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> [l,r]<br>            <span class="hljs-comment"># 更新指针</span><br>            heapq.heappush(h, (martrix[row][col+<span class="hljs-number">1</span>], row, col+<span class="hljs-number">1</span>))<br>            max_v = <span class="hljs-built_in">max</span>(max_v, martrix[row][col+<span class="hljs-number">1</span>])<br>        <br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-1642.可以到达的最远建筑</title>
    <link href="/lc-1642-%E5%8F%AF%E4%BB%A5%E5%88%B0%E8%BE%BE%E7%9A%84%E6%9C%80%E8%BF%9C%E5%BB%BA%E7%AD%91"/>
    <url>/lc-1642-%E5%8F%AF%E4%BB%A5%E5%88%B0%E8%BE%BE%E7%9A%84%E6%9C%80%E8%BF%9C%E5%BB%BA%E7%AD%91</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个整数数组 heights ，表示建筑物的高度。另有一些砖块 bricks 和梯子 ladders 。</p><p>你从建筑物 0 开始旅程，不断向后面的建筑物移动，期间可能会用到砖块或梯子。</p><p>当从建筑物 i 移动到建筑物 i+1（下标 从 0 开始 ）时：</p><p>如果当前建筑物的高度 大于或等于 下一建筑物的高度，则不需要梯子或砖块<br>如果当前建筑的高度 小于 下一个建筑的高度，您可以使用 一架梯子 或 (h[i+1] - h[i]) 个砖块<br>如果以最佳方式使用给定的梯子和砖块，返回你可以到达的最远建筑物的下标（下标 从 0 开始 ）。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">输入：heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1<br>输出：4<br>解释：从建筑物<span class="hljs-number"> 0 </span>出发，你可以按此方案完成旅程：<br>- 不使用砖块或梯子到达建筑物<span class="hljs-number"> 1 </span>，因为<span class="hljs-number"> 4 </span>&gt;= 2<br>- 使用<span class="hljs-number"> 5 </span>个砖块到达建筑物<span class="hljs-number"> 2 </span>。你必须使用砖块或梯子，因为<span class="hljs-number"> 2 </span>&lt; 7<br>- 不使用砖块或梯子到达建筑物<span class="hljs-number"> 3 </span>，因为<span class="hljs-number"> 7 </span>&gt;= 6<br>- 使用唯一的梯子到达建筑物<span class="hljs-number"> 4 </span>。你必须使用砖块或梯子，因为<span class="hljs-number"> 6 </span>&lt; 9<br>无法越过建筑物<span class="hljs-number"> 4 </span>，因为没有更多砖块或梯子。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">heights</span> = [<span class="hljs-number">4</span>,<span class="hljs-number">12</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">18</span>,<span class="hljs-number">20</span>,<span class="hljs-number">3</span>,<span class="hljs-number">19</span>], <span class="hljs-attr">bricks</span> = <span class="hljs-number">10</span>, <span class="hljs-attr">ladders</span> = <span class="hljs-number">2</span><br>输出：<span class="hljs-number">7</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">heights</span> = [<span class="hljs-number">14</span>,<span class="hljs-number">3</span>,<span class="hljs-number">19</span>,<span class="hljs-number">3</span>], <span class="hljs-attr">bricks</span> = <span class="hljs-number">17</span>, <span class="hljs-attr">ladders</span> = <span class="hljs-number">0</span><br>输出：<span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">furthestBuilding</span>(<span class="hljs-params">self, heights: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], bricks: <span class="hljs-built_in">int</span>, ladders: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-comment"># 梯子：无限长，可以跨过任意的高度，但是使用一次就不能用了。</span><br>        <span class="hljs-comment"># 板砖：数量有限，也只能用一次。</span><br>        <span class="hljs-comment"># 先使用板砖，并且每次都把需要用到“道具的高度差存储起来”</span><br>        <span class="hljs-comment"># 如果板砖不够，但是有梯子，那么直接用梯子</span><br>        h = []<br>        <span class="hljs-comment"># i 从 1 开始递增到 heights 建筑最后</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(heights)):<br>            diff = heights[i] - heights[i-<span class="hljs-number">1</span>]<br>            <span class="hljs-comment"># 如果“高度差”小于0，不需要梯子，直接走</span><br>            <span class="hljs-keyword">if</span> diff &lt;= <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># 如果板砖不够，且有梯子。</span><br>            <span class="hljs-built_in">print</span>(bricks &lt; diff <span class="hljs-keyword">and</span> ladders &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">if</span> bricks &lt; diff <span class="hljs-keyword">and</span> ladders &gt; <span class="hljs-number">0</span>:<br>                <span class="hljs-comment"># 将遍历到当前位置时，“最大的高度差”用梯子走。</span><br>                ladders -= <span class="hljs-number">1</span><br>                <span class="hljs-comment"># 如果到后一步的“最大高度差”是前面用板砖走的，那么需要将板砖退回，否则接着往后走。</span><br>                <span class="hljs-keyword">if</span> h <span class="hljs-keyword">and</span> -h[<span class="hljs-number">0</span>] &gt; diff:<br>                    <span class="hljs-comment"># 兑换成板砖</span><br>                    bricks -= heapq.heappop(h)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># 先使用板砖</span><br>            bricks -= diff<br>            <span class="hljs-comment"># 如果板砖不够了，说明已经到达最远。</span><br>            <span class="hljs-keyword">if</span> bricks &lt; <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> i - <span class="hljs-number">1</span><br>            heapq.heappush(h, -diff)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(heights) - <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>堆</tag>
      
      <tag>动态求极值</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-1488.避免洪水泛滥</title>
    <link href="/lc-1488-%E9%81%BF%E5%85%8D%E6%B4%AA%E6%B0%B4%E6%B3%9B%E6%BB%A5"/>
    <url>/lc-1488-%E9%81%BF%E5%85%8D%E6%B4%AA%E6%B0%B4%E6%B3%9B%E6%BB%A5</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>你的国家有无数个湖泊，所有湖泊一开始都是空的。当第 n 个湖泊下雨的时候，如果第 n 个湖泊是空的，那么它就会装满水，否则这个湖泊会发生洪水。你的目标是避免任意一个湖泊发生洪水。</p><p>给你一个整数数组 rains ，其中：</p><p>rains[i] &gt; 0 表示第 i 天时，第 rains[i] 个湖泊会下雨。<br>rains[i] == 0 表示第 i 天没有湖泊会下雨，你可以选择 一个 湖泊并 抽干 这个湖泊的水。<br>请返回一个数组 ans ，满足：</p><p>ans.length == rains.length<br>如果 rains[i] &gt; 0 ，那么ans[i] == -1 。<br>如果 rains[i] == 0 ，ans[i] 是你第 i 天选择抽干的湖泊。<br>如果有多种可行解，请返回它们中的 任意一个 。如果没办法阻止洪水，请返回一个 空的数组 。</p><p>请注意，如果你选择抽干一个装满水的湖泊，它会变成一个空的湖泊。但如果你选择抽干一个空的湖泊，那么将无事发生（详情请看示例 4）。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：rains = <span class="hljs-comment">[1,2,3,4]</span><br>输出：<span class="hljs-comment">[-1,-1,-1,-1]</span><br>解释：第一天后，装满水的湖泊包括 <span class="hljs-comment">[1]</span><br>第二天后，装满水的湖泊包括 <span class="hljs-comment">[1,2]</span><br>第三天后，装满水的湖泊包括 <span class="hljs-comment">[1,2,3]</span><br>第四天后，装满水的湖泊包括 <span class="hljs-comment">[1,2,3,4]</span><br>没有哪一天你可以抽干任何湖泊的水，也没有湖泊会发生洪水。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：rains = <span class="hljs-comment">[1,2,0,0,2,1]</span><br>输出：<span class="hljs-comment">[-1,-1,2,1,-1,-1]</span><br>解释：第一天后，装满水的湖泊包括 <span class="hljs-comment">[1]</span><br>第二天后，装满水的湖泊包括 <span class="hljs-comment">[1,2]</span><br>第三天后，我们抽干湖泊 2 。所以剩下装满水的湖泊包括 <span class="hljs-comment">[1]</span><br>第四天后，我们抽干湖泊 1 。所以暂时没有装满水的湖泊了。<br>第五天后，装满水的湖泊包括 <span class="hljs-comment">[2]</span>。<br>第六天后，装满水的湖泊包括 <span class="hljs-comment">[1,2]</span>。<br>可以看出，这个方案下不会有洪水发生。同时， <span class="hljs-comment">[-1,-1,1,2,-1,-1]</span> 也是另一个可行的没有洪水的方案。<br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：rains = <span class="hljs-comment">[1,2,0,1,2]</span><br>输出：<span class="hljs-comment">[]</span><br>解释：第二天后，装满水的湖泊包括 <span class="hljs-comment">[1,2]</span>。我们可以在第三天抽干一个湖泊的水。<br>但第三天后，湖泊 1 和 2 都会再次下雨，所以不管我们第三天抽干哪个湖泊的水，另一个湖泊都会发生洪水。<br></code></pre></div></td></tr></table></figure><p>eg4:</p><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">输入：rains = [69,0,0,0,69]<br>输出：[<span class="hljs-string">-1</span>,69,1,1,<span class="hljs-string">-1</span>]<br>解释：任何形如 [<span class="hljs-string">-1</span>,69,x,y,<span class="hljs-string">-1</span>], [<span class="hljs-string">-1</span>,x,69,y,<span class="hljs-string">-1</span>] 或者 [<span class="hljs-string">-1</span>,x,y,69,<span class="hljs-string">-1</span>] 都是可行的解，其中 1 &lt;= x,y &lt;= 10^9<br></code></pre></div></td></tr></table></figure><p>eg5:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：rains = <span class="hljs-comment">[10,20,20]</span><br>输出：<span class="hljs-comment">[]</span><br>解释：由于湖泊 20 会连续下 2 天的雨，所以没有没有办法阻止洪水。<br></code></pre></div></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>判断当天下雨是否会会洪水泛滥，需要具备两个条件：1. 之前的某一天A该湖泊下过雨，2. 第A天到当前天之中没有晴天可以抽干该湖泊。</p><p>此题“事后诸葛亮”体现在我们是等到洪水泛滥了才去想应该在之前的某天采取什么手段。这道题没有使用到堆，当题目需要从后往前遍历的时候，同时需要动态取最大最小值， 这个时候就应该考虑使用堆了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="python-实现"><a href="#python-实现" class="headerlink" title="python 实现"></a>python 实现</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">avoidFlood</span>(<span class="hljs-params">self, rains: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:</span><br>        ans = [<span class="hljs-number">1</span>]*<span class="hljs-built_in">len</span>(rains)<br>        lakes = &#123;&#125;<br>        sunny = []<br>        <span class="hljs-keyword">for</span> i,rain <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(rains):<br>            <span class="hljs-keyword">if</span> rain &gt; <span class="hljs-number">0</span>:<br>                ans[i] = -<span class="hljs-number">1</span><br>                <span class="hljs-comment"># if lakes[rain - 1] == 1: # 该湖泊在这天之前已经下过雨了，但是不能确定是在sunny记录的那天之前下雨的。</span><br>                <span class="hljs-keyword">if</span> rain - <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> lakes:<br>                    j = bisect.bisect_left(sunny, lakes[rain - <span class="hljs-number">1</span>]) <span class="hljs-comment"># 在 sunny 中找一个日期大于 lakes[rain-1] 的项，并将其移除 sunny 数组。</span><br>                    <span class="hljs-keyword">if</span> j == <span class="hljs-built_in">len</span>(sunny):<br>                        <span class="hljs-keyword">return</span> []<br>                    ans[sunny.pop(j)] = rain<br>                lakes[rain - <span class="hljs-number">1</span>] = i<br>            <span class="hljs-keyword">else</span>:<br>                sunny.append(i)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>堆</tag>
      
      <tag>事后诸葛亮</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-1439.有序矩阵中的第 k 个最小数组和</title>
    <link href="/lc-1439-%E6%9C%89%E5%BA%8F%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E7%AC%AC%20k%20%E4%B8%AA%E6%9C%80%E5%B0%8F%E6%95%B0%E7%BB%84%E5%92%8C"/>
    <url>/lc-1439-%E6%9C%89%E5%BA%8F%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E7%AC%AC%20k%20%E4%B8%AA%E6%9C%80%E5%B0%8F%E6%95%B0%E7%BB%84%E5%92%8C</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个 m * n 的矩阵 mat，以及一个整数 k ，矩阵中的每一行都以非递减的顺序排列。</p><p>你可以从每一行中选出 1 个元素形成一个数组。返回所有可能数组中的第 k 个 最小 数组和。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：mat = <span class="hljs-comment">[<span class="hljs-comment">[1,3,11]</span>,<span class="hljs-comment">[2,4,6]</span>]</span>, k = 5<br>输出：7<br>解释：从每一行中选出一个元素，前 k 个和最小的数组分别是：<br><span class="hljs-comment">[1,2]</span>, <span class="hljs-comment">[1,4]</span>, <span class="hljs-comment">[3,2]</span>, <span class="hljs-comment">[3,4]</span>, <span class="hljs-comment">[1,6]</span>。其中第 5 个的和是 7 。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">输入：mat = <span class="hljs-string">[[1,3,11],[2,4,6]]</span>, k = <span class="hljs-number">9</span><br>输出：<span class="hljs-number">17</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：mat = <span class="hljs-comment">[<span class="hljs-comment">[1,10,10]</span>,<span class="hljs-comment">[1,4,5]</span>,<span class="hljs-comment">[2,3,6]</span>]</span>, k = 7<br>输出：9<br>解释：从每一行中选出一个元素，前 k 个和最小的数组分别是：<br><span class="hljs-comment">[1,1,2]</span>, <span class="hljs-comment">[1,1,3]</span>, <span class="hljs-comment">[1,4,2]</span>, <span class="hljs-comment">[1,4,3]</span>, <span class="hljs-comment">[1,1,6]</span>, <span class="hljs-comment">[1,5,2]</span>, <span class="hljs-comment">[1,5,3]</span>。其中第 7 个的和是 9 。 <br></code></pre></div></td></tr></table></figure><p>eg4:</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">输入：mat = <span class="hljs-string">[[1,1,10],[2,2,9]]</span>, k = <span class="hljs-number">7</span><br>输出：<span class="hljs-number">12</span><br></code></pre></div></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>使用最小堆。最小堆的排序使用 sum 作为排序条件。</li><li>最小堆的每个结点需要记录两个值：sum， 以及组成sum的指针序列。 – python 可以用与元组来做，go 可以用多个结构体来组合。</li><li>取第k个最小，由于矩阵是有序的，首个入堆即为最小，但不是第k个。因此需要入栈&gt;k次，出栈k次。即为所得。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">kthSmallest</span><span class="hljs-params">(mat [][]<span class="hljs-keyword">int</span>, k <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>m,n := <span class="hljs-built_in">len</span>(mat),<span class="hljs-built_in">len</span>(mat[<span class="hljs-number">0</span>])<br>h := &amp;SPS&#123;&#125;<br>heap.Init(h)<br><br><span class="hljs-comment">// 初始化</span><br>curSum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i&lt;m; i++ &#123;<br>curSum += mat[i][<span class="hljs-number">0</span>]<br>&#125;<br><span class="hljs-comment">// 初始入栈</span><br>heap.Push(h, SumPointer&#123;sum:curSum, pointer:<span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, m)&#125;)<br><br>visited := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">bool</span>) <span class="hljs-comment">//去重</span><br><span class="hljs-keyword">for</span> ki:=<span class="hljs-number">1</span>; ki&lt;k; ki++&#123;<br>sp := heap.Pop(h).(SumPointer)<br>curSum = sp.sum<br><span class="hljs-keyword">for</span> i,j := <span class="hljs-keyword">range</span> sp.pointer &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">int</span>(j) &lt; n<span class="hljs-number">-1</span> &#123;<br>newPointer := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(sp.pointer))<br><span class="hljs-built_in">copy</span>(newPointer, sp.pointer) <span class="hljs-comment">// 复制</span><br>newPointer[i]++<br><span class="hljs-keyword">var</span> build strings.Builder<br><span class="hljs-keyword">for</span> _, pointer := <span class="hljs-keyword">range</span> newPointer &#123;<br>build.WriteString(strconv.Itoa(pointer))<br>&#125;<br><span class="hljs-keyword">if</span> !visited[build.String()] &#123;<br>newSum := curSum + mat[i][j+<span class="hljs-number">1</span>] - mat[i][j]<br>heap.Push(h, SumPointer&#123;sum:newSum, pointer: newPointer&#125;)<br>visited[build.String()] = <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> heap.Pop(h).(SumPointer).sum<br>&#125;<br><br><span class="hljs-keyword">type</span> SumPointer <span class="hljs-keyword">struct</span> &#123;<br>pointer []<span class="hljs-keyword">int</span><br>sum <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> SPS []SumPointer<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h SPS)</span> <span class="hljs-title">Len</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(h)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h SPS)</span> <span class="hljs-title">Swap</span><span class="hljs-params">(i,j <span class="hljs-keyword">int</span>)</span></span> &#123;<br>h[i],h[j] = h[j], h[i]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h SPS)</span> <span class="hljs-title">Less</span><span class="hljs-params">(i,j <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> h[i].sum &lt; h[j].sum<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *SPS)</span> <span class="hljs-title">Push</span><span class="hljs-params">(v <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>*h = <span class="hljs-built_in">append</span>(*h, v.(SumPointer))<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *SPS)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br>e := (*h)[h.Len() - <span class="hljs-number">1</span>]<br>*h = (*h)[:h.Len()<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">return</span> e<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">kthSmallest</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] mat, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> m = mat.length;<br>        <span class="hljs-keyword">int</span> n = mat[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-comment">// 构建小顶堆</span><br>        PriorityQueue&lt;SumPointer&gt; heap <br>            = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;((p1,p2) -&gt; p1.sum - p2.sum);<br><br>        <span class="hljs-keyword">int</span> curSum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>            curSum+= mat[i][<span class="hljs-number">0</span>];<br>        &#125;<br>        heap.add(<span class="hljs-keyword">new</span> SumPointer(curSum, <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m]));<br>        <span class="hljs-comment">// 使用set保存是否访问过该数组</span><br>        Set&lt;String&gt; visited = <span class="hljs-keyword">new</span> HashSet();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> ki = <span class="hljs-number">1</span>; ki&lt;k; ki++)&#123;<br>            SumPointer sp = heap.poll();<br>            curSum = sp.sum;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;sp.pointer.length; i++)&#123;<br>                <span class="hljs-keyword">if</span> (sp.pointer[i] &lt; n-<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">int</span>[] newPointer = Arrays.copyOf(sp.pointer, sp.pointer.length);<br>                    newPointer[i]++;<br>                    <span class="hljs-comment">// Arrays.toString(newPointer), 将 newPointer[] 数组转为字符串保存.</span><br>                    <span class="hljs-keyword">if</span>(!visited.contains(Arrays.toString(newPointer))) &#123;<br>                        <span class="hljs-keyword">int</span> newSum = curSum + mat[i][sp.pointer[i]+<span class="hljs-number">1</span>] - mat[i][sp.pointer[i]];<br>                        heap.add(<span class="hljs-keyword">new</span> SumPointer(newSum, newPointer));<br>                        visited.add(Arrays.toString(newPointer));<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br><br>        <span class="hljs-keyword">return</span> heap.poll().sum;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 构造对象</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SumPointer</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> sum;<br>    <span class="hljs-keyword">int</span>[] pointer;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SumPointer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sum , <span class="hljs-keyword">int</span>[] pointer)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.sum = sum;<br>        <span class="hljs-keyword">this</span>.pointer = pointer;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">kthSmallest</span><span class="hljs-params">(mat [][]<span class="hljs-keyword">int</span>, k <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>m,n := <span class="hljs-built_in">len</span>(mat),<span class="hljs-built_in">len</span>(mat[<span class="hljs-number">0</span>])<br>h := &amp;SPS&#123;&#125;<br>heap.Init(h)<br><br><span class="hljs-comment">// 初始化</span><br>curSum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i&lt;m; i++ &#123;<br>curSum += mat[i][<span class="hljs-number">0</span>]<br>&#125;<br><span class="hljs-comment">// 初始入栈</span><br>heap.Push(h, SumPointer&#123;sum:curSum, pointer:<span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, m)&#125;)<br><br>visited := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">bool</span>) <span class="hljs-comment">//去重</span><br><span class="hljs-keyword">for</span> ki:=<span class="hljs-number">1</span>; ki&lt;k; ki++&#123;<br>sp := heap.Pop(h).(SumPointer)<br>curSum = sp.sum<br><span class="hljs-keyword">for</span> i,j := <span class="hljs-keyword">range</span> sp.pointer &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">int</span>(j) &lt; n<span class="hljs-number">-1</span> &#123;<br>newPointer := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(sp.pointer))<br><span class="hljs-built_in">copy</span>(newPointer, sp.pointer) <span class="hljs-comment">// 复制</span><br>newPointer[i]++<br><span class="hljs-keyword">var</span> build strings.Builder<br><span class="hljs-keyword">for</span> _, pointer := <span class="hljs-keyword">range</span> newPointer &#123;<br>build.WriteString(strconv.Itoa(pointer))<br>&#125;<br><span class="hljs-keyword">if</span> !visited[build.String()] &#123;<br>newSum := curSum + mat[i][j+<span class="hljs-number">1</span>] - mat[i][j]<br>heap.Push(h, SumPointer&#123;sum:newSum, pointer: newPointer&#125;)<br>visited[build.String()] = <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> heap.Pop(h).(SumPointer).sum<br>&#125;<br><br><span class="hljs-keyword">type</span> SumPointer <span class="hljs-keyword">struct</span> &#123;<br>pointer []<span class="hljs-keyword">int</span><br>sum <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> SPS []SumPointer<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h SPS)</span> <span class="hljs-title">Len</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(h)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h SPS)</span> <span class="hljs-title">Swap</span><span class="hljs-params">(i,j <span class="hljs-keyword">int</span>)</span></span> &#123;<br>h[i],h[j] = h[j], h[i]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h SPS)</span> <span class="hljs-title">Less</span><span class="hljs-params">(i,j <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> h[i].sum &lt; h[j].sum<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *SPS)</span> <span class="hljs-title">Push</span><span class="hljs-params">(v <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>*h = <span class="hljs-built_in">append</span>(*h, v.(SumPointer))<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *SPS)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br>e := (*h)[h.Len() - <span class="hljs-number">1</span>]<br>*h = (*h)[:h.Len()<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">return</span> e<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">kthSmallest</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] mat, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> m = mat.length;<br>        <span class="hljs-keyword">int</span> n = mat[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-comment">// 构建小顶堆</span><br>        PriorityQueue&lt;SumPointer&gt; heap <br>            = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;((p1,p2) -&gt; p1.sum - p2.sum);<br><br>        <span class="hljs-keyword">int</span> curSum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>            curSum+= mat[i][<span class="hljs-number">0</span>];<br>        &#125;<br>        heap.add(<span class="hljs-keyword">new</span> SumPointer(curSum, <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m]));<br>        <span class="hljs-comment">// 使用set保存是否访问过该数组</span><br>        Set&lt;String&gt; visited = <span class="hljs-keyword">new</span> HashSet();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> ki = <span class="hljs-number">1</span>; ki&lt;k; ki++)&#123;<br>            SumPointer sp = heap.poll();<br>            curSum = sp.sum;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;sp.pointer.length; i++)&#123;<br>                <span class="hljs-keyword">if</span> (sp.pointer[i] &lt; n-<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">int</span>[] newPointer = Arrays.copyOf(sp.pointer, sp.pointer.length);<br>                    newPointer[i]++;<br>                    <span class="hljs-comment">// Arrays.toString(newPointer), 将 newPointer[] 数组转为字符串保存.</span><br>                    <span class="hljs-keyword">if</span>(!visited.contains(Arrays.toString(newPointer))) &#123;<br>                        <span class="hljs-keyword">int</span> newSum = curSum + mat[i][sp.pointer[i]+<span class="hljs-number">1</span>] - mat[i][sp.pointer[i]];<br>                        heap.add(<span class="hljs-keyword">new</span> SumPointer(newSum, newPointer));<br>                        visited.add(Arrays.toString(newPointer));<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br><br>        <span class="hljs-keyword">return</span> heap.poll().sum;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 构造对象</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SumPointer</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> sum;<br>    <span class="hljs-keyword">int</span>[] pointer;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SumPointer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sum , <span class="hljs-keyword">int</span>[] pointer)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.sum = sum;<br>        <span class="hljs-keyword">this</span>.pointer = pointer;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>堆</tag>
      
      <tag>多路归并</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0871.最低加油次数</title>
    <link href="/lc-0871-%E6%9C%80%E4%BD%8E%E5%8A%A0%E6%B2%B9%E6%AC%A1%E6%95%B0"/>
    <url>/lc-0871-%E6%9C%80%E4%BD%8E%E5%8A%A0%E6%B2%B9%E6%AC%A1%E6%95%B0</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>汽车从起点出发驶向目的地，该目的地位于出发位置东面 target 英里处。</p><p>沿途有加油站，每个 station[i] 代表一个加油站，它位于出发位置东面 station[i][0] 英里处，并且有 station[i][1] 升汽油。</p><p>假设汽车油箱的容量是无限的，其中最初有 startFuel 升燃料。它每行驶 1 英里就会用掉 1 升汽油。</p><p>当汽车到达加油站时，它可能停下来加油，将所有汽油从加油站转移到汽车中。</p><p>为了到达目的地，汽车所必要的最低加油次数是多少？如果无法到达目的地，则返回 -1 。</p><p>注意：如果汽车到达加油站时剩余燃料为 0，它仍然可以在那里加油。如果汽车到达目的地时剩余燃料为 0，仍然认为它已经到达目的地。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">target</span> = <span class="hljs-number">1</span>, <span class="hljs-attr">startFuel</span> = <span class="hljs-number">1</span>, <span class="hljs-attr">stations</span> = []<br>输出：<span class="hljs-number">0</span><br>解释：我们可以在不加油的情况下到达目的地。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">输入：target = <span class="hljs-number">100</span>, startFuel = <span class="hljs-number">1</span>, stations = <span class="hljs-string">[[10,100]]</span><br>输出：<span class="hljs-number">-1</span><br>解释：我们无法抵达目的地，甚至无法到达第一个加油站。<br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">输入：target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]<br>输出：2<br>解释：<br>我们出发时有<span class="hljs-number"> 10 </span>升燃料。<br>我们开车来到距起点<span class="hljs-number"> 10 </span>英里处的加油站，消耗<span class="hljs-number"> 10 </span>升燃料。将汽油从<span class="hljs-number"> 0 </span>升加到<span class="hljs-number"> 60 </span>升。<br>然后，我们从<span class="hljs-number"> 10 </span>英里处的加油站开到<span class="hljs-number"> 60 </span>英里处的加油站（消耗<span class="hljs-number"> 50 </span>升燃料），<br>并将汽油从<span class="hljs-number"> 10 </span>升加到<span class="hljs-number"> 50 </span>升。然后我们开车抵达目的地。<br>我们沿途在1两个加油站停靠，所以返回<span class="hljs-number"> 2 </span>。<br></code></pre></div></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>采用事后诸葛亮的思路方式，在遍历的时候将当前获取的信息先存储起来，然后继续遍历。<br>在此题中，如果当前的燃料足以到达下一站，那么就将燃料入大顶堆。如果当前燃料不足，就从大顶堆取出堆中最大的燃料（假装添加燃料，不需要在意是在前面哪一站加的油，直接ans+1即可）。如果堆中已经没有燃料了，但是cur还是&lt;0,那么说明就算在每个站都加上油也到不了当前的位置。直接返回-1即可。<br>如果循环stations结束，说明顺利到达目的地，直接返回ans。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="python3实现"><a href="#python3实现" class="headerlink" title="python3实现"></a>python3实现</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">minRefuelStops</span>(<span class="hljs-params">self, target: <span class="hljs-built_in">int</span>, startFuel: <span class="hljs-built_in">int</span>, stations: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        stations += [(target, <span class="hljs-number">0</span>)]<br>        cur = startFuel<br>        ans = <span class="hljs-number">0</span><br>        h = []<br>        last = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i,fuel <span class="hljs-keyword">in</span> stations:<br>            <span class="hljs-built_in">print</span>(i,fuel)<br>            cur -= i - last<br>            <span class="hljs-keyword">while</span> cur &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> h:<br>                cur -= heapq.heappop(h)<br>                ans += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> cur &lt; <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>            heapq.heappush(h, -fuel) <span class="hljs-comment">#大顶堆</span><br>            last = i<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h3 id="go实现"><a href="#go实现" class="headerlink" title="go实现"></a>go实现</h3><ol><li>go语言中没有常用的队列，堆等结构，需要自己定义结构。</li><li>for 循环遍历二维数组的时候，<code>for i, row := range stations &#123;&#125;</code> 中， <code>i</code>是行号，<code>row</code>是一维数组。</li></ol><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">minRefuelStops</span><span class="hljs-params">(target <span class="hljs-keyword">int</span>, startFuel <span class="hljs-keyword">int</span>, stations [][]<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>stations = <span class="hljs-built_in">append</span>(stations, []<span class="hljs-keyword">int</span>&#123;target,<span class="hljs-number">0</span>&#125;)<br>h,last,cur := &amp;hp&#123;&#125;,<span class="hljs-number">0</span>,startFuel<br>ans := <span class="hljs-number">0</span><br>heap.Init(h)<br><span class="hljs-keyword">for</span> _, row := <span class="hljs-keyword">range</span> stations &#123;<br><span class="hljs-comment">// fmt.Println(row[0],row[1])</span><br>cur -= row[<span class="hljs-number">0</span>] - last<br><span class="hljs-keyword">for</span> cur &lt; <span class="hljs-number">0</span> &amp;&amp; h.Len() &gt; <span class="hljs-number">0</span> &#123;<br>cur -= heap.Pop(h).(<span class="hljs-keyword">int</span>)<br>ans += <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">if</span> cur &lt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br>heap.Push(h, -row[<span class="hljs-number">1</span>])<br>last = row[<span class="hljs-number">0</span>]<br>&#125;<br><span class="hljs-keyword">return</span> ans<br>&#125;<br><br><span class="hljs-keyword">type</span> hp <span class="hljs-keyword">struct</span> &#123;sort.IntSlice&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *hp)</span> <span class="hljs-title">Push</span><span class="hljs-params">(v <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span>&#123;h.IntSlice = <span class="hljs-built_in">append</span>(h.IntSlice, v.(<span class="hljs-keyword">int</span>))&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *hp)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;a := h.IntSlice;v := a[<span class="hljs-built_in">len</span>(a)<span class="hljs-number">-1</span>];h.IntSlice = a[:<span class="hljs-built_in">len</span>(a)<span class="hljs-number">-1</span>];<span class="hljs-keyword">return</span> v&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0857.雇佣k名工人的最低成本</title>
    <link href="/lc-0857-%E9%9B%87%E4%BD%A3k%E5%90%8D%E5%B7%A5%E4%BA%BA%E7%9A%84%E6%9C%80%E4%BD%8E%E6%88%90%E6%9C%AC"/>
    <url>/lc-0857-%E9%9B%87%E4%BD%A3k%E5%90%8D%E5%B7%A5%E4%BA%BA%E7%9A%84%E6%9C%80%E4%BD%8E%E6%88%90%E6%9C%AC</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>有 N 名工人。 第 i 名工人的工作质量为 quality[i] ，其最低期望工资为 wage[i] 。</p><p>现在我们想雇佣 K 名工人组成一个工资组。在雇佣 一组 K 名工人时，我们必须按照下述规则向他们支付工资：</p><p>对工资组中的每名工人，应当按其工作质量与同组其他工人的工作质量的比例来支付工资。<br>工资组中的每名工人至少应当得到他们的最低期望工资。<br>返回组成一个满足上述条件的工资组至少需要多少钱。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入： <span class="hljs-attr">quality</span> = [<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">5</span>], <span class="hljs-attr">wage</span> = [<span class="hljs-number">70</span>,<span class="hljs-number">50</span>,<span class="hljs-number">30</span>], <span class="hljs-attr">K</span> = <span class="hljs-number">2</span><br>输出： <span class="hljs-number">105.00000</span><br>解释： 我们向 <span class="hljs-number">0</span> 号工人支付 <span class="hljs-number">70</span>，向 <span class="hljs-number">2</span> 号工人支付 <span class="hljs-number">35</span>。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">输入： quality = [<span class="hljs-number">3,1,10,10</span>,<span class="hljs-number">1</span>], wage = [<span class="hljs-number">4,8,2,2</span>,<span class="hljs-number">7</span>], K = <span class="hljs-number">3</span><br>输出： <span class="hljs-number">30.66667</span><br>解释： 我们向 <span class="hljs-number">0</span> 号工人支付 <span class="hljs-number">4</span>，向 <span class="hljs-number">2</span> 号和 <span class="hljs-number">3</span> 号分别支付 <span class="hljs-number">13.33333</span>。<br></code></pre></div></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>分析：如何得到最低成本 – 按工作质量比率支付工资。质量q，薪资w，假定比率 rate=w/q, 那么k名工人的成本为 sumW = w/q*(q1+q2+…+qn) = rate * sumQ</li><li>为了使得 sumW 最小，那么 sumQ 应该是全部工人中k个最小的q，rate为已经选中的k名工人中，rate最大的那个（如果取选定k名工人中rate最小的那个，则在此k名工人中，会有人得不到期望薪水）</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mincostToHireWorkers</span>(<span class="hljs-params">self, quality: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], wage: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">float</span>:</span><br>        effs = [(q/w,q) <span class="hljs-keyword">for</span> q,w <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(quality, wage)]<br>        effs.sort(key=<span class="hljs-keyword">lambda</span> a: -a[<span class="hljs-number">0</span>])<br>        ans = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>        h = []<br>        total = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> rate, q <span class="hljs-keyword">in</span> effs:<br>            heapq.heappush(h, -q)<br>            total += q<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(h) &gt; k :<br>                total += heapq.heappop(h)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(h) == k:<br>                <span class="hljs-built_in">print</span>(total,rate)<br>                ans = <span class="hljs-built_in">min</span>(ans, total/rate)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mincostToHireWorkers</span>(<span class="hljs-params">self, quality: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], wage: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">float</span>:</span><br>        effs = [(q/w,q) <span class="hljs-keyword">for</span> q,w <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(quality, wage)]<br>        effs.sort(key=<span class="hljs-keyword">lambda</span> a: -a[<span class="hljs-number">0</span>])<br>        ans = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>        h = []<br>        total = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> rate, q <span class="hljs-keyword">in</span> effs:<br>            heapq.heappush(h, -q)<br>            total += q<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(h) &gt; k :<br>                total += heapq.heappop(h)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(h) == k:<br>                <span class="hljs-built_in">print</span>(total,rate)<br>                ans = <span class="hljs-built_in">min</span>(ans, total/rate)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>堆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0743.网络延迟时间</title>
    <link href="/lc-0743-%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%97%B4"/>
    <url>/lc-0743-%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%97%B4</url>
    
    <content type="html"><![CDATA[<p>使用 dijkstra 算法，计算从一个点出发到各个其他点的最短路径集合。</p><p>条件：图，有向边，带权，求一个点到其他点的最短路径</p><p>思路：<br>    需要数据结构：<br>        一个 dis 集合，用来记录 七点到其他点的距离，一个集合 T 用来标记遍历过的点元素。<br>    算法流程：<br>        1. 初始化 dis 数组：dis[0]=0，表示本身距离为0，dis[n]=’inif’，表示从本身到点n的距离为∞（无穷大），并将与源起点直连的点先更新到 dis[n]中。初始化集合 T 中只有一个源起点。T{x}<br>        2. 从 dis[] 中找到一个最近距离的点 n1 ，将该点添加到集合T{x,..,n1}中，然后对该点进行“出度”（判断从该点可达其他点（可能有多个）的dis[n1-&gt;nz]距离+dis[n1] 是否小于 dis[nz]，是的话就更新 dis[nz]。）<br>        3. 循环步骤2，直到所有点都遍历过。</p><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>有 n 个网络节点，标记为 1 到 n。</p><p>给你一个列表 times，表示信号经过 有向 边的传递时间。 times[i] = (ui, vi, wi)，其中 ui 是源节点，vi 是目标节点， wi 是一个信号从源节点传递到目标节点的时间。</p><p>现在，从某个节点 K 发出一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回 -1 。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">输入：times = <span class="hljs-string">[[2,1,1],[2,3,1],[3,4,1]]</span>, n = <span class="hljs-number">4</span>, k = <span class="hljs-number">2</span><br>输出：<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">输入：times = <span class="hljs-string">[[1,2,1]]</span>, n = <span class="hljs-number">2</span>, k = <span class="hljs-number">1</span><br>输出：<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">输入：times = <span class="hljs-string">[[1,2,1]]</span>, n = <span class="hljs-number">2</span>, k = <span class="hljs-number">2</span><br>输出：<span class="hljs-number">-1</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="Python实现代码"><a href="#Python实现代码" class="headerlink" title="Python实现代码"></a>Python实现代码</h3><p>此处的 dijkstra 算法计算的是从起点 start 到 end 的最短距离.</p><ol><li><p>使用 hashmap 存储遍历过的点和最短路径信息 – 减少重复计算</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dijkstra</span>(<span class="hljs-params">self, graph, start, end</span>):</span><br>        heap = [(<span class="hljs-number">0</span>, start)]<br>        dist = &#123;&#125;<br>        <span class="hljs-keyword">while</span> heap:<br>            (cost, u) = heapq.heappop(heap)<br>            <span class="hljs-keyword">if</span> u <span class="hljs-keyword">in</span> dist:<br>                <span class="hljs-keyword">continue</span><br>            dist[u] = cost<br>            <span class="hljs-keyword">for</span> v, c <span class="hljs-keyword">in</span> graph[u]:<br>                <span class="hljs-keyword">if</span> v <span class="hljs-keyword">in</span> dist:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-built_in">next</span> = cost + c<br>                heapq.heappush(heap, (<span class="hljs-built_in">next</span>,v))<br>        <span class="hljs-keyword">return</span> dist<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">networkDelayTime</span>(<span class="hljs-params">self, times: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], n: <span class="hljs-built_in">int</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        graph = collections.defaultdict(<span class="hljs-built_in">list</span>)<br>        <span class="hljs-comment"># 使用邻接矩阵表示 ‘有向边’的传递时间</span><br>        <span class="hljs-keyword">for</span> fr, to, w <span class="hljs-keyword">in</span> times:<br>            graph[fr - <span class="hljs-number">1</span>].append((to -<span class="hljs-number">1</span>, w))<br>        ans = -<span class="hljs-number">1</span><br>        dist = self.dijkstra(graph, k-<span class="hljs-number">1</span>, to)<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(dist) != n <span class="hljs-keyword">else</span> <span class="hljs-built_in">max</span>(dist.values())<br></code></pre></div></td></tr></table></figure></li><li><p>使用 set() 存储遍历过的点，如果遍历过就不需要计算, 还可以进一步优化.</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dijkstra</span>(<span class="hljs-params">self, graph, start, end</span>):</span><br>        heap = [(<span class="hljs-number">0</span>, start)]<br>        visited = <span class="hljs-built_in">set</span>()<br>        <span class="hljs-keyword">while</span> heap:<br>            (cost, u) = heapq.heappop(heap)<br>            <span class="hljs-keyword">if</span> u <span class="hljs-keyword">in</span> visited:<br>                <span class="hljs-keyword">continue</span><br>            visited.add(u)<br>            <span class="hljs-keyword">if</span> u == end:<br>                <span class="hljs-keyword">return</span> cost<br>            <span class="hljs-comment"># 出度</span><br>            <span class="hljs-keyword">for</span> v, c <span class="hljs-keyword">in</span> graph[u]:<br>                <span class="hljs-keyword">if</span> v <span class="hljs-keyword">in</span> visited:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-built_in">next</span> = cost + c<br>                heapq.heappush(heap, (<span class="hljs-built_in">next</span>,v))<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">networkDelayTime</span>(<span class="hljs-params">self, times: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], n: <span class="hljs-built_in">int</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        graph = collections.defaultdict(<span class="hljs-built_in">list</span>)<br>        <span class="hljs-comment"># 使用邻接矩阵表示 ‘有向边’的传递时间</span><br>        <span class="hljs-keyword">for</span> fr, to, w <span class="hljs-keyword">in</span> times:<br>            graph[fr - <span class="hljs-number">1</span>].append((to -<span class="hljs-number">1</span>, w))<br>        ans = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> to <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-comment"># 调用封装好的 dijkstra 方法</span><br>            dist = self.dijkstra(graph, k - <span class="hljs-number">1</span>, to)<br>            <span class="hljs-keyword">if</span> dist == -<span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>            ans = <span class="hljs-built_in">max</span>(ans, dist)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>堆</tag>
      
      <tag>dijkstra</tag>
      
      <tag>最短带权路径</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0719.找出第k小的距离对</title>
    <link href="/lc-0719-%E6%89%BE%E5%87%BA%E7%AC%ACk%E5%B0%8F%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%AF%B9"/>
    <url>/lc-0719-%E6%89%BE%E5%87%BA%E7%AC%ACk%E5%B0%8F%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%AF%B9</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个整数数组，返回所有数对之间的第 k 个最小距离。一对 (A, B) 的距离被定义为 A 和 B 之间的绝对差值。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript">输入：<br>nums = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]<br>k = <span class="hljs-number">1</span><br>输出：<span class="hljs-number">0</span> <br>解释：<br>所有数对如下：<br><span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)</span> -&gt;</span> <span class="hljs-number">2</span><br><span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)</span> -&gt;</span> <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)</span> -&gt;</span> <span class="hljs-number">2</span><br>因此第 <span class="hljs-number">1</span> 个最小距离的数对是 (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)，它们之间的距离为 <span class="hljs-number">0</span>。<br></code></pre></div></td></tr></table></figure><p>提示:</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span>&lt;= <span class="hljs-keyword">len</span>(nums) &lt;= <span class="hljs-number">10000</span>.<br><span class="hljs-symbol">0 </span>&lt;= nums[i] &lt; <span class="hljs-number">1000000</span>.<br><span class="hljs-symbol">1 </span>&lt;= k &lt;= <span class="hljs-keyword">len</span>(nums) * (<span class="hljs-keyword">len</span>(nums) - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>.<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>使用小顶堆实现取第几个k.</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">smallestDistancePair</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        Arrays.sort(nums);<br>        System.out.println(Arrays.toString(nums));<br>        PriorityQueue&lt;Distanct&gt; heap = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;((o1,o2) -&gt; o1.dis - o2.dis);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length-<span class="hljs-number">1</span>; i++)&#123;<br>            heap.add(<span class="hljs-keyword">new</span> Distanct(nums[i+<span class="hljs-number">1</span>] - nums[i], i, i+<span class="hljs-number">1</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> ans = heap.peek().dis;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;k; i++)&#123;<br>            Distanct top = heap.poll();<br>            ans = top.dis;<br>            <span class="hljs-keyword">if</span>( top.j + <span class="hljs-number">1</span>&lt; nums.length)&#123;<br>                heap.add(<span class="hljs-keyword">new</span> Distanct(nums[top.j+<span class="hljs-number">1</span>] - nums[top.i], top.i, top.j+<span class="hljs-number">1</span>));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Distanct</span> </span>&#123;<br>    Integer dis;<br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Distanct</span><span class="hljs-params">(<span class="hljs-keyword">int</span> dis, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.dis = dis;<br>        <span class="hljs-keyword">this</span>.i = i;<br>        <span class="hljs-keyword">this</span>.j = j;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果:</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">Time Limit Exceeded<br><span class="hljs-number">18</span><span class="hljs-regexp">/19 cases passed (N/</span>A)<br></code></pre></div></td></tr></table></figure><p>Testcase:</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">[<span class="hljs-number">197180</span>,<span class="hljs-number">567032</span>,<span class="hljs-number">701885</span>,<span class="hljs-number">294688</span>,<span class="hljs-number">49821,319144</span>,<span class="hljs-number">793670</span>,<span class="hljs-number">35956,30654</span>,<span class="hljs-number">462823</span>,<span class="hljs-number">954237</span>,<span class="hljs-number">828852</span>,<span class="hljs-number">85004,156833</span>,<span class="hljs-number">193021,362217</span>,<span class="hljs-number">197278</span>,<span class="hljs-number">327502</span>,<span class="hljs-number">82298,521188</span>,<span class="hljs-number">951833</span>,<span class="hljs-number">265111</span>,<span class="hljs-number">760577</span>,<span class="hljs-number">510602</span>,<span class="hljs-number">668226,3307</span>,<span class="hljs-number">908042</span>,<span class="hljs-number">352949</span>,<span class="hljs-number">860824</span>,<span class="hljs-number">129537</span>,<span class="hljs-number">908611</span>,<span class="hljs-number">25249</span>,<span class="hljs-number">417829</span>,<span class="hljs-number">291862</span>,<span class="hljs-number">465673</span>,<span class="hljs-number">534186</span>,<span class="hljs-number">369397</span>,<span class="hljs-number">683232,173430</span>,<span class="hljs-number">18207,82787</span>,<span class="hljs-number">876718</span>,<span class="hljs-number">391394</span>,<span class="hljs-number">475845</span>,<span class="hljs-number">722608</span>,<span class="hljs-number">190000</span>,<span class="hljs-number">969787</span>,<span class="hljs-number">233166</span>,<span class="hljs-number">662525</span>,<span class="hljs-number">607653</span>,<span class="hljs-number">200810,935100</span>,<span class="hljs-number">640383</span>,<span class="hljs-number">693229</span>,<span class="hljs-number">625474</span>,<span class="hljs-number">122557</span>,<span class="hljs-number">533527</span>,<span class="hljs-number">260952</span>,<span class="hljs-number">707482</span>,<span class="hljs-number">765465</span>,<span class="hljs-number">845266</span>,<span class="hljs-number">157430</span>,<span class="hljs-number">435025</span>,<span class="hljs-number">90838</span>,<span class="hljs-number">620046</span>,<span class="hljs-number">538885</span>,<span class="hljs-number">587099</span>,<span class="hljs-number">596938</span>,<span class="hljs-number">443819</span>,<span class="hljs-number">627769</span>,<span class="hljs-number">682479</span>,<span class="hljs-number">56604</span>,<span class="hljs-number">286713</span>,<span class="hljs-number">267635</span>,<span class="hljs-number">810558</span>,<span class="hljs-number">457445</span>,<span class="hljs-number">369187,956105</span>,<span class="hljs-number">591738</span>,<span class="hljs-number">68417,48665</span>,<span class="hljs-number">381853</span>,<span class="hljs-number">999042</span>,<span class="hljs-number">500394</span>,<span class="hljs-number">630032</span>,<span class="hljs-number">323115</span>,<span class="hljs-number">736066</span>,<span class="hljs-number">650057</span>,<span class="hljs-number">579736</span>,<span class="hljs-number">492572</span>,<span class="hljs-number">594889</span>,<span class="hljs-number">681727</span>,<span class="hljs-number">648476</span>,<span class="hljs-number">489128</span>,<span class="hljs-number">546548</span>,<span class="hljs-number">374299</span>,<span class="hljs-number">783065</span>,<span class="hljs-number">38284,13220</span>,<span class="hljs-number">596704</span>,<span class="hljs-number">598511</span>,<span class="hljs-number">384239</span>,<span class="hljs-number">638410</span>,<span class="hljs-number">55052,936220</span>,<span class="hljs-number">399790</span>,<span class="hljs-number">922645</span>,<span class="hljs-number">771376</span>,<span class="hljs-number">626086</span>,<span class="hljs-number">623725</span>,<span class="hljs-number">130425,34870</span>,<span class="hljs-number">312207</span>,<span class="hljs-number">925749</span>,<span class="hljs-number">660887</span>,<span class="hljs-number">584385</span>,<span class="hljs-number">191057,200707</span>,<span class="hljs-number">583676</span>,<span class="hljs-number">297674</span>,<span class="hljs-number">117068,113528</span>,<span class="hljs-number">42937,94302</span>,<span class="hljs-number">896727</span>,<span class="hljs-number">371017</span>,<span class="hljs-number">964230</span>,<span class="hljs-number">600323</span>,<span class="hljs-number">856003</span>,<span class="hljs-number">671048</span>,<span class="hljs-number">276365</span>,<span class="hljs-number">771512</span>,<span class="hljs-number">3835</span>,<span class="hljs-number">306347</span>,<span class="hljs-number">525872</span>,<span class="hljs-number">295193</span>,<span class="hljs-number">529473</span>,<span class="hljs-number">963721</span>,<span class="hljs-number">601928</span>,<span class="hljs-number">136931,129565</span>,<span class="hljs-number">459260</span>,<span class="hljs-number">140827</span>,<span class="hljs-number">904512</span>,<span class="hljs-number">987024</span>,<span class="hljs-number">436624</span>,<span class="hljs-number">489672</span>,<span class="hljs-number">82935</span>,<span class="hljs-number">960898</span>,<span class="hljs-number">859620</span>,<span class="hljs-number">843811</span>,<span class="hljs-number">32944</span>,<span class="hljs-number">828990</span>,<span class="hljs-number">201443</span>,<span class="hljs-number">937507</span>,<span class="hljs-number">585595</span>,<span class="hljs-number">70375,448112</span>,<span class="hljs-number">933974</span>,<span class="hljs-number">569408</span>,<span class="hljs-number">236339</span>,<span class="hljs-number">971838</span>,<span class="hljs-number">379143</span>,<span class="hljs-number">498500</span>,<span class="hljs-number">546479</span>,<span class="hljs-number">56608,610197</span>,<span class="hljs-number">117083</span>,<span class="hljs-number">470717</span>,<span class="hljs-number">78277</span>,<span class="hljs-number">439988</span>,<span class="hljs-number">425379</span>,<span class="hljs-number">615416</span>,<span class="hljs-number">514394</span>,<span class="hljs-number">296548</span>,<span class="hljs-number">271413</span>,<span class="hljs-number">76011</span>,<span class="hljs-number">978081</span>,<span class="hljs-number">603937</span>,<span class="hljs-number">393688</span>,<span class="hljs-number">273149,81525</span>,<span class="hljs-number">880102</span>,<span class="hljs-number">364966</span>,<span class="hljs-number">364381</span>,<span class="hljs-number">272250</span>,<span class="hljs-number">317743</span>,<span class="hljs-number">552991</span>,<span class="hljs-number">195896</span>,<span class="hljs-number">918495</span>,<span class="hljs-number">869437</span>,<span class="hljs-number">638686</span>,<span class="hljs-number">466379</span>,<span class="hljs-number">537575</span>,<span class="hljs-number">803871</span>,<span class="hljs-number">890732</span>,<span class="hljs-number">747277</span>,<span class="hljs-number">626373</span>,<span class="hljs-number">201056</span>,<span class="hljs-number">341977</span>,<span class="hljs-number">189149</span>,<span class="hljs-number">259704</span>,<span class="hljs-number">36461</span>,<span class="hljs-number">434740</span>,<span class="hljs-number">613412</span>,<span class="hljs-number">21800</span>,<span class="hljs-number">978801</span>,<span class="hljs-number">762134</span>,<span class="hljs-number">307758</span>,<span class="hljs-number">814170,195211</span>,<span class="hljs-number">658684</span>,<span class="hljs-number">989269</span>,<span class="hljs-number">93562</span>,<span class="hljs-number">580701</span>,<span class="hljs-number">407882</span>,<span class="hljs-number">140920</span>,<span class="hljs-number">599676</span>,<span class="hljs-number">551519</span>,<span class="hljs-number">772480</span>,<span class="hljs-number">922489</span>,<span class="hljs-number">783429</span>,<span class="hljs-number">577383</span>,<span class="hljs-number">876213,150333</span>,<span class="hljs-number">95805</span>,<span class="hljs-number">943354</span>,<span class="hljs-number">1815</span>,<span class="hljs-number">773057</span>,<span class="hljs-number">936455</span>,<span class="hljs-number">557840</span>,<span class="hljs-number">573860</span>,<span class="hljs-number">696063</span>,<span class="hljs-number">240428,132502</span>,<span class="hljs-number">906863</span>,<span class="hljs-number">110557</span>,<span class="hljs-number">970566</span>,<span class="hljs-number">262927</span>,<span class="hljs-number">322797</span>,<span class="hljs-number">238051</span>,<span class="hljs-number">775953</span>,<span class="hljs-number">691630</span>,<span class="hljs-number">221805,679158</span>,<span class="hljs-number">229601</span>,<span class="hljs-number">387288</span>,<span class="hljs-number">549635</span>,<span class="hljs-number">147070,165593</span>,<span class="hljs-number">742521</span>,<span class="hljs-number">723065</span>,<span class="hljs-number">476921</span>,<span class="hljs-number">22860,137692</span>,<span class="hljs-number">621763</span>,<span class="hljs-number">110984</span>,<span class="hljs-number">818869</span>,<span class="hljs-number">9460</span>,<span class="hljs-number">636648</span>,<span class="hljs-number">117176,631137</span>,<span class="hljs-number">664359</span>,<span class="hljs-number">279407</span>,<span class="hljs-number">12375,260199</span>,<span class="hljs-number">462089</span>,<span class="hljs-number">862555</span>,<span class="hljs-number">828749</span>,<span class="hljs-number">902128</span>,<span class="hljs-number">560565</span>,<span class="hljs-number">458550</span>,<span class="hljs-number">118747,197335</span>,<span class="hljs-number">535240</span>,<span class="hljs-number">360820</span>,<span class="hljs-number">679017</span>,<span class="hljs-number">643935</span>,<span class="hljs-number">374215</span>,<span class="hljs-number">714356</span>,<span class="hljs-number">896603</span>,<span class="hljs-number">61759,7125</span>,<span class="hljs-number">691590</span>,<span class="hljs-number">22273</span>,<span class="hljs-number">774046</span>,<span class="hljs-number">392237,90279</span>,<span class="hljs-number">659709</span>,<span class="hljs-number">891104</span>,<span class="hljs-number">484757</span>,<span class="hljs-number">281464</span>,<span class="hljs-number">886138,17869</span>,<span class="hljs-number">47516,121401</span>,<span class="hljs-number">136681</span>,<span class="hljs-number">531063</span>,<span class="hljs-number">301053</span>,<span class="hljs-number">95468</span>,<span class="hljs-number">645767</span>,<span class="hljs-number">154683</span>,<span class="hljs-number">861940</span>,<span class="hljs-number">981055</span>,<span class="hljs-number">772378</span>,<span class="hljs-number">458822</span>,<span class="hljs-number">510786</span>,<span class="hljs-number">667702</span>,<span class="hljs-number">897655</span>,<span class="hljs-number">93896,154311</span>,<span class="hljs-number">979714</span>,<span class="hljs-number">242923</span>,<span class="hljs-number">321638</span>,<span class="hljs-number">896685</span>,<span class="hljs-number">282348</span>,<span class="hljs-number">606268</span>,<span class="hljs-number">905787</span>,<span class="hljs-number">418330</span>,<span class="hljs-number">126778,150270</span>,<span class="hljs-number">326502</span>,<span class="hljs-number">680627</span>,<span class="hljs-number">394,622114</span>,<span class="hljs-number">979631</span>,<span class="hljs-number">974401</span>,<span class="hljs-number">387808</span>,<span class="hljs-number">236432,143990</span>,<span class="hljs-number">551797</span>,<span class="hljs-number">979906</span>,<span class="hljs-number">477188</span>,<span class="hljs-number">703793</span>,<span class="hljs-number">129928</span>,<span class="hljs-number">670854</span>,<span class="hljs-number">426538</span>,<span class="hljs-number">318678</span>,<span class="hljs-number">228140</span>,<span class="hljs-number">971328</span>,<span class="hljs-number">998219</span>,<span class="hljs-number">650386</span>,<span class="hljs-number">508009</span>,<span class="hljs-number">64167</span>,<span class="hljs-number">727696</span>,<span class="hljs-number">885179</span>,<span class="hljs-number">730394</span>,<span class="hljs-number">401257</span>,<span class="hljs-number">159439,927117</span>,<span class="hljs-number">281326</span>,<span class="hljs-number">632924</span>,<span class="hljs-number">414042</span>,<span class="hljs-number">563269</span>,<span class="hljs-number">35018</span>,<span class="hljs-number">532472</span>,<span class="hljs-number">97627,155052</span>,<span class="hljs-number">888771</span>,<span class="hljs-number">604117</span>,<span class="hljs-number">390350</span>,<span class="hljs-number">971798</span>,<span class="hljs-number">849885</span>,<span class="hljs-number">829612</span>,<span class="hljs-number">17184</span>,<span class="hljs-number">838357</span>,<span class="hljs-number">860317</span>,<span class="hljs-number">975320</span>,<span class="hljs-number">494257</span>,<span class="hljs-number">482182,175805</span>,<span class="hljs-number">265029</span>,<span class="hljs-number">732863</span>,<span class="hljs-number">81541</span>,<span class="hljs-number">475487</span>,<span class="hljs-number">345034</span>,<span class="hljs-number">591676</span>,<span class="hljs-number">788846</span>,<span class="hljs-number">788335</span>,<span class="hljs-number">434100</span>,<span class="hljs-number">512869</span>,<span class="hljs-number">142266</span>,<span class="hljs-number">276883</span>,<span class="hljs-number">159383</span>,<span class="hljs-number">543296</span>,<span class="hljs-number">645572</span>,<span class="hljs-number">844360</span>,<span class="hljs-number">544748</span>,<span class="hljs-number">530566</span>,<span class="hljs-number">441608</span>,<span class="hljs-number">626208</span>,<span class="hljs-number">595451</span>,<span class="hljs-number">788244,38129</span>,<span class="hljs-number">965907</span>,<span class="hljs-number">6475</span>,<span class="hljs-number">559988</span>,<span class="hljs-number">278906</span>,<span class="hljs-number">903361</span>,<span class="hljs-number">411616</span>,<span class="hljs-number">606767</span>,<span class="hljs-number">298266</span>,<span class="hljs-number">280090</span>,<span class="hljs-number">331740</span>,<span class="hljs-number">543601</span>,<span class="hljs-number">4289</span>,<span class="hljs-number">990479</span>,<span class="hljs-number">131651</span>,<span class="hljs-number">510330</span>,<span class="hljs-number">298111</span>,<span class="hljs-number">445022</span>,<span class="hljs-number">692353</span>,<span class="hljs-number">538452</span>,<span class="hljs-number">678540</span>,<span class="hljs-number">276344</span>,<span class="hljs-number">416483</span>,<span class="hljs-number">771474</span>,<span class="hljs-number">242780,135645</span>,<span class="hljs-number">796355</span>,<span class="hljs-number">409593</span>,<span class="hljs-number">870923</span>,<span class="hljs-number">109422</span>,<span class="hljs-number">632455</span>,<span class="hljs-number">872740</span>,<span class="hljs-number">512578</span>,<span class="hljs-number">325021</span>,<span class="hljs-number">684730</span>,<span class="hljs-number">572102,90258</span>,<span class="hljs-number">580077</span>,<span class="hljs-number">179525</span>,<span class="hljs-number">298448</span>,<span class="hljs-number">333323</span>,<span class="hljs-number">917066</span>,<span class="hljs-number">578630</span>,<span class="hljs-number">701530</span>,<span class="hljs-number">568637</span>,<span class="hljs-number">193656</span>,<span class="hljs-number">863330</span>,<span class="hljs-number">899504</span>,<span class="hljs-number">265380</span>,<span class="hljs-number">536558</span>,<span class="hljs-number">59592,728252</span>,<span class="hljs-number">605281</span>,<span class="hljs-number">885512</span>,<span class="hljs-number">984888</span>,<span class="hljs-number">558937</span>,<span class="hljs-number">873510</span>,<span class="hljs-number">586455</span>,<span class="hljs-number">896449</span>,<span class="hljs-number">547050</span>,<span class="hljs-number">845741</span>,<span class="hljs-number">913377</span>,<span class="hljs-number">290062</span>,<span class="hljs-number">2595</span>,<span class="hljs-number">771493</span>,<span class="hljs-number">446140</span>,<span class="hljs-number">423256</span>,<span class="hljs-number">910729</span>,<span class="hljs-number">366719</span>,<span class="hljs-number">559481</span>,<span class="hljs-number">725190,13466</span>,<span class="hljs-number">557895</span>,<span class="hljs-number">21697</span>,<span class="hljs-number">302767</span>,<span class="hljs-number">984904</span>,<span class="hljs-number">734345</span>,<span class="hljs-number">284393</span>,<span class="hljs-number">8670</span>,<span class="hljs-number">740881</span>,<span class="hljs-number">351858</span>,<span class="hljs-number">989249,130194</span>,<span class="hljs-number">944115</span>,<span class="hljs-number">696781</span>,<span class="hljs-number">162129</span>,<span class="hljs-number">771026</span>,<span class="hljs-number">601439</span>,<span class="hljs-number">163705</span>,<span class="hljs-number">950662</span>,<span class="hljs-number">859846</span>,<span class="hljs-number">27005</span>,<span class="hljs-number">899816</span>,<span class="hljs-number">435139,247523</span>,<span class="hljs-number">343790</span>,<span class="hljs-number">97381</span>,<span class="hljs-number">401373</span>,<span class="hljs-number">914843</span>,<span class="hljs-number">426395</span>,<span class="hljs-number">952446</span>,<span class="hljs-number">318514</span>,<span class="hljs-number">429013</span>,<span class="hljs-number">706227</span>,<span class="hljs-number">448630</span>,<span class="hljs-number">236511,201989</span>,<span class="hljs-number">162606</span>,<span class="hljs-number">898963</span>,<span class="hljs-number">412648</span>,<span class="hljs-number">932782</span>,<span class="hljs-number">431170</span>,<span class="hljs-number">903346</span>,<span class="hljs-number">43288</span>,<span class="hljs-number">317790</span>,<span class="hljs-number">692510</span>,<span class="hljs-number">763717</span>,<span class="hljs-number">270754</span>,<span class="hljs-number">478441</span>,<span class="hljs-number">883868</span>,<span class="hljs-number">287135</span>,<span class="hljs-number">940846</span>,<span class="hljs-number">97256</span>,<span class="hljs-number">330719</span>,<span class="hljs-number">752417</span>,<span class="hljs-number">370197,264251</span>,<span class="hljs-number">603678</span>,<span class="hljs-number">516620</span>,<span class="hljs-number">193141,136381</span>,<span class="hljs-number">788313</span>,<span class="hljs-number">675601</span>,<span class="hljs-number">573069</span>,<span class="hljs-number">891293</span>,<span class="hljs-number">822852</span>,<span class="hljs-number">159055</span>,<span class="hljs-number">461520</span>,<span class="hljs-number">82631</span>,<span class="hljs-number">507049</span>,<span class="hljs-number">661084</span>,<span class="hljs-number">567251</span>,<span class="hljs-number">268684</span>,<span class="hljs-number">720805</span>,<span class="hljs-number">668686</span>,<span class="hljs-number">529552</span>,<span class="hljs-number">372260</span>,<span class="hljs-number">249306</span>,<span class="hljs-number">957404</span>,<span class="hljs-number">643578</span>,<span class="hljs-number">923664</span>,<span class="hljs-number">635606</span>,<span class="hljs-number">899776</span>,<span class="hljs-number">917487</span>,<span class="hljs-number">41512</span>,<span class="hljs-number">392265</span>,<span class="hljs-number">291646</span>,<span class="hljs-number">887338</span>,<span class="hljs-number">23163,153985</span>,<span class="hljs-number">202402,152565</span>,<span class="hljs-number">363200</span>,<span class="hljs-number">928030</span>,<span class="hljs-number">164426</span>,<span class="hljs-number">487735</span>,<span class="hljs-number">962176</span>,<span class="hljs-number">560435</span>,<span class="hljs-number">221493</span>,<span class="hljs-number">889385</span>,<span class="hljs-number">980431</span>,<span class="hljs-number">846174</span>,<span class="hljs-number">843827</span>,<span class="hljs-number">431929</span>,<span class="hljs-number">797050</span>,<span class="hljs-number">4130,208076</span>,<span class="hljs-number">728367</span>,<span class="hljs-number">793299</span>,<span class="hljs-number">797987</span>,<span class="hljs-number">575597</span>,<span class="hljs-number">86975</span>,<span class="hljs-number">318983</span>,<span class="hljs-number">524654</span>,<span class="hljs-number">945873</span>,<span class="hljs-number">635639</span>,<span class="hljs-number">593132</span>,<span class="hljs-number">345910</span>,<span class="hljs-number">910226</span>,<span class="hljs-number">805703</span>,<span class="hljs-number">938781</span>,<span class="hljs-number">575958</span>,<span class="hljs-number">606967</span>,<span class="hljs-number">315567</span>,<span class="hljs-number">722457</span>,<span class="hljs-number">856262</span>,<span class="hljs-number">620516</span>,<span class="hljs-number">548556</span>,<span class="hljs-number">421284</span>,<span class="hljs-number">32866</span>,<span class="hljs-number">477522</span>,<span class="hljs-number">356809</span>,<span class="hljs-number">737976</span>,<span class="hljs-number">585153</span>,<span class="hljs-number">695598</span>,<span class="hljs-number">388779</span>,<span class="hljs-number">857475</span>,<span class="hljs-number">26292</span>,<span class="hljs-number">605658</span>,<span class="hljs-number">295266</span>,<span class="hljs-number">778950</span>,<span class="hljs-number">611057</span>,<span class="hljs-number">321321</span>,<span class="hljs-number">228628,526179</span>,<span class="hljs-number">927480</span>,<span class="hljs-number">865843</span>,<span class="hljs-number">765893</span>,<span class="hljs-number">233688</span>,<span class="hljs-number">315017</span>,<span class="hljs-number">694910</span>,<span class="hljs-number">257967</span>,<span class="hljs-number">964064</span>,<span class="hljs-number">544128</span>,<span class="hljs-number">606643</span>,<span class="hljs-number">135407</span>,<span class="hljs-number">717710</span>,<span class="hljs-number">515726</span>,<span class="hljs-number">641216</span>,<span class="hljs-number">953480</span>,<span class="hljs-number">571063</span>,<span class="hljs-number">657188,65344</span>,<span class="hljs-number">814170</span>,<span class="hljs-number">347945</span>,<span class="hljs-number">819442</span>,<span class="hljs-number">287626</span>,<span class="hljs-number">633939</span>,<span class="hljs-number">299528</span>,<span class="hljs-number">705240,495224</span>,<span class="hljs-number">281339</span>,<span class="hljs-number">555593</span>,<span class="hljs-number">911630</span>,<span class="hljs-number">765400</span>,<span class="hljs-number">451430</span>,<span class="hljs-number">62960</span>,<span class="hljs-number">971989</span>,<span class="hljs-number">620830</span>,<span class="hljs-number">250028</span>,<span class="hljs-number">415037</span>,<span class="hljs-number">348769</span>,<span class="hljs-number">738027</span>,<span class="hljs-number">750184</span>,<span class="hljs-number">362865</span>,<span class="hljs-number">396049</span>,<span class="hljs-number">893686</span>,<span class="hljs-number">782157,161747</span>,<span class="hljs-number">172721,138915</span>,<span class="hljs-number">521915</span>,<span class="hljs-number">504092</span>,<span class="hljs-number">405586</span>,<span class="hljs-number">662543</span>,<span class="hljs-number">471933</span>,<span class="hljs-number">362044</span>,<span class="hljs-number">548218</span>,<span class="hljs-number">274433</span>,<span class="hljs-number">587072</span>,<span class="hljs-number">543147</span>,<span class="hljs-number">672696</span>,<span class="hljs-number">993553</span>,<span class="hljs-number">936389</span>,<span class="hljs-number">237981,605162</span>,<span class="hljs-number">556298</span>,<span class="hljs-number">799299</span>,<span class="hljs-number">473530</span>,<span class="hljs-number">678492</span>,<span class="hljs-number">560934</span>,<span class="hljs-number">583177,763173</span>,<span class="hljs-number">714624</span>,<span class="hljs-number">278096</span>,<span class="hljs-number">816224</span>,<span class="hljs-number">494356</span>,<span class="hljs-number">798547</span>,<span class="hljs-number">258655</span>,<span class="hljs-number">842530</span>,<span class="hljs-number">619873</span>,<span class="hljs-number">862897</span>,<span class="hljs-number">245485,243523</span>,<span class="hljs-number">260043</span>,<span class="hljs-number">797014</span>,<span class="hljs-number">990717</span>,<span class="hljs-number">707342</span>,<span class="hljs-number">944342</span>,<span class="hljs-number">566721</span>,<span class="hljs-number">197076</span>,<span class="hljs-number">736850</span>,<span class="hljs-number">36777</span>,<span class="hljs-number">336616</span>,<span class="hljs-number">961796</span>,<span class="hljs-number">366950</span>,<span class="hljs-number">537168</span>,<span class="hljs-number">422914</span>,<span class="hljs-number">434049</span>,<span class="hljs-number">1442</span>,<span class="hljs-number">520290</span>,<span class="hljs-number">138071,583219</span>,<span class="hljs-number">484161</span>,<span class="hljs-number">722352</span>,<span class="hljs-number">402343</span>,<span class="hljs-number">972482</span>,<span class="hljs-number">687957</span>,<span class="hljs-number">570516</span>,<span class="hljs-number">177653,195761</span>,<span class="hljs-number">939239</span>,<span class="hljs-number">963537</span>,<span class="hljs-number">521486</span>,<span class="hljs-number">357704</span>,<span class="hljs-number">106892</span>,<span class="hljs-number">438854</span>,<span class="hljs-number">532776</span>,<span class="hljs-number">368633</span>,<span class="hljs-number">360796</span>,<span class="hljs-number">494022</span>,<span class="hljs-number">102371</span>,<span class="hljs-number">671304</span>,<span class="hljs-number">17947,238659</span>,<span class="hljs-number">416667</span>,<span class="hljs-number">168943,280214</span>,<span class="hljs-number">53180</span>,<span class="hljs-number">709044</span>,<span class="hljs-number">44094</span>,<span class="hljs-number">959832</span>,<span class="hljs-number">129038</span>,<span class="hljs-number">771431</span>,<span class="hljs-number">942598</span>,<span class="hljs-number">49135</span>,<span class="hljs-number">562780</span>,<span class="hljs-number">734285</span>,<span class="hljs-number">126809,514109</span>,<span class="hljs-number">217519,158822</span>,<span class="hljs-number">96225</span>,<span class="hljs-number">795261</span>,<span class="hljs-number">659474</span>,<span class="hljs-number">869970</span>,<span class="hljs-number">122026</span>,<span class="hljs-number">557963</span>,<span class="hljs-number">29702</span>,<span class="hljs-number">568768</span>,<span class="hljs-number">993741</span>,<span class="hljs-number">255043</span>,<span class="hljs-number">402084</span>,<span class="hljs-number">9948</span>,<span class="hljs-number">910982</span>,<span class="hljs-number">552521</span>,<span class="hljs-number">266726</span>,<span class="hljs-number">503273</span>,<span class="hljs-number">487330</span>,<span class="hljs-number">109913</span>,<span class="hljs-number">697890</span>,<span class="hljs-number">819901</span>,<span class="hljs-number">410910</span>,<span class="hljs-number">556547</span>,<span class="hljs-number">705826</span>,<span class="hljs-number">169242</span>,<span class="hljs-number">754342</span>,<span class="hljs-number">643277</span>,<span class="hljs-number">291015</span>,<span class="hljs-number">402205,14542</span>,<span class="hljs-number">124687</span>,<span class="hljs-number">708094</span>,<span class="hljs-number">174311</span>,<span class="hljs-number">944730</span>,<span class="hljs-number">540390</span>,<span class="hljs-number">74269</span>,<span class="hljs-number">442421</span>,<span class="hljs-number">992878</span>,<span class="hljs-number">466858</span>,<span class="hljs-number">767999</span>,<span class="hljs-number">368801</span>,<span class="hljs-number">520964</span>,<span class="hljs-number">622857</span>,<span class="hljs-number">877932</span>,<span class="hljs-number">454307</span>,<span class="hljs-number">59819,769142</span>,<span class="hljs-number">94812</span>,<span class="hljs-number">351694</span>,<span class="hljs-number">194701</span>,<span class="hljs-number">617641</span>,<span class="hljs-number">611086</span>,<span class="hljs-number">435933</span>,<span class="hljs-number">438039</span>,<span class="hljs-number">379440</span>,<span class="hljs-number">216080</span>,<span class="hljs-number">302644</span>,<span class="hljs-number">565559</span>,<span class="hljs-number">276803</span>,<span class="hljs-number">247497</span>,<span class="hljs-number">624969</span>,<span class="hljs-number">25134</span>,<span class="hljs-number">569641</span>,<span class="hljs-number">645354</span>,<span class="hljs-number">246817,882209</span>,<span class="hljs-number">492821</span>,<span class="hljs-number">567117</span>,<span class="hljs-number">373456</span>,<span class="hljs-number">326874</span>,<span class="hljs-number">804688</span>,<span class="hljs-number">747092</span>,<span class="hljs-number">827878</span>,<span class="hljs-number">365412</span>,<span class="hljs-number">518317</span>,<span class="hljs-number">255460</span>,<span class="hljs-number">784764</span>,<span class="hljs-number">18319</span>,<span class="hljs-number">761054</span>,<span class="hljs-number">536202</span>,<span class="hljs-number">814815</span>,<span class="hljs-number">787045</span>,<span class="hljs-number">241070,185778</span>,<span class="hljs-number">737519</span>,<span class="hljs-number">770870</span>,<span class="hljs-number">177149,572205</span>,<span class="hljs-number">990096</span>,<span class="hljs-number">938570</span>,<span class="hljs-number">141722,87562</span>,<span class="hljs-number">916611</span>,<span class="hljs-number">212228</span>,<span class="hljs-number">419607</span>,<span class="hljs-number">196269</span>,<span class="hljs-number">810309</span>,<span class="hljs-number">137899</span>,<span class="hljs-number">260418</span>,<span class="hljs-number">599992</span>,<span class="hljs-number">168151</span>,<span class="hljs-number">790397</span>,<span class="hljs-number">938582</span>,<span class="hljs-number">32951</span>,<span class="hljs-number">822993</span>,<span class="hljs-number">730875</span>,<span class="hljs-number">785237</span>,<span class="hljs-number">762741</span>,<span class="hljs-number">972643</span>,<span class="hljs-number">574948</span>,<span class="hljs-number">666462</span>,<span class="hljs-number">654687</span>,<span class="hljs-number">316075</span>,<span class="hljs-number">499059</span>,<span class="hljs-number">185381,40791</span>,<span class="hljs-number">657698</span>,<span class="hljs-number">993842</span>,<span class="hljs-number">876982</span>,<span class="hljs-number">629090</span>,<span class="hljs-number">888648</span>,<span class="hljs-number">115628</span>,<span class="hljs-number">505570</span>,<span class="hljs-number">547939</span>,<span class="hljs-number">754928</span>,<span class="hljs-number">856966</span>,<span class="hljs-number">171158,243635</span>,<span class="hljs-number">297309</span>,<span class="hljs-number">444684</span>,<span class="hljs-number">915873</span>,<span class="hljs-number">506139,65457</span>,<span class="hljs-number">182836</span>,<span class="hljs-number">910261</span>,<span class="hljs-number">285579</span>,<span class="hljs-number">541492</span>,<span class="hljs-number">720362</span>,<span class="hljs-number">90168</span>,<span class="hljs-number">906013</span>,<span class="hljs-number">240911</span>,<span class="hljs-number">984588</span>,<span class="hljs-number">339175</span>,<span class="hljs-number">274630</span>,<span class="hljs-number">830227,540225</span>,<span class="hljs-number">773311</span>,<span class="hljs-number">678958</span>,<span class="hljs-number">833766</span>,<span class="hljs-number">739114,138863</span>,<span class="hljs-number">643530</span>,<span class="hljs-number">346066</span>,<span class="hljs-number">936330</span>,<span class="hljs-number">30325</span>,<span class="hljs-number">912691</span>,<span class="hljs-number">246626</span>,<span class="hljs-number">961428</span>,<span class="hljs-number">245578,255104</span>,<span class="hljs-number">979704</span>,<span class="hljs-number">248171</span>,<span class="hljs-number">653069</span>,<span class="hljs-number">42054</span>,<span class="hljs-number">493713</span>,<span class="hljs-number">73880</span>,<span class="hljs-number">989630</span>,<span class="hljs-number">26066</span>,<span class="hljs-number">360072</span>,<span class="hljs-number">217194,471208</span>,<span class="hljs-number">530511</span>,<span class="hljs-number">294235</span>,<span class="hljs-number">979067</span>,<span class="hljs-number">77774</span>,<span class="hljs-number">876554</span>,<span class="hljs-number">531491</span>,<span class="hljs-number">531929</span>,<span class="hljs-number">861336</span>,<span class="hljs-number">253883</span>,<span class="hljs-number">868970</span>,<span class="hljs-number">245116,993151</span>,<span class="hljs-number">518046</span>,<span class="hljs-number">997241</span>,<span class="hljs-number">595451</span>,<span class="hljs-number">411888</span>,<span class="hljs-number">371395</span>,<span class="hljs-number">368434</span>,<span class="hljs-number">208904</span>,<span class="hljs-number">463918</span>,<span class="hljs-number">640801</span>,<span class="hljs-number">412051</span>,<span class="hljs-number">246548,121914</span>,<span class="hljs-number">845571</span>,<span class="hljs-number">729834</span>,<span class="hljs-number">96644</span>,<span class="hljs-number">292060</span>,<span class="hljs-number">922913</span>,<span class="hljs-number">440516</span>,<span class="hljs-number">855199</span>,<span class="hljs-number">763623</span>,<span class="hljs-number">2834</span>,<span class="hljs-number">337755</span>,<span class="hljs-number">296897</span>,<span class="hljs-number">914276</span>,<span class="hljs-number">841187</span>,<span class="hljs-number">464834</span>,<span class="hljs-number">801906</span>,<span class="hljs-number">804831</span>,<span class="hljs-number">442523</span>,<span class="hljs-number">232495</span>,<span class="hljs-number">699364</span>,<span class="hljs-number">912716</span>,<span class="hljs-number">206965</span>,<span class="hljs-number">834329</span>,<span class="hljs-number">439203</span>,<span class="hljs-number">447070</span>,<span class="hljs-number">560044</span>,<span class="hljs-number">303228</span>,<span class="hljs-number">728308</span>,<span class="hljs-number">58709,189382</span>,<span class="hljs-number">547193</span>,<span class="hljs-number">815611</span>,<span class="hljs-number">707779</span>,<span class="hljs-number">233235</span>,<span class="hljs-number">583605</span>,<span class="hljs-number">761298</span>,<span class="hljs-number">122313</span>,<span class="hljs-number">633709</span>,<span class="hljs-number">392716</span>,<span class="hljs-number">84716,30564</span>,<span class="hljs-number">844372</span>,<span class="hljs-number">806994</span>,<span class="hljs-number">330500</span>,<span class="hljs-number">155800,177840</span>,<span class="hljs-number">707376</span>,<span class="hljs-number">901555</span>,<span class="hljs-number">813587</span>,<span class="hljs-number">605694</span>,<span class="hljs-number">524233</span>,<span class="hljs-number">406760</span>,<span class="hljs-number">7613</span>,<span class="hljs-number">447052</span>,<span class="hljs-number">105177</span>,<span class="hljs-number">816752</span>,<span class="hljs-number">948700</span>,<span class="hljs-number">564277</span>,<span class="hljs-number">408249,464174</span>,<span class="hljs-number">514329</span>,<span class="hljs-number">739975</span>,<span class="hljs-number">589676</span>,<span class="hljs-number">152165</span>,<span class="hljs-number">708938</span>,<span class="hljs-number">769700</span>,<span class="hljs-number">988758</span>,<span class="hljs-number">144764</span>,<span class="hljs-number">938811</span>,<span class="hljs-number">429143</span>,<span class="hljs-number">964066</span>,<span class="hljs-number">802117</span>,<span class="hljs-number">514990</span>,<span class="hljs-number">142507</span>,<span class="hljs-number">655498</span>,<span class="hljs-number">660259</span>,<span class="hljs-number">79727,43326</span>,<span class="hljs-number">787556</span>,<span class="hljs-number">293121,880253</span>,<span class="hljs-number">323632</span>,<span class="hljs-number">665689</span>,<span class="hljs-number">579346</span>,<span class="hljs-number">747669</span>,<span class="hljs-number">923670</span>,<span class="hljs-number">439130,24495</span>,<span class="hljs-number">195570</span>,<span class="hljs-number">486810</span>,<span class="hljs-number">454711</span>,<span class="hljs-number">559970</span>,<span class="hljs-number">658784</span>,<span class="hljs-number">330733</span>,<span class="hljs-number">851052</span>,<span class="hljs-number">394267</span>,<span class="hljs-number">296669</span>,<span class="hljs-number">830328</span>,<span class="hljs-number">448248</span>,<span class="hljs-number">958380</span>,<span class="hljs-number">475200</span>,<span class="hljs-number">976363</span>,<span class="hljs-number">617718</span>,<span class="hljs-number">561004</span>,<span class="hljs-number">978699</span>,<span class="hljs-number">977703</span>,<span class="hljs-number">884150</span>,<span class="hljs-number">747266</span>,<span class="hljs-number">413622</span>,<span class="hljs-number">41599,47052</span>,<span class="hljs-number">500278</span>,<span class="hljs-number">529384</span>,<span class="hljs-number">916731</span>,<span class="hljs-number">516235</span>,<span class="hljs-number">381877</span>,<span class="hljs-number">363127</span>,<span class="hljs-number">494730</span>,<span class="hljs-number">492683</span>,<span class="hljs-number">813876</span>,<span class="hljs-number">268904</span>,<span class="hljs-number">158255</span>,<span class="hljs-number">636861</span>,<span class="hljs-number">186156</span>,<span class="hljs-number">361660</span>,<span class="hljs-number">21557</span>,<span class="hljs-number">498565</span>,<span class="hljs-number">298022</span>,<span class="hljs-number">770405</span>,<span class="hljs-number">834343</span>,<span class="hljs-number">99885,184194</span>,<span class="hljs-number">807717</span>,<span class="hljs-number">45427</span>,<span class="hljs-number">777067</span>,<span class="hljs-number">427623</span>,<span class="hljs-number">438643</span>,<span class="hljs-number">932434</span>,<span class="hljs-number">804568</span>,<span class="hljs-number">324789</span>,<span class="hljs-number">726992</span>,<span class="hljs-number">423130</span>,<span class="hljs-number">771540</span>,<span class="hljs-number">260512</span>,<span class="hljs-number">612068</span>,<span class="hljs-number">627285</span>,<span class="hljs-number">837393</span>,<span class="hljs-number">58997</span>,<span class="hljs-number">342724</span>,<span class="hljs-number">976482</span>,<span class="hljs-number">575930</span>,<span class="hljs-number">8867</span>,<span class="hljs-number">301046</span>,<span class="hljs-number">851918</span>,<span class="hljs-number">75024</span>,<span class="hljs-number">964463</span>,<span class="hljs-number">82488</span>,<span class="hljs-number">431774</span>,<span class="hljs-number">533362</span>,<span class="hljs-number">150838</span>,<span class="hljs-number">309271</span>,<span class="hljs-number">79014</span>,<span class="hljs-number">481765</span>,<span class="hljs-number">881159</span>,<span class="hljs-number">645353</span>,<span class="hljs-number">939537</span>,<span class="hljs-number">271051</span>,<span class="hljs-number">834105,66965</span>,<span class="hljs-number">288483</span>,<span class="hljs-number">961641</span>,<span class="hljs-number">701880</span>,<span class="hljs-number">761472</span>,<span class="hljs-number">250899</span>,<span class="hljs-number">906914</span>,<span class="hljs-number">762772</span>,<span class="hljs-number">764645</span>,<span class="hljs-number">415599</span>,<span class="hljs-number">922715</span>,<span class="hljs-number">440830</span>,<span class="hljs-number">866787</span>,<span class="hljs-number">586557</span>,<span class="hljs-number">989973</span>,<span class="hljs-number">542631</span>,<span class="hljs-number">949276</span>,<span class="hljs-number">214171</span>,<span class="hljs-number">666047</span>,<span class="hljs-number">560663</span>,<span class="hljs-number">217817</span>,<span class="hljs-number">851017</span>,<span class="hljs-number">958413</span>,<span class="hljs-number">965335</span>,<span class="hljs-number">800209</span>,<span class="hljs-number">873515</span>,<span class="hljs-number">572566</span>,<span class="hljs-number">356241,150921</span>,<span class="hljs-number">791920</span>,<span class="hljs-number">139845</span>,<span class="hljs-number">569774</span>,<span class="hljs-number">32065,78047</span>,<span class="hljs-number">860517</span>,<span class="hljs-number">196276,187443</span>,<span class="hljs-number">128562,133682</span>,<span class="hljs-number">151674,207978</span>,<span class="hljs-number">489975</span>,<span class="hljs-number">151454,808127</span>,<span class="hljs-number">113620</span>,<span class="hljs-number">955288</span>,<span class="hljs-number">657820</span>,<span class="hljs-number">545580</span>,<span class="hljs-number">805746</span>,<span class="hljs-number">486414</span>,<span class="hljs-number">423127,137311</span>,<span class="hljs-number">691099</span>,<span class="hljs-number">757170,563178</span>,<span class="hljs-number">549713</span>,<span class="hljs-number">444979</span>,<span class="hljs-number">27099</span>,<span class="hljs-number">543962</span>,<span class="hljs-number">899319</span>,<span class="hljs-number">94763,716154</span>,<span class="hljs-number">397716</span>,<span class="hljs-number">294219,27748</span>,<span class="hljs-number">231604</span>,<span class="hljs-number">585419</span>,<span class="hljs-number">707587</span>,<span class="hljs-number">215600</span>,<span class="hljs-number">813601</span>,<span class="hljs-number">855956</span>,<span class="hljs-number">610743</span>,<span class="hljs-number">383755</span>,<span class="hljs-number">25112</span>,<span class="hljs-number">800671</span>,<span class="hljs-number">223594</span>,<span class="hljs-number">809757</span>,<span class="hljs-number">982545</span>,<span class="hljs-number">731585</span>,<span class="hljs-number">104923</span>,<span class="hljs-number">380043</span>,<span class="hljs-number">90668</span>,<span class="hljs-number">691949</span>,<span class="hljs-number">935321</span>,<span class="hljs-number">185917</span>,<span class="hljs-number">471685</span>,<span class="hljs-number">268957</span>,<span class="hljs-number">815173</span>,<span class="hljs-number">925878</span>,<span class="hljs-number">731903</span>,<span class="hljs-number">171280,622105</span>,<span class="hljs-number">582672</span>,<span class="hljs-number">428100</span>,<span class="hljs-number">363410</span>,<span class="hljs-number">529336</span>,<span class="hljs-number">207875</span>,<span class="hljs-number">499781</span>,<span class="hljs-number">360509</span>,<span class="hljs-number">49498</span>,<span class="hljs-number">499774</span>,<span class="hljs-number">311021</span>,<span class="hljs-number">945282</span>,<span class="hljs-number">483201</span>,<span class="hljs-number">994527</span>,<span class="hljs-number">606152</span>,<span class="hljs-number">602501</span>,<span class="hljs-number">486726</span>,<span class="hljs-number">407084</span>,<span class="hljs-number">488849</span>,<span class="hljs-number">176121</span>,<span class="hljs-number">699060</span>,<span class="hljs-number">779425</span>,<span class="hljs-number">543589</span>,<span class="hljs-number">864540</span>,<span class="hljs-number">38408</span>,<span class="hljs-number">396423</span>,<span class="hljs-number">549453</span>,<span class="hljs-number">944094</span>,<span class="hljs-number">573443</span>,<span class="hljs-number">365420</span>,<span class="hljs-number">706941</span>,<span class="hljs-number">372792</span>,<span class="hljs-number">115072</span>,<span class="hljs-number">825835</span>,<span class="hljs-number">424338</span>,<span class="hljs-number">86166</span>,<span class="hljs-number">276640</span>,<span class="hljs-number">755658</span>,<span class="hljs-number">437577</span>,<span class="hljs-number">699030</span>,<span class="hljs-number">987017</span>,<span class="hljs-number">372965</span>,<span class="hljs-number">820541</span>,<span class="hljs-number">696245,125464</span>,<span class="hljs-number">975310</span>,<span class="hljs-number">722544</span>,<span class="hljs-number">148149</span>,<span class="hljs-number">627441</span>,<span class="hljs-number">142933</span>,<span class="hljs-number">537474</span>,<span class="hljs-number">876461</span>,<span class="hljs-number">707447</span>,<span class="hljs-number">244048</span>,<span class="hljs-number">791845</span>,<span class="hljs-number">904507</span>,<span class="hljs-number">558954</span>,<span class="hljs-number">333536</span>,<span class="hljs-number">365468</span>,<span class="hljs-number">530203</span>,<span class="hljs-number">796905</span>,<span class="hljs-number">55498</span>,<span class="hljs-number">258553</span>,<span class="hljs-number">102893</span>,<span class="hljs-number">422976</span>,<span class="hljs-number">432190,227076</span>,<span class="hljs-number">392889</span>,<span class="hljs-number">679800</span>,<span class="hljs-number">319156</span>,<span class="hljs-number">393406</span>,<span class="hljs-number">479004</span>,<span class="hljs-number">768337</span>,<span class="hljs-number">765995</span>,<span class="hljs-number">843998</span>,<span class="hljs-number">54491,179250</span>,<span class="hljs-number">839033</span>,<span class="hljs-number">572420</span>,<span class="hljs-number">94613</span>,<span class="hljs-number">718463</span>,<span class="hljs-number">417703</span>,<span class="hljs-number">45467,126304</span>,<span class="hljs-number">936693</span>,<span class="hljs-number">391578</span>,<span class="hljs-number">693297</span>,<span class="hljs-number">437036</span>,<span class="hljs-number">391905</span>,<span class="hljs-number">802332</span>,<span class="hljs-number">756145</span>,<span class="hljs-number">529841</span>,<span class="hljs-number">943609</span>,<span class="hljs-number">756258</span>,<span class="hljs-number">914098</span>,<span class="hljs-number">506736</span>,<span class="hljs-number">125337</span>,<span class="hljs-number">807596</span>,<span class="hljs-number">109416</span>,<span class="hljs-number">492293</span>,<span class="hljs-number">563341</span>,<span class="hljs-number">770274</span>,<span class="hljs-number">989862</span>,<span class="hljs-number">145705</span>,<span class="hljs-number">365524</span>,<span class="hljs-number">309275</span>,<span class="hljs-number">997021</span>,<span class="hljs-number">333032</span>,<span class="hljs-number">705714</span>,<span class="hljs-number">8954,25138</span>,<span class="hljs-number">227866</span>,<span class="hljs-number">944696</span>,<span class="hljs-number">665664</span>,<span class="hljs-number">772860</span>,<span class="hljs-number">812837</span>,<span class="hljs-number">474026</span>,<span class="hljs-number">731129</span>,<span class="hljs-number">875920</span>,<span class="hljs-number">898776</span>,<span class="hljs-number">103210</span>,<span class="hljs-number">256965</span>,<span class="hljs-number">169501,653111</span>,<span class="hljs-number">192266</span>,<span class="hljs-number">567681</span>,<span class="hljs-number">40311</span>,<span class="hljs-number">974575</span>,<span class="hljs-number">573241</span>,<span class="hljs-number">432818</span>,<span class="hljs-number">809247,24321</span>,<span class="hljs-number">107816</span>,<span class="hljs-number">778615</span>,<span class="hljs-number">531109</span>,<span class="hljs-number">536285</span>,<span class="hljs-number">82416</span>,<span class="hljs-number">359723</span>,<span class="hljs-number">656922</span>,<span class="hljs-number">913249,57304</span>,<span class="hljs-number">558529</span>,<span class="hljs-number">908219,60390</span>,<span class="hljs-number">402343</span>,<span class="hljs-number">982695</span>,<span class="hljs-number">32981</span>,<span class="hljs-number">946606</span>,<span class="hljs-number">966295</span>,<span class="hljs-number">844320</span>,<span class="hljs-number">704478</span>,<span class="hljs-number">639714</span>,<span class="hljs-number">251699</span>,<span class="hljs-number">467431</span>,<span class="hljs-number">140366,190446</span>,<span class="hljs-number">971551</span>,<span class="hljs-number">35940,29988</span>,<span class="hljs-number">568025</span>,<span class="hljs-number">388157</span>,<span class="hljs-number">593820</span>,<span class="hljs-number">856662</span>,<span class="hljs-number">240874,239601</span>,<span class="hljs-number">137385</span>,<span class="hljs-number">939713</span>,<span class="hljs-number">468473</span>,<span class="hljs-number">412571</span>,<span class="hljs-number">929177</span>,<span class="hljs-number">851960</span>,<span class="hljs-number">17084</span>,<span class="hljs-number">681517</span>,<span class="hljs-number">350622</span>,<span class="hljs-number">941710</span>,<span class="hljs-number">154127,240923</span>,<span class="hljs-number">593910</span>,<span class="hljs-number">491547</span>,<span class="hljs-number">829259</span>,<span class="hljs-number">506098</span>,<span class="hljs-number">838780</span>,<span class="hljs-number">179240</span>,<span class="hljs-number">542284</span>,<span class="hljs-number">196754,493190</span>,<span class="hljs-number">980305</span>,<span class="hljs-number">611074</span>,<span class="hljs-number">799220</span>,<span class="hljs-number">268779</span>,<span class="hljs-number">209118</span>,<span class="hljs-number">366446</span>,<span class="hljs-number">925055</span>,<span class="hljs-number">347413</span>,<span class="hljs-number">640269</span>,<span class="hljs-number">861330</span>,<span class="hljs-number">535487</span>,<span class="hljs-number">868203</span>,<span class="hljs-number">574357</span>,<span class="hljs-number">287504</span>,<span class="hljs-number">854196,57515</span>,<span class="hljs-number">889212</span>,<span class="hljs-number">897774</span>,<span class="hljs-number">172859</span>,<span class="hljs-number">510005</span>,<span class="hljs-number">80366</span>,<span class="hljs-number">593042</span>,<span class="hljs-number">703196</span>,<span class="hljs-number">259776</span>,<span class="hljs-number">413961</span>,<span class="hljs-number">289446</span>,<span class="hljs-number">185127</span>,<span class="hljs-number">508919</span>,<span class="hljs-number">694452</span>,<span class="hljs-number">902407</span>,<span class="hljs-number">373037</span>,<span class="hljs-number">325073</span>,<span class="hljs-number">61352</span>,<span class="hljs-number">323584</span>,<span class="hljs-number">440512</span>,<span class="hljs-number">910215,26904</span>,<span class="hljs-number">691804</span>,<span class="hljs-number">665458</span>,<span class="hljs-number">364913</span>,<span class="hljs-number">664904</span>,<span class="hljs-number">950599</span>,<span class="hljs-number">577159</span>,<span class="hljs-number">825577</span>,<span class="hljs-number">519443</span>,<span class="hljs-number">113249</span>,<span class="hljs-number">407742</span>,<span class="hljs-number">371124</span>,<span class="hljs-number">634982</span>,<span class="hljs-number">882451</span>,<span class="hljs-number">654245</span>,<span class="hljs-number">619070</span>,<span class="hljs-number">635692</span>,<span class="hljs-number">46239,869116</span>,<span class="hljs-number">670389</span>,<span class="hljs-number">1178</span>,<span class="hljs-number">739047</span>,<span class="hljs-number">116167,601107</span>,<span class="hljs-number">539492</span>,<span class="hljs-number">985452</span>,<span class="hljs-number">364151,351134</span>,<span class="hljs-number">794692</span>,<span class="hljs-number">440037</span>,<span class="hljs-number">214915,1008</span>,<span class="hljs-number">441540</span>,<span class="hljs-number">360834</span>,<span class="hljs-number">208547,195723</span>,<span class="hljs-number">663975</span>,<span class="hljs-number">930361</span>,<span class="hljs-number">814908</span>,<span class="hljs-number">429207</span>,<span class="hljs-number">365901</span>,<span class="hljs-number">166420,16347</span>,<span class="hljs-number">22444,504243</span>,<span class="hljs-number">543754</span>,<span class="hljs-number">473508</span>,<span class="hljs-number">112128</span>,<span class="hljs-number">745908</span>,<span class="hljs-number">701947</span>,<span class="hljs-number">940495</span>,<span class="hljs-number">975090</span>,<span class="hljs-number">611724</span>,<span class="hljs-number">716273</span>,<span class="hljs-number">841772</span>,<span class="hljs-number">467480</span>,<span class="hljs-number">478866</span>,<span class="hljs-number">12502</span>,<span class="hljs-number">612038</span>,<span class="hljs-number">323016</span>,<span class="hljs-number">456645</span>,<span class="hljs-number">866878</span>,<span class="hljs-number">440364</span>,<span class="hljs-number">884525</span>,<span class="hljs-number">527988</span>,<span class="hljs-number">499317</span>,<span class="hljs-number">740370</span>,<span class="hljs-number">352037</span>,<span class="hljs-number">470443</span>,<span class="hljs-number">487362</span>,<span class="hljs-number">369199,92179</span>,<span class="hljs-number">317273</span>,<span class="hljs-number">254299</span>,<span class="hljs-number">354914</span>,<span class="hljs-number">115031,635139</span>,<span class="hljs-number">706136,116984</span>,<span class="hljs-number">438009</span>,<span class="hljs-number">674234</span>,<span class="hljs-number">391688</span>,<span class="hljs-number">705838</span>,<span class="hljs-number">365495</span>,<span class="hljs-number">702295</span>,<span class="hljs-number">335848</span>,<span class="hljs-number">257630</span>,<span class="hljs-number">437409</span>,<span class="hljs-number">165324</span>,<span class="hljs-number">316903</span>,<span class="hljs-number">716769</span>,<span class="hljs-number">834429</span>,<span class="hljs-number">738506</span>,<span class="hljs-number">230127</span>,<span class="hljs-number">506257</span>,<span class="hljs-number">819441</span>,<span class="hljs-number">713117,115614</span>,<span class="hljs-number">334009</span>,<span class="hljs-number">65575,561109</span>,<span class="hljs-number">984858</span>,<span class="hljs-number">54674,236133</span>,<span class="hljs-number">763868</span>,<span class="hljs-number">478983</span>,<span class="hljs-number">452755</span>,<span class="hljs-number">179204,69600</span>,<span class="hljs-number">104731,81161</span>,<span class="hljs-number">332687</span>,<span class="hljs-number">3372</span>,<span class="hljs-number">851334</span>,<span class="hljs-number">416088</span>,<span class="hljs-number">307383</span>,<span class="hljs-number">466042</span>,<span class="hljs-number">593339</span>,<span class="hljs-number">811825</span>,<span class="hljs-number">238319</span>,<span class="hljs-number">323662</span>,<span class="hljs-number">715685</span>,<span class="hljs-number">133692</span>,<span class="hljs-number">895037</span>,<span class="hljs-number">540699</span>,<span class="hljs-number">977545</span>,<span class="hljs-number">177135,188844</span>,<span class="hljs-number">119812,37389</span>,<span class="hljs-number">589374</span>,<span class="hljs-number">281603</span>,<span class="hljs-number">917,224623</span>,<span class="hljs-number">712432</span>,<span class="hljs-number">118722</span>,<span class="hljs-number">746748</span>,<span class="hljs-number">264988</span>,<span class="hljs-number">825257</span>,<span class="hljs-number">634379</span>,<span class="hljs-number">771020</span>,<span class="hljs-number">357686</span>,<span class="hljs-number">380583</span>,<span class="hljs-number">315795</span>,<span class="hljs-number">943412</span>,<span class="hljs-number">400260</span>,<span class="hljs-number">592507</span>,<span class="hljs-number">494387</span>,<span class="hljs-number">579488</span>,<span class="hljs-number">448088</span>,<span class="hljs-number">181941</span>,<span class="hljs-number">949371</span>,<span class="hljs-number">909421</span>,<span class="hljs-number">8612</span>,<span class="hljs-number">486808</span>,<span class="hljs-number">931308</span>,<span class="hljs-number">913636</span>,<span class="hljs-number">495934</span>,<span class="hljs-number">603,558165</span>,<span class="hljs-number">47515</span>,<span class="hljs-number">720721</span>,<span class="hljs-number">620780</span>,<span class="hljs-number">936662</span>,<span class="hljs-number">803130,160556</span>,<span class="hljs-number">868039</span>,<span class="hljs-number">72573,3867</span>,<span class="hljs-number">669452</span>,<span class="hljs-number">115972</span>,<span class="hljs-number">978387</span>,<span class="hljs-number">307995</span>,<span class="hljs-number">704740</span>,<span class="hljs-number">361456</span>,<span class="hljs-number">925026</span>,<span class="hljs-number">965123,297222</span>,<span class="hljs-number">966715</span>,<span class="hljs-number">241999,552202</span>,<span class="hljs-number">672857</span>,<span class="hljs-number">303851</span>,<span class="hljs-number">942098</span>,<span class="hljs-number">16325</span>,<span class="hljs-number">492994</span>,<span class="hljs-number">598936</span>,<span class="hljs-number">353336</span>,<span class="hljs-number">459357</span>,<span class="hljs-number">723540</span>,<span class="hljs-number">783227</span>,<span class="hljs-number">956263</span>,<span class="hljs-number">411650</span>,<span class="hljs-number">934775</span>,<span class="hljs-number">203175</span>,<span class="hljs-number">994379</span>,<span class="hljs-number">13551,140654</span>,<span class="hljs-number">342221</span>,<span class="hljs-number">372036</span>,<span class="hljs-number">195501,317154</span>,<span class="hljs-number">647446</span>,<span class="hljs-number">791153</span>,<span class="hljs-number">980800</span>,<span class="hljs-number">273155</span>,<span class="hljs-number">839642</span>,<span class="hljs-number">418881</span>,<span class="hljs-number">965073</span>,<span class="hljs-number">762273</span>,<span class="hljs-number">547051</span>,<span class="hljs-number">785092</span>,<span class="hljs-number">190000,131861</span>,<span class="hljs-number">743947</span>,<span class="hljs-number">401364</span>,<span class="hljs-number">763628</span>,<span class="hljs-number">305518</span>,<span class="hljs-number">923697</span>,<span class="hljs-number">465951</span>,<span class="hljs-number">631582</span>,<span class="hljs-number">328784</span>,<span class="hljs-number">665284</span>,<span class="hljs-number">151487</span>,<span class="hljs-number">679969</span>,<span class="hljs-number">41349</span>,<span class="hljs-number">852916</span>,<span class="hljs-number">749702</span>,<span class="hljs-number">80142,518247</span>,<span class="hljs-number">991487</span>,<span class="hljs-number">993676</span>,<span class="hljs-number">52519,878154</span>,<span class="hljs-number">529954</span>,<span class="hljs-number">2349,213444</span>,<span class="hljs-number">19676</span>,<span class="hljs-number">860405</span>,<span class="hljs-number">331753</span>,<span class="hljs-number">455367</span>,<span class="hljs-number">185432</span>,<span class="hljs-number">595363</span>,<span class="hljs-number">440451</span>,<span class="hljs-number">727791</span>,<span class="hljs-number">124949,89259</span>,<span class="hljs-number">306262</span>,<span class="hljs-number">276698</span>,<span class="hljs-number">229646,220673</span>,<span class="hljs-number">942485</span>,<span class="hljs-number">161640</span>,<span class="hljs-number">742937</span>,<span class="hljs-number">924960</span>,<span class="hljs-number">310775</span>,<span class="hljs-number">249847</span>,<span class="hljs-number">954443</span>,<span class="hljs-number">473570</span>,<span class="hljs-number">70204,194252</span>,<span class="hljs-number">228286</span>,<span class="hljs-number">672606</span>,<span class="hljs-number">296969</span>,<span class="hljs-number">562994</span>,<span class="hljs-number">588384</span>,<span class="hljs-number">821765</span>,<span class="hljs-number">579077</span>,<span class="hljs-number">364393</span>,<span class="hljs-number">56025</span>,<span class="hljs-number">692814</span>,<span class="hljs-number">819218,164959</span>,<span class="hljs-number">962813</span>,<span class="hljs-number">8351</span>,<span class="hljs-number">949375</span>,<span class="hljs-number">917609</span>,<span class="hljs-number">508695</span>,<span class="hljs-number">213765,61566</span>,<span class="hljs-number">291726</span>,<span class="hljs-number">490425</span>,<span class="hljs-number">568155</span>,<span class="hljs-number">368856</span>,<span class="hljs-number">36342</span>,<span class="hljs-number">418992</span>,<span class="hljs-number">8653</span>,<span class="hljs-number">567270</span>,<span class="hljs-number">310612</span>,<span class="hljs-number">307726</span>,<span class="hljs-number">484530</span>,<span class="hljs-number">397339</span>,<span class="hljs-number">313111,413243</span>,<span class="hljs-number">540835</span>,<span class="hljs-number">581352</span>,<span class="hljs-number">47534</span>,<span class="hljs-number">622988</span>,<span class="hljs-number">467552</span>,<span class="hljs-number">546798</span>,<span class="hljs-number">16053,780240</span>,<span class="hljs-number">477922</span>,<span class="hljs-number">128823</span>,<span class="hljs-number">886634</span>,<span class="hljs-number">530119,556236</span>,<span class="hljs-number">244693,221555</span>,<span class="hljs-number">621597</span>,<span class="hljs-number">692058</span>,<span class="hljs-number">810802</span>,<span class="hljs-number">554585</span>,<span class="hljs-number">986761</span>,<span class="hljs-number">125677</span>,<span class="hljs-number">952795</span>,<span class="hljs-number">680852</span>,<span class="hljs-number">278153,164596</span>,<span class="hljs-number">519072</span>,<span class="hljs-number">259485</span>,<span class="hljs-number">8804,69837</span>,<span class="hljs-number">865984</span>,<span class="hljs-number">877882</span>,<span class="hljs-number">878137,116717</span>,<span class="hljs-number">928987</span>,<span class="hljs-number">885740</span>,<span class="hljs-number">745956</span>,<span class="hljs-number">54868,86922</span>,<span class="hljs-number">190338</span>,<span class="hljs-number">735914</span>,<span class="hljs-number">209441</span>,<span class="hljs-number">442294</span>,<span class="hljs-number">644449</span>,<span class="hljs-number">150431</span>,<span class="hljs-number">975710</span>,<span class="hljs-number">524794</span>,<span class="hljs-number">41073</span>,<span class="hljs-number">326949</span>,<span class="hljs-number">117506</span>,<span class="hljs-number">325312</span>,<span class="hljs-number">464414</span>,<span class="hljs-number">326643</span>,<span class="hljs-number">357374</span>,<span class="hljs-number">474892</span>,<span class="hljs-number">481412</span>,<span class="hljs-number">238754,949206</span>,<span class="hljs-number">123977</span>,<span class="hljs-number">573472</span>,<span class="hljs-number">592813</span>,<span class="hljs-number">152273,169779</span>,<span class="hljs-number">305259</span>,<span class="hljs-number">427149</span>,<span class="hljs-number">676521</span>,<span class="hljs-number">368013</span>,<span class="hljs-number">124312</span>,<span class="hljs-number">997304</span>,<span class="hljs-number">997827</span>,<span class="hljs-number">378218,522239</span>,<span class="hljs-number">505109</span>,<span class="hljs-number">662680</span>,<span class="hljs-number">515729</span>,<span class="hljs-number">737769</span>,<span class="hljs-number">831515</span>,<span class="hljs-number">112856,215620</span>,<span class="hljs-number">208078,167428</span>,<span class="hljs-number">977313</span>,<span class="hljs-number">782128</span>,<span class="hljs-number">909695</span>,<span class="hljs-number">7082,108416</span>,<span class="hljs-number">185576,155533</span>,<span class="hljs-number">171202</span>,<span class="hljs-number">864991</span>,<span class="hljs-number">131768</span>,<span class="hljs-number">944446</span>,<span class="hljs-number">821672</span>,<span class="hljs-number">510622</span>,<span class="hljs-number">979791</span>,<span class="hljs-number">953772</span>,<span class="hljs-number">333412</span>,<span class="hljs-number">900565</span>,<span class="hljs-number">352841</span>,<span class="hljs-number">847747</span>,<span class="hljs-number">837781</span>,<span class="hljs-number">39001,164900</span>,<span class="hljs-number">299419</span>,<span class="hljs-number">881986</span>,<span class="hljs-number">127894,178796</span>,<span class="hljs-number">777157</span>,<span class="hljs-number">333262</span>,<span class="hljs-number">585220</span>,<span class="hljs-number">313656</span>,<span class="hljs-number">273073</span>,<span class="hljs-number">96706</span>,<span class="hljs-number">616344</span>,<span class="hljs-number">271251</span>,<span class="hljs-number">815390</span>,<span class="hljs-number">273887</span>,<span class="hljs-number">431689</span>,<span class="hljs-number">758389</span>,<span class="hljs-number">1769,619253</span>,<span class="hljs-number">248649,981165</span>,<span class="hljs-number">606416</span>,<span class="hljs-number">181888</span>,<span class="hljs-number">880655</span>,<span class="hljs-number">200350</span>,<span class="hljs-number">965013</span>,<span class="hljs-number">270487</span>,<span class="hljs-number">305814</span>,<span class="hljs-number">27178,124969</span>,<span class="hljs-number">452599</span>,<span class="hljs-number">512991</span>,<span class="hljs-number">305460</span>,<span class="hljs-number">835077</span>,<span class="hljs-number">83372</span>,<span class="hljs-number">755787</span>,<span class="hljs-number">485919</span>,<span class="hljs-number">42276</span>,<span class="hljs-number">527611</span>,<span class="hljs-number">544853</span>,<span class="hljs-number">489394</span>,<span class="hljs-number">573799</span>,<span class="hljs-number">48484</span>,<span class="hljs-number">492550</span>,<span class="hljs-number">960760</span>,<span class="hljs-number">214242</span>,<span class="hljs-number">451423</span>,<span class="hljs-number">987915</span>,<span class="hljs-number">463234,773220</span>,<span class="hljs-number">145810</span>,<span class="hljs-number">638649</span>,<span class="hljs-number">540532</span>,<span class="hljs-number">441259</span>,<span class="hljs-number">382719</span>,<span class="hljs-number">698005</span>,<span class="hljs-number">317977</span>,<span class="hljs-number">976626</span>,<span class="hljs-number">592199</span>,<span class="hljs-number">788830</span>,<span class="hljs-number">987770</span>,<span class="hljs-number">291623</span>,<span class="hljs-number">739529</span>,<span class="hljs-number">660345</span>,<span class="hljs-number">938667</span>,<span class="hljs-number">67594,25460</span>,<span class="hljs-number">439829</span>,<span class="hljs-number">196445,192961</span>,<span class="hljs-number">404486</span>,<span class="hljs-number">703532</span>,<span class="hljs-number">957522</span>,<span class="hljs-number">864329</span>,<span class="hljs-number">488212,104980</span>,<span class="hljs-number">478587</span>,<span class="hljs-number">269007</span>,<span class="hljs-number">88741</span>,<span class="hljs-number">416617</span>,<span class="hljs-number">955007</span>,<span class="hljs-number">202587</span>,<span class="hljs-number">874526</span>,<span class="hljs-number">360666</span>,<span class="hljs-number">863798</span>,<span class="hljs-number">368014</span>,<span class="hljs-number">268746</span>,<span class="hljs-number">945029</span>,<span class="hljs-number">927135</span>,<span class="hljs-number">333984</span>,<span class="hljs-number">502225</span>,<span class="hljs-number">529971</span>,<span class="hljs-number">337973</span>,<span class="hljs-number">152269,74447</span>,<span class="hljs-number">985853</span>,<span class="hljs-number">425638</span>,<span class="hljs-number">191581</span>,<span class="hljs-number">415499</span>,<span class="hljs-number">268373</span>,<span class="hljs-number">739055</span>,<span class="hljs-number">762391</span>,<span class="hljs-number">71525,245774</span>,<span class="hljs-number">134864,51242</span>,<span class="hljs-number">280010</span>,<span class="hljs-number">588893</span>,<span class="hljs-number">341402</span>,<span class="hljs-number">226874</span>,<span class="hljs-number">701916</span>,<span class="hljs-number">778215,266157</span>,<span class="hljs-number">437762</span>,<span class="hljs-number">543835</span>,<span class="hljs-number">914133</span>,<span class="hljs-number">533844</span>,<span class="hljs-number">740050</span>,<span class="hljs-number">874357</span>,<span class="hljs-number">242473</span>,<span class="hljs-number">385010</span>,<span class="hljs-number">706940</span>,<span class="hljs-number">556090</span>,<span class="hljs-number">128518</span>,<span class="hljs-number">739448</span>,<span class="hljs-number">792895</span>,<span class="hljs-number">895569</span>,<span class="hljs-number">976074</span>,<span class="hljs-number">897992</span>,<span class="hljs-number">600164</span>,<span class="hljs-number">654374</span>,<span class="hljs-number">197781</span>,<span class="hljs-number">283770</span>,<span class="hljs-number">814498</span>,<span class="hljs-number">648582</span>,<span class="hljs-number">100034</span>,<span class="hljs-number">591767</span>,<span class="hljs-number">579438</span>,<span class="hljs-number">843759</span>,<span class="hljs-number">60640</span>,<span class="hljs-number">256990</span>,<span class="hljs-number">646960</span>,<span class="hljs-number">40462,160059</span>,<span class="hljs-number">183756,281191</span>,<span class="hljs-number">932120</span>,<span class="hljs-number">903371</span>,<span class="hljs-number">73298</span>,<span class="hljs-number">414671</span>,<span class="hljs-number">763831</span>,<span class="hljs-number">4713,77833</span>,<span class="hljs-number">437042</span>,<span class="hljs-number">834233</span>,<span class="hljs-number">870451</span>,<span class="hljs-number">325289</span>,<span class="hljs-number">204468</span>,<span class="hljs-number">885564</span>,<span class="hljs-number">548923</span>,<span class="hljs-number">309040</span>,<span class="hljs-number">404198</span>,<span class="hljs-number">410419</span>,<span class="hljs-number">388402</span>,<span class="hljs-number">274697</span>,<span class="hljs-number">143017</span>,<span class="hljs-number">351474</span>,<span class="hljs-number">71755</span>,<span class="hljs-number">966297</span>,<span class="hljs-number">257641</span>,<span class="hljs-number">66442,2630</span>,<span class="hljs-number">977980</span>,<span class="hljs-number">442474</span>,<span class="hljs-number">847244</span>,<span class="hljs-number">500339</span>,<span class="hljs-number">798800</span>,<span class="hljs-number">854673</span>,<span class="hljs-number">535288</span>,<span class="hljs-number">98062</span>,<span class="hljs-number">272948</span>,<span class="hljs-number">934722</span>,<span class="hljs-number">475362</span>,<span class="hljs-number">895652</span>,<span class="hljs-number">937253</span>,<span class="hljs-number">673301</span>,<span class="hljs-number">936654</span>,<span class="hljs-number">403495</span>,<span class="hljs-number">644050</span>,<span class="hljs-number">748806</span>,<span class="hljs-number">138989</span>,<span class="hljs-number">848843</span>,<span class="hljs-number">650352</span>,<span class="hljs-number">730081</span>,<span class="hljs-number">53707</span>,<span class="hljs-number">291546</span>,<span class="hljs-number">872326</span>,<span class="hljs-number">889821</span>,<span class="hljs-number">599917</span>,<span class="hljs-number">871995</span>,<span class="hljs-number">88756</span>,<span class="hljs-number">969786</span>,<span class="hljs-number">862807</span>,<span class="hljs-number">80883</span>,<span class="hljs-number">364533</span>,<span class="hljs-number">111670</span>,<span class="hljs-number">310534</span>,<span class="hljs-number">271167</span>,<span class="hljs-number">536529</span>,<span class="hljs-number">598944</span>,<span class="hljs-number">692888</span>,<span class="hljs-number">525646</span>,<span class="hljs-number">99803,488145</span>,<span class="hljs-number">17013,762177</span>,<span class="hljs-number">34358</span>,<span class="hljs-number">283391</span>,<span class="hljs-number">659994</span>,<span class="hljs-number">33071</span>,<span class="hljs-number">369860</span>,<span class="hljs-number">512381</span>,<span class="hljs-number">647203</span>,<span class="hljs-number">391695</span>,<span class="hljs-number">921982</span>,<span class="hljs-number">889580</span>,<span class="hljs-number">38283</span>,<span class="hljs-number">295605</span>,<span class="hljs-number">968947</span>,<span class="hljs-number">239866,82741</span>,<span class="hljs-number">826458</span>,<span class="hljs-number">205194</span>,<span class="hljs-number">273055</span>,<span class="hljs-number">780039</span>,<span class="hljs-number">253968</span>,<span class="hljs-number">499349</span>,<span class="hljs-number">532470</span>,<span class="hljs-number">199402,5825</span>,<span class="hljs-number">211114</span>,<span class="hljs-number">530513</span>,<span class="hljs-number">109825</span>,<span class="hljs-number">901070</span>,<span class="hljs-number">462030</span>,<span class="hljs-number">407741</span>,<span class="hljs-number">255242,78669</span>,<span class="hljs-number">108340</span>,<span class="hljs-number">337679</span>,<span class="hljs-number">960804</span>,<span class="hljs-number">356226</span>,<span class="hljs-number">701677</span>,<span class="hljs-number">332062</span>,<span class="hljs-number">902243</span>,<span class="hljs-number">485516</span>,<span class="hljs-number">220568,104886</span>,<span class="hljs-number">895089</span>,<span class="hljs-number">719513</span>,<span class="hljs-number">931161,95887</span>,<span class="hljs-number">98592</span>,<span class="hljs-number">702289</span>,<span class="hljs-number">717281</span>,<span class="hljs-number">416464</span>,<span class="hljs-number">182518,155812</span>,<span class="hljs-number">890227,157096</span>,<span class="hljs-number">499833</span>,<span class="hljs-number">866887</span>,<span class="hljs-number">701155,757119</span>,<span class="hljs-number">23522</span>,<span class="hljs-number">300827</span>,<span class="hljs-number">768752</span>,<span class="hljs-number">443560</span>,<span class="hljs-number">616101</span>,<span class="hljs-number">385845</span>,<span class="hljs-number">306332</span>,<span class="hljs-number">957064</span>,<span class="hljs-number">832948</span>,<span class="hljs-number">610586</span>,<span class="hljs-number">858154</span>,<span class="hljs-number">448586</span>,<span class="hljs-number">157021,97414</span>,<span class="hljs-number">842834</span>,<span class="hljs-number">352967</span>,<span class="hljs-number">316046</span>,<span class="hljs-number">764931</span>,<span class="hljs-number">44685</span>,<span class="hljs-number">991278</span>,<span class="hljs-number">846098</span>,<span class="hljs-number">72829</span>,<span class="hljs-number">864474</span>,<span class="hljs-number">545917</span>,<span class="hljs-number">519479</span>,<span class="hljs-number">847624</span>,<span class="hljs-number">964604</span>,<span class="hljs-number">936514</span>,<span class="hljs-number">142804,249078</span>,<span class="hljs-number">29914</span>,<span class="hljs-number">494591</span>,<span class="hljs-number">120209,473143</span>,<span class="hljs-number">694904</span>,<span class="hljs-number">887767</span>,<span class="hljs-number">315377</span>,<span class="hljs-number">910788</span>,<span class="hljs-number">622688</span>,<span class="hljs-number">181443</span>,<span class="hljs-number">899656</span>,<span class="hljs-number">297422</span>,<span class="hljs-number">262186</span>,<span class="hljs-number">504640</span>,<span class="hljs-number">813323</span>,<span class="hljs-number">552631</span>,<span class="hljs-number">280292</span>,<span class="hljs-number">506617</span>,<span class="hljs-number">738345</span>,<span class="hljs-number">133984,249257</span>,<span class="hljs-number">648504</span>,<span class="hljs-number">542019</span>,<span class="hljs-number">385922</span>,<span class="hljs-number">616068</span>,<span class="hljs-number">373741</span>,<span class="hljs-number">226613</span>,<span class="hljs-number">890606</span>,<span class="hljs-number">869983</span>,<span class="hljs-number">483492</span>,<span class="hljs-number">859105,47998</span>,<span class="hljs-number">550111</span>,<span class="hljs-number">500819</span>,<span class="hljs-number">92154</span>,<span class="hljs-number">659468</span>,<span class="hljs-number">360847</span>,<span class="hljs-number">694965</span>,<span class="hljs-number">822391</span>,<span class="hljs-number">603091</span>,<span class="hljs-number">463675</span>,<span class="hljs-number">538000</span>,<span class="hljs-number">762227</span>,<span class="hljs-number">472477</span>,<span class="hljs-number">734103,527216</span>,<span class="hljs-number">156169</span>,<span class="hljs-number">399648</span>,<span class="hljs-number">631991</span>,<span class="hljs-number">83781</span>,<span class="hljs-number">395642</span>,<span class="hljs-number">587395</span>,<span class="hljs-number">307752</span>,<span class="hljs-number">70495</span>,<span class="hljs-number">761355</span>,<span class="hljs-number">834751</span>,<span class="hljs-number">497051</span>,<span class="hljs-number">424449</span>,<span class="hljs-number">106535</span>,<span class="hljs-number">615874</span>,<span class="hljs-number">158979</span>,<span class="hljs-number">666047</span>,<span class="hljs-number">429743</span>,<span class="hljs-number">2209,619175</span>,<span class="hljs-number">659602</span>,<span class="hljs-number">740768</span>,<span class="hljs-number">889559</span>,<span class="hljs-number">680516</span>,<span class="hljs-number">823146</span>,<span class="hljs-number">638694</span>,<span class="hljs-number">515470</span>,<span class="hljs-number">79024,102759</span>,<span class="hljs-number">176084</span>,<span class="hljs-number">720381</span>,<span class="hljs-number">450342</span>,<span class="hljs-number">770893</span>,<span class="hljs-number">622234,25283</span>,<span class="hljs-number">506103</span>,<span class="hljs-number">975958</span>,<span class="hljs-number">717071</span>,<span class="hljs-number">749893</span>,<span class="hljs-number">390081</span>,<span class="hljs-number">911194,172219</span>,<span class="hljs-number">999338</span>,<span class="hljs-number">637643</span>,<span class="hljs-number">928348</span>,<span class="hljs-number">207881,68196</span>,<span class="hljs-number">772819</span>,<span class="hljs-number">942140</span>,<span class="hljs-number">744056</span>,<span class="hljs-number">616318</span>,<span class="hljs-number">683358</span>,<span class="hljs-number">517188</span>,<span class="hljs-number">525373</span>,<span class="hljs-number">878671</span>,<span class="hljs-number">973586</span>,<span class="hljs-number">732532</span>,<span class="hljs-number">893521</span>,<span class="hljs-number">255025,68169</span>,<span class="hljs-number">764453</span>,<span class="hljs-number">748405</span>,<span class="hljs-number">48303</span>,<span class="hljs-number">360784</span>,<span class="hljs-number">451874</span>,<span class="hljs-number">994001</span>,<span class="hljs-number">759875</span>,<span class="hljs-number">396761</span>,<span class="hljs-number">356730</span>,<span class="hljs-number">564398</span>,<span class="hljs-number">903411</span>,<span class="hljs-number">42965</span>,<span class="hljs-number">358941</span>,<span class="hljs-number">637343</span>,<span class="hljs-number">537633</span>,<span class="hljs-number">241137,194807</span>,<span class="hljs-number">70408</span>,<span class="hljs-number">670985</span>,<span class="hljs-number">662013</span>,<span class="hljs-number">845816</span>,<span class="hljs-number">105390,657202</span>,<span class="hljs-number">545005</span>,<span class="hljs-number">895523</span>,<span class="hljs-number">63973</span>,<span class="hljs-number">959933</span>,<span class="hljs-number">701549</span>,<span class="hljs-number">530947</span>,<span class="hljs-number">61626,157857</span>,<span class="hljs-number">786259</span>,<span class="hljs-number">206568</span>,<span class="hljs-number">534641</span>,<span class="hljs-number">776564</span>,<span class="hljs-number">143916</span>,<span class="hljs-number">466844</span>,<span class="hljs-number">778727</span>,<span class="hljs-number">618490</span>,<span class="hljs-number">431340</span>,<span class="hljs-number">791300</span>,<span class="hljs-number">739399</span>,<span class="hljs-number">569880</span>,<span class="hljs-number">360808</span>,<span class="hljs-number">994730</span>,<span class="hljs-number">41591</span>,<span class="hljs-number">947986</span>,<span class="hljs-number">133142</span>,<span class="hljs-number">505978</span>,<span class="hljs-number">136408</span>,<span class="hljs-number">499730</span>,<span class="hljs-number">964568</span>,<span class="hljs-number">819852</span>,<span class="hljs-number">115609</span>,<span class="hljs-number">769678</span>,<span class="hljs-number">612624</span>,<span class="hljs-number">455661</span>,<span class="hljs-number">406322</span>,<span class="hljs-number">455160</span>,<span class="hljs-number">819683</span>,<span class="hljs-number">386511</span>,<span class="hljs-number">693523</span>,<span class="hljs-number">489411</span>,<span class="hljs-number">994884</span>,<span class="hljs-number">949986</span>,<span class="hljs-number">600856</span>,<span class="hljs-number">639650</span>,<span class="hljs-number">440754</span>,<span class="hljs-number">100545</span>,<span class="hljs-number">764923</span>,<span class="hljs-number">898797</span>,<span class="hljs-number">851607</span>,<span class="hljs-number">562669</span>,<span class="hljs-number">449219</span>,<span class="hljs-number">658057</span>,<span class="hljs-number">696734</span>,<span class="hljs-number">892438</span>,<span class="hljs-number">302277</span>,<span class="hljs-number">729194</span>,<span class="hljs-number">784936</span>,<span class="hljs-number">268843</span>,<span class="hljs-number">770878</span>,<span class="hljs-number">682823</span>,<span class="hljs-number">327371</span>,<span class="hljs-number">230771</span>,<span class="hljs-number">821880</span>,<span class="hljs-number">75821,132518</span>,<span class="hljs-number">718494</span>,<span class="hljs-number">765710</span>,<span class="hljs-number">394926</span>,<span class="hljs-number">692127</span>,<span class="hljs-number">973865</span>,<span class="hljs-number">979682</span>,<span class="hljs-number">112981</span>,<span class="hljs-number">491766</span>,<span class="hljs-number">49275,918115</span>,<span class="hljs-number">481580</span>,<span class="hljs-number">932591</span>,<span class="hljs-number">877940</span>,<span class="hljs-number">996231</span>,<span class="hljs-number">661541</span>,<span class="hljs-number">441301</span>,<span class="hljs-number">937251,115050</span>,<span class="hljs-number">641195</span>,<span class="hljs-number">942038</span>,<span class="hljs-number">662056</span>,<span class="hljs-number">922349</span>,<span class="hljs-number">627868</span>,<span class="hljs-number">794458</span>,<span class="hljs-number">778082</span>,<span class="hljs-number">361731</span>,<span class="hljs-number">18358</span>,<span class="hljs-number">404603</span>,<span class="hljs-number">2727</span>,<span class="hljs-number">969412</span>,<span class="hljs-number">339685</span>,<span class="hljs-number">894690</span>,<span class="hljs-number">793717</span>,<span class="hljs-number">706702</span>,<span class="hljs-number">667045</span>,<span class="hljs-number">508135</span>,<span class="hljs-number">410742</span>,<span class="hljs-number">21537,438235</span>,<span class="hljs-number">414094</span>,<span class="hljs-number">694580</span>,<span class="hljs-number">360678</span>,<span class="hljs-number">489843</span>,<span class="hljs-number">658522</span>,<span class="hljs-number">453121</span>,<span class="hljs-number">529485</span>,<span class="hljs-number">784009</span>,<span class="hljs-number">29377,102280</span>,<span class="hljs-number">851573</span>,<span class="hljs-number">476831</span>,<span class="hljs-number">702553</span>,<span class="hljs-number">41743</span>,<span class="hljs-number">880047</span>,<span class="hljs-number">735385</span>,<span class="hljs-number">551456</span>,<span class="hljs-number">152528</span>,<span class="hljs-number">585954</span>,<span class="hljs-number">895331</span>,<span class="hljs-number">984138</span>,<span class="hljs-number">962059</span>,<span class="hljs-number">405225</span>,<span class="hljs-number">724580</span>,<span class="hljs-number">142714</span>,<span class="hljs-number">690646</span>,<span class="hljs-number">20115,140989</span>,<span class="hljs-number">743974</span>,<span class="hljs-number">278050</span>,<span class="hljs-number">647388</span>,<span class="hljs-number">833949</span>,<span class="hljs-number">684397</span>,<span class="hljs-number">758971</span>,<span class="hljs-number">509038</span>,<span class="hljs-number">736987</span>,<span class="hljs-number">420011</span>,<span class="hljs-number">557962</span>,<span class="hljs-number">33137,243121</span>,<span class="hljs-number">170820,188702</span>,<span class="hljs-number">568675</span>,<span class="hljs-number">54575,105544</span>,<span class="hljs-number">689132</span>,<span class="hljs-number">560486</span>,<span class="hljs-number">567574</span>,<span class="hljs-number">597581</span>,<span class="hljs-number">564874</span>,<span class="hljs-number">942583</span>,<span class="hljs-number">748941</span>,<span class="hljs-number">802382</span>,<span class="hljs-number">819886</span>,<span class="hljs-number">777585</span>,<span class="hljs-number">833901</span>,<span class="hljs-number">293490</span>,<span class="hljs-number">900820</span>,<span class="hljs-number">901869</span>,<span class="hljs-number">228547</span>,<span class="hljs-number">963740</span>,<span class="hljs-number">629782</span>,<span class="hljs-number">985992</span>,<span class="hljs-number">620677</span>,<span class="hljs-number">659612</span>,<span class="hljs-number">439414</span>,<span class="hljs-number">45229</span>,<span class="hljs-number">741885</span>,<span class="hljs-number">887782</span>,<span class="hljs-number">331136,761217</span>,<span class="hljs-number">241826</span>,<span class="hljs-number">739564</span>,<span class="hljs-number">526878</span>,<span class="hljs-number">312079</span>,<span class="hljs-number">226230</span>,<span class="hljs-number">821074</span>,<span class="hljs-number">341684</span>,<span class="hljs-number">765224</span>,<span class="hljs-number">655355</span>,<span class="hljs-number">999840</span>,<span class="hljs-number">975567</span>,<span class="hljs-number">322683</span>,<span class="hljs-number">667089</span>,<span class="hljs-number">712679</span>,<span class="hljs-number">499176,34697</span>,<span class="hljs-number">357264</span>,<span class="hljs-number">721758</span>,<span class="hljs-number">151288</span>,<span class="hljs-number">278809</span>,<span class="hljs-number">829840</span>,<span class="hljs-number">432941</span>,<span class="hljs-number">375315</span>,<span class="hljs-number">914121</span>,<span class="hljs-number">794842</span>,<span class="hljs-number">460921</span>,<span class="hljs-number">890478</span>,<span class="hljs-number">965935</span>,<span class="hljs-number">585823</span>,<span class="hljs-number">500812</span>,<span class="hljs-number">993535</span>,<span class="hljs-number">155139</span>,<span class="hljs-number">509996</span>,<span class="hljs-number">506062</span>,<span class="hljs-number">359360</span>,<span class="hljs-number">817254,102471</span>,<span class="hljs-number">529888</span>,<span class="hljs-number">970569</span>,<span class="hljs-number">576046</span>,<span class="hljs-number">39787,10492</span>,<span class="hljs-number">594685</span>,<span class="hljs-number">53714</span>,<span class="hljs-number">970688</span>,<span class="hljs-number">102564,83315</span>,<span class="hljs-number">186638,101817</span>,<span class="hljs-number">567768</span>,<span class="hljs-number">849518</span>,<span class="hljs-number">76383</span>,<span class="hljs-number">311520</span>,<span class="hljs-number">290414</span>,<span class="hljs-number">908524</span>,<span class="hljs-number">656338</span>,<span class="hljs-number">770561</span>,<span class="hljs-number">555909</span>,<span class="hljs-number">611049</span>,<span class="hljs-number">371890</span>,<span class="hljs-number">570454</span>,<span class="hljs-number">217717</span>,<span class="hljs-number">329081</span>,<span class="hljs-number">178228</span>,<span class="hljs-number">879618</span>,<span class="hljs-number">989074</span>,<span class="hljs-number">231432</span>,<span class="hljs-number">869270</span>,<span class="hljs-number">689799</span>,<span class="hljs-number">360433</span>,<span class="hljs-number">116990</span>,<span class="hljs-number">896363</span>,<span class="hljs-number">625208,215443</span>,<span class="hljs-number">68743,363203</span>,<span class="hljs-number">653474</span>,<span class="hljs-number">877974</span>,<span class="hljs-number">222737</span>,<span class="hljs-number">625581</span>,<span class="hljs-number">875969</span>,<span class="hljs-number">966998</span>,<span class="hljs-number">130464</span>,<span class="hljs-number">824042</span>,<span class="hljs-number">33405</span>,<span class="hljs-number">727716</span>,<span class="hljs-number">525627</span>,<span class="hljs-number">648883</span>,<span class="hljs-number">261367</span>,<span class="hljs-number">725282</span>,<span class="hljs-number">745218</span>,<span class="hljs-number">864457</span>,<span class="hljs-number">880251</span>,<span class="hljs-number">530646</span>,<span class="hljs-number">903051</span>,<span class="hljs-number">344774</span>,<span class="hljs-number">728926</span>,<span class="hljs-number">271763</span>,<span class="hljs-number">290178</span>,<span class="hljs-number">720782</span>,<span class="hljs-number">505154</span>,<span class="hljs-number">539993</span>,<span class="hljs-number">322317</span>,<span class="hljs-number">169586,750221</span>,<span class="hljs-number">720249</span>,<span class="hljs-number">653702</span>,<span class="hljs-number">50862,179595</span>,<span class="hljs-number">92833</span>,<span class="hljs-number">426010</span>,<span class="hljs-number">995395</span>,<span class="hljs-number">163610,9545</span>,<span class="hljs-number">80517</span>,<span class="hljs-number">511453</span>,<span class="hljs-number">76585</span>,<span class="hljs-number">594693</span>,<span class="hljs-number">369616</span>,<span class="hljs-number">445401</span>,<span class="hljs-number">433151,202147</span>,<span class="hljs-number">879875</span>,<span class="hljs-number">605038</span>,<span class="hljs-number">911648</span>,<span class="hljs-number">315265</span>,<span class="hljs-number">284449</span>,<span class="hljs-number">70590,564182</span>,<span class="hljs-number">753395</span>,<span class="hljs-number">133099,92640</span>,<span class="hljs-number">472766</span>,<span class="hljs-number">802533</span>,<span class="hljs-number">94066,93050</span>,<span class="hljs-number">862433</span>,<span class="hljs-number">128375,12447</span>,<span class="hljs-number">24942,199250</span>,<span class="hljs-number">421960</span>,<span class="hljs-number">625440</span>,<span class="hljs-number">610620</span>,<span class="hljs-number">197443</span>,<span class="hljs-number">419031</span>,<span class="hljs-number">722414</span>,<span class="hljs-number">100456</span>,<span class="hljs-number">485703</span>,<span class="hljs-number">419838</span>,<span class="hljs-number">956023</span>,<span class="hljs-number">958882</span>,<span class="hljs-number">841686</span>,<span class="hljs-number">435205</span>,<span class="hljs-number">947425</span>,<span class="hljs-number">989969</span>,<span class="hljs-number">958384</span>,<span class="hljs-number">296656</span>,<span class="hljs-number">597648</span>,<span class="hljs-number">678992</span>,<span class="hljs-number">178851,320241</span>,<span class="hljs-number">866796</span>,<span class="hljs-number">966262</span>,<span class="hljs-number">715427</span>,<span class="hljs-number">247065</span>,<span class="hljs-number">494294</span>,<span class="hljs-number">769285</span>,<span class="hljs-number">318264</span>,<span class="hljs-number">780857</span>,<span class="hljs-number">456222,82945</span>,<span class="hljs-number">125743</span>,<span class="hljs-number">953875</span>,<span class="hljs-number">708311</span>,<span class="hljs-number">941798</span>,<span class="hljs-number">211162</span>,<span class="hljs-number">413713</span>,<span class="hljs-number">653838</span>,<span class="hljs-number">574669</span>,<span class="hljs-number">813174</span>,<span class="hljs-number">896404</span>,<span class="hljs-number">777940</span>,<span class="hljs-number">358445</span>,<span class="hljs-number">710338</span>,<span class="hljs-number">442031</span>,<span class="hljs-number">583926</span>,<span class="hljs-number">994642</span>,<span class="hljs-number">382324</span>,<span class="hljs-number">241767</span>,<span class="hljs-number">429278</span>,<span class="hljs-number">161804</span>,<span class="hljs-number">553441</span>,<span class="hljs-number">680428</span>,<span class="hljs-number">915472</span>,<span class="hljs-number">354428</span>,<span class="hljs-number">330251,949116</span>,<span class="hljs-number">92777</span>,<span class="hljs-number">993738</span>,<span class="hljs-number">411401</span>,<span class="hljs-number">393817</span>,<span class="hljs-number">842710</span>,<span class="hljs-number">264605</span>,<span class="hljs-number">423510</span>,<span class="hljs-number">469547</span>,<span class="hljs-number">634759</span>,<span class="hljs-number">160464,197302</span>,<span class="hljs-number">421605</span>,<span class="hljs-number">698439</span>,<span class="hljs-number">771471</span>,<span class="hljs-number">365743</span>,<span class="hljs-number">147610</span>,<span class="hljs-number">911013</span>,<span class="hljs-number">893992</span>,<span class="hljs-number">670597</span>,<span class="hljs-number">795217</span>,<span class="hljs-number">607441</span>,<span class="hljs-number">396327</span>,<span class="hljs-number">65531,145770</span>,<span class="hljs-number">70388</span>,<span class="hljs-number">720735</span>,<span class="hljs-number">328846</span>,<span class="hljs-number">508932</span>,<span class="hljs-number">11917,218722</span>,<span class="hljs-number">248336,175998</span>,<span class="hljs-number">831299</span>,<span class="hljs-number">169520</span>,<span class="hljs-number">814346</span>,<span class="hljs-number">429929</span>,<span class="hljs-number">881782</span>,<span class="hljs-number">704112</span>,<span class="hljs-number">954799</span>,<span class="hljs-number">784527</span>,<span class="hljs-number">552015</span>,<span class="hljs-number">585158</span>,<span class="hljs-number">309869</span>,<span class="hljs-number">416881</span>,<span class="hljs-number">580984</span>,<span class="hljs-number">734248,428180</span>,<span class="hljs-number">641300</span>,<span class="hljs-number">740628</span>,<span class="hljs-number">871659</span>,<span class="hljs-number">584917</span>,<span class="hljs-number">731646</span>,<span class="hljs-number">828436</span>,<span class="hljs-number">15341</span>,<span class="hljs-number">408594</span>,<span class="hljs-number">915765</span>,<span class="hljs-number">147299,235082</span>,<span class="hljs-number">754033</span>,<span class="hljs-number">687468</span>,<span class="hljs-number">378845</span>,<span class="hljs-number">655030</span>,<span class="hljs-number">3197,747155</span>,<span class="hljs-number">106008</span>,<span class="hljs-number">963554</span>,<span class="hljs-number">974050</span>,<span class="hljs-number">492958</span>,<span class="hljs-number">141620</span>,<span class="hljs-number">693268</span>,<span class="hljs-number">369145</span>,<span class="hljs-number">500573</span>,<span class="hljs-number">164350</span>,<span class="hljs-number">813422</span>,<span class="hljs-number">304084</span>,<span class="hljs-number">839721</span>,<span class="hljs-number">841855</span>,<span class="hljs-number">813789</span>,<span class="hljs-number">472028</span>,<span class="hljs-number">462608</span>,<span class="hljs-number">348137,210911</span>,<span class="hljs-number">383089</span>,<span class="hljs-number">249182</span>,<span class="hljs-number">773567</span>,<span class="hljs-number">699676</span>,<span class="hljs-number">864279</span>,<span class="hljs-number">580267</span>,<span class="hljs-number">943127</span>,<span class="hljs-number">491580</span>,<span class="hljs-number">192492,591124</span>,<span class="hljs-number">699066</span>,<span class="hljs-number">745894</span>,<span class="hljs-number">141624</span>,<span class="hljs-number">626763</span>,<span class="hljs-number">960822</span>,<span class="hljs-number">699830</span>,<span class="hljs-number">262481</span>,<span class="hljs-number">266514</span>,<span class="hljs-number">514589</span>,<span class="hljs-number">547672</span>,<span class="hljs-number">387757</span>,<span class="hljs-number">806089</span>,<span class="hljs-number">536772</span>,<span class="hljs-number">755456</span>,<span class="hljs-number">461998</span>,<span class="hljs-number">254781</span>,<span class="hljs-number">966995</span>,<span class="hljs-number">889482</span>,<span class="hljs-number">441408</span>,<span class="hljs-number">58601</span>,<span class="hljs-number">343863</span>,<span class="hljs-number">655552</span>,<span class="hljs-number">99128</span>,<span class="hljs-number">337901</span>,<span class="hljs-number">502691</span>,<span class="hljs-number">634500</span>,<span class="hljs-number">869585</span>,<span class="hljs-number">684080</span>,<span class="hljs-number">53631,6494</span>,<span class="hljs-number">338840</span>,<span class="hljs-number">364471</span>,<span class="hljs-number">511628</span>,<span class="hljs-number">793599</span>,<span class="hljs-number">694384</span>,<span class="hljs-number">932576</span>,<span class="hljs-number">881832</span>,<span class="hljs-number">913903</span>,<span class="hljs-number">543806</span>,<span class="hljs-number">628236</span>,<span class="hljs-number">318960</span>,<span class="hljs-number">162877</span>,<span class="hljs-number">360994</span>,<span class="hljs-number">613790</span>,<span class="hljs-number">459879</span>,<span class="hljs-number">404837</span>,<span class="hljs-number">64086</span>,<span class="hljs-number">596718</span>,<span class="hljs-number">207921</span>,<span class="hljs-number">401911</span>,<span class="hljs-number">577727</span>,<span class="hljs-number">284023</span>,<span class="hljs-number">301199,210114</span>,<span class="hljs-number">392689</span>,<span class="hljs-number">185386</span>,<span class="hljs-number">876410</span>,<span class="hljs-number">350485</span>,<span class="hljs-number">964635</span>,<span class="hljs-number">129439</span>,<span class="hljs-number">867344</span>,<span class="hljs-number">38116</span>,<span class="hljs-number">473870</span>,<span class="hljs-number">559844</span>,<span class="hljs-number">804337</span>,<span class="hljs-number">636086</span>,<span class="hljs-number">164590,960115</span>,<span class="hljs-number">912611</span>,<span class="hljs-number">739793</span>,<span class="hljs-number">958775</span>,<span class="hljs-number">617625</span>,<span class="hljs-number">498114</span>,<span class="hljs-number">492435</span>,<span class="hljs-number">652878</span>,<span class="hljs-number">216338</span>,<span class="hljs-number">765990</span>,<span class="hljs-number">694300</span>,<span class="hljs-number">254125,68333</span>,<span class="hljs-number">653280</span>,<span class="hljs-number">517202</span>,<span class="hljs-number">769915</span>,<span class="hljs-number">264350</span>,<span class="hljs-number">502147</span>,<span class="hljs-number">866068</span>,<span class="hljs-number">28675</span>,<span class="hljs-number">867017</span>,<span class="hljs-number">284367</span>,<span class="hljs-number">558690</span>,<span class="hljs-number">659976</span>,<span class="hljs-number">845331</span>,<span class="hljs-number">583732</span>,<span class="hljs-number">922928</span>,<span class="hljs-number">409984</span>,<span class="hljs-number">309747</span>,<span class="hljs-number">596235,209669</span>,<span class="hljs-number">32624</span>,<span class="hljs-number">823718</span>,<span class="hljs-number">33609</span>,<span class="hljs-number">655005</span>,<span class="hljs-number">194539,322190</span>,<span class="hljs-number">127227</span>,<span class="hljs-number">870465</span>,<span class="hljs-number">857175,71981</span>,<span class="hljs-number">64877</span>,<span class="hljs-number">401795</span>,<span class="hljs-number">580331</span>,<span class="hljs-number">83207,15634</span>,<span class="hljs-number">449198</span>,<span class="hljs-number">440613</span>,<span class="hljs-number">67212</span>,<span class="hljs-number">517272</span>,<span class="hljs-number">234554</span>,<span class="hljs-number">557048</span>,<span class="hljs-number">200047</span>,<span class="hljs-number">879032</span>,<span class="hljs-number">190391</span>,<span class="hljs-number">974461</span>,<span class="hljs-number">807875</span>,<span class="hljs-number">583097</span>,<span class="hljs-number">916161</span>,<span class="hljs-number">772973</span>,<span class="hljs-number">981084</span>,<span class="hljs-number">254366</span>,<span class="hljs-number">292824</span>,<span class="hljs-number">40234,975222</span>,<span class="hljs-number">79395</span>,<span class="hljs-number">753932</span>,<span class="hljs-number">488312</span>,<span class="hljs-number">635928</span>,<span class="hljs-number">969227,80192</span>,<span class="hljs-number">813473</span>,<span class="hljs-number">738146,301231</span>,<span class="hljs-number">557195</span>,<span class="hljs-number">592631</span>,<span class="hljs-number">650168,17654</span>,<span class="hljs-number">316838</span>,<span class="hljs-number">231043,86123</span>,<span class="hljs-number">770035</span>,<span class="hljs-number">211861</span>,<span class="hljs-number">548854</span>,<span class="hljs-number">29055,49905</span>,<span class="hljs-number">671686</span>,<span class="hljs-number">41669</span>,<span class="hljs-number">478540</span>,<span class="hljs-number">227105</span>,<span class="hljs-number">489269</span>,<span class="hljs-number">289710</span>,<span class="hljs-number">729206,350150</span>,<span class="hljs-number">684714</span>,<span class="hljs-number">613407</span>,<span class="hljs-number">568079</span>,<span class="hljs-number">772239</span>,<span class="hljs-number">339691</span>,<span class="hljs-number">375291</span>,<span class="hljs-number">140816</span>,<span class="hljs-number">770015</span>,<span class="hljs-number">863814</span>,<span class="hljs-number">831058</span>,<span class="hljs-number">539884</span>,<span class="hljs-number">683849</span>,<span class="hljs-number">735618</span>,<span class="hljs-number">357141</span>,<span class="hljs-number">260841</span>,<span class="hljs-number">476666</span>,<span class="hljs-number">462405</span>,<span class="hljs-number">135976,197329</span>,<span class="hljs-number">572429</span>,<span class="hljs-number">207492</span>,<span class="hljs-number">780725</span>,<span class="hljs-number">872489</span>,<span class="hljs-number">910913</span>,<span class="hljs-number">759883</span>,<span class="hljs-number">998898</span>,<span class="hljs-number">248617,176033</span>,<span class="hljs-number">77763</span>,<span class="hljs-number">960802</span>,<span class="hljs-number">639218</span>,<span class="hljs-number">279853</span>,<span class="hljs-number">711911</span>,<span class="hljs-number">910976</span>,<span class="hljs-number">184430,104797</span>,<span class="hljs-number">51668,704211</span>,<span class="hljs-number">920218</span>,<span class="hljs-number">319843</span>,<span class="hljs-number">198211,123155</span>,<span class="hljs-number">927162</span>,<span class="hljs-number">705850</span>,<span class="hljs-number">165488</span>,<span class="hljs-number">783481</span>,<span class="hljs-number">145239</span>,<span class="hljs-number">604960</span>,<span class="hljs-number">789154</span>,<span class="hljs-number">821463</span>,<span class="hljs-number">460744</span>,<span class="hljs-number">302425</span>,<span class="hljs-number">546945</span>,<span class="hljs-number">574733</span>,<span class="hljs-number">825258</span>,<span class="hljs-number">675498</span>,<span class="hljs-number">299087</span>,<span class="hljs-number">491760</span>,<span class="hljs-number">17516</span>,<span class="hljs-number">951541</span>,<span class="hljs-number">568357</span>,<span class="hljs-number">847324</span>,<span class="hljs-number">466517</span>,<span class="hljs-number">92965</span>,<span class="hljs-number">646288</span>,<span class="hljs-number">548719</span>,<span class="hljs-number">277919</span>,<span class="hljs-number">972766</span>,<span class="hljs-number">333740</span>,<span class="hljs-number">426672</span>,<span class="hljs-number">565738</span>,<span class="hljs-number">433342</span>,<span class="hljs-number">526954</span>,<span class="hljs-number">474964</span>,<span class="hljs-number">83653</span>,<span class="hljs-number">378746</span>,<span class="hljs-number">625790</span>,<span class="hljs-number">231935</span>,<span class="hljs-number">912042</span>,<span class="hljs-number">532701</span>,<span class="hljs-number">777327</span>,<span class="hljs-number">812418</span>,<span class="hljs-number">984876</span>,<span class="hljs-number">761427</span>,<span class="hljs-number">412136,725218</span>,<span class="hljs-number">205012</span>,<span class="hljs-number">296526</span>,<span class="hljs-number">473856</span>,<span class="hljs-number">469459</span>,<span class="hljs-number">693274</span>,<span class="hljs-number">566779</span>,<span class="hljs-number">853271</span>,<span class="hljs-number">492891</span>,<span class="hljs-number">347936</span>,<span class="hljs-number">644844</span>,<span class="hljs-number">349377</span>,<span class="hljs-number">53257</span>,<span class="hljs-number">489546</span>,<span class="hljs-number">970921</span>,<span class="hljs-number">526209</span>,<span class="hljs-number">421526</span>,<span class="hljs-number">693935</span>,<span class="hljs-number">190034,92751</span>,<span class="hljs-number">741119</span>,<span class="hljs-number">672472</span>,<span class="hljs-number">891141,22906</span>,<span class="hljs-number">926358</span>,<span class="hljs-number">246287</span>,<span class="hljs-number">442006</span>,<span class="hljs-number">960860</span>,<span class="hljs-number">543731</span>,<span class="hljs-number">794029</span>,<span class="hljs-number">278717</span>,<span class="hljs-number">490341</span>,<span class="hljs-number">313167,211296</span>,<span class="hljs-number">420765</span>,<span class="hljs-number">731555</span>,<span class="hljs-number">649349</span>,<span class="hljs-number">272001</span>,<span class="hljs-number">474267</span>,<span class="hljs-number">864068</span>,<span class="hljs-number">134620,804108</span>,<span class="hljs-number">421480</span>,<span class="hljs-number">752149,204457</span>,<span class="hljs-number">423846</span>,<span class="hljs-number">876667</span>,<span class="hljs-number">355124</span>,<span class="hljs-number">681355</span>,<span class="hljs-number">434661</span>,<span class="hljs-number">190882,170404</span>,<span class="hljs-number">731523</span>,<span class="hljs-number">950652</span>,<span class="hljs-number">248313,161776</span>,<span class="hljs-number">644453</span>,<span class="hljs-number">143199</span>,<span class="hljs-number">687938</span>,<span class="hljs-number">534562</span>,<span class="hljs-number">292719</span>,<span class="hljs-number">920336</span>,<span class="hljs-number">554015</span>,<span class="hljs-number">100684,23561</span>,<span class="hljs-number">30292</span>,<span class="hljs-number">467053</span>,<span class="hljs-number">852980</span>,<span class="hljs-number">668315</span>,<span class="hljs-number">513154</span>,<span class="hljs-number">837850</span>,<span class="hljs-number">422834</span>,<span class="hljs-number">31376</span>,<span class="hljs-number">449041</span>,<span class="hljs-number">540434</span>,<span class="hljs-number">30111,144208</span>,<span class="hljs-number">278880</span>,<span class="hljs-number">66789</span>,<span class="hljs-number">429976</span>,<span class="hljs-number">642615</span>,<span class="hljs-number">575006</span>,<span class="hljs-number">769267</span>,<span class="hljs-number">661195</span>,<span class="hljs-number">326880</span>,<span class="hljs-number">736413</span>,<span class="hljs-number">57596</span>,<span class="hljs-number">587625</span>,<span class="hljs-number">771893</span>,<span class="hljs-number">706469</span>,<span class="hljs-number">30099,30894</span>,<span class="hljs-number">80080</span>,<span class="hljs-number">789435</span>,<span class="hljs-number">257607</span>,<span class="hljs-number">104603,123931</span>,<span class="hljs-number">389487</span>,<span class="hljs-number">448707</span>,<span class="hljs-number">13099,184366</span>,<span class="hljs-number">522267</span>,<span class="hljs-number">661196</span>,<span class="hljs-number">766677</span>,<span class="hljs-number">876735</span>,<span class="hljs-number">880754</span>,<span class="hljs-number">729099</span>,<span class="hljs-number">689526</span>,<span class="hljs-number">719673</span>,<span class="hljs-number">233251</span>,<span class="hljs-number">916577</span>,<span class="hljs-number">312044</span>,<span class="hljs-number">815605</span>,<span class="hljs-number">449225</span>,<span class="hljs-number">637688</span>,<span class="hljs-number">404224,227994</span>,<span class="hljs-number">542073</span>,<span class="hljs-number">672489</span>,<span class="hljs-number">149339</span>,<span class="hljs-number">779875</span>,<span class="hljs-number">875986</span>,<span class="hljs-number">972216,48476</span>,<span class="hljs-number">63318</span>,<span class="hljs-number">625908</span>,<span class="hljs-number">6781</span>,<span class="hljs-number">631315</span>,<span class="hljs-number">152944</span>,<span class="hljs-number">530793</span>,<span class="hljs-number">128822,129884</span>,<span class="hljs-number">880758</span>,<span class="hljs-number">999026</span>,<span class="hljs-number">691738</span>,<span class="hljs-number">111052,514156</span>,<span class="hljs-number">312053</span>,<span class="hljs-number">619631</span>,<span class="hljs-number">653785</span>,<span class="hljs-number">124565</span>,<span class="hljs-number">990524</span>,<span class="hljs-number">140669</span>,<span class="hljs-number">891940</span>,<span class="hljs-number">972514</span>,<span class="hljs-number">20456</span>,<span class="hljs-number">769893</span>,<span class="hljs-number">151193,21783</span>,<span class="hljs-number">271957</span>,<span class="hljs-number">185960</span>,<span class="hljs-number">660754</span>,<span class="hljs-number">133102</span>,<span class="hljs-number">627864</span>,<span class="hljs-number">486706</span>,<span class="hljs-number">997852</span>,<span class="hljs-number">931576</span>,<span class="hljs-number">811717</span>,<span class="hljs-number">281165,368216</span>,<span class="hljs-number">284850</span>,<span class="hljs-number">817109</span>,<span class="hljs-number">343739</span>,<span class="hljs-number">519690</span>,<span class="hljs-number">211908,762134</span>,<span class="hljs-number">283284</span>,<span class="hljs-number">34303,14669</span>,<span class="hljs-number">709768</span>,<span class="hljs-number">476503</span>,<span class="hljs-number">563840</span>,<span class="hljs-number">633291</span>,<span class="hljs-number">775066</span>,<span class="hljs-number">285948</span>,<span class="hljs-number">48740</span>,<span class="hljs-number">335812</span>,<span class="hljs-number">697514</span>,<span class="hljs-number">926515</span>,<span class="hljs-number">683612</span>,<span class="hljs-number">948882</span>,<span class="hljs-number">739450</span>,<span class="hljs-number">861873</span>,<span class="hljs-number">738068</span>,<span class="hljs-number">490500</span>,<span class="hljs-number">805713</span>,<span class="hljs-number">175478</span>,<span class="hljs-number">814469</span>,<span class="hljs-number">611575</span>,<span class="hljs-number">229974,857246</span>,<span class="hljs-number">405504</span>,<span class="hljs-number">454612</span>,<span class="hljs-number">418426</span>,<span class="hljs-number">728706</span>,<span class="hljs-number">817780</span>,<span class="hljs-number">506990</span>,<span class="hljs-number">66151,321225</span>,<span class="hljs-number">572760</span>,<span class="hljs-number">736029</span>,<span class="hljs-number">488456</span>,<span class="hljs-number">934647</span>,<span class="hljs-number">567719</span>,<span class="hljs-number">613749</span>,<span class="hljs-number">105745,71929</span>,<span class="hljs-number">419599</span>,<span class="hljs-number">375843</span>,<span class="hljs-number">995973</span>,<span class="hljs-number">789495</span>,<span class="hljs-number">356552</span>,<span class="hljs-number">840803</span>,<span class="hljs-number">170538,39842</span>,<span class="hljs-number">687533</span>,<span class="hljs-number">168225</span>,<span class="hljs-number">652048</span>,<span class="hljs-number">662808</span>,<span class="hljs-number">166452,368104</span>,<span class="hljs-number">687375</span>,<span class="hljs-number">580004</span>,<span class="hljs-number">28936</span>,<span class="hljs-number">580674</span>,<span class="hljs-number">5030</span>,<span class="hljs-number">799481</span>,<span class="hljs-number">118611,39388</span>,<span class="hljs-number">84149</span>,<span class="hljs-number">605525</span>,<span class="hljs-number">694576</span>,<span class="hljs-number">80625</span>,<span class="hljs-number">837527</span>,<span class="hljs-number">91042</span>,<span class="hljs-number">889315</span>,<span class="hljs-number">662305</span>,<span class="hljs-number">129487</span>,<span class="hljs-number">650736</span>,<span class="hljs-number">252199</span>,<span class="hljs-number">590621</span>,<span class="hljs-number">473979</span>,<span class="hljs-number">327338</span>,<span class="hljs-number">675669</span>,<span class="hljs-number">464852</span>,<span class="hljs-number">135961</span>,<span class="hljs-number">892665</span>,<span class="hljs-number">99167</span>,<span class="hljs-number">578986</span>,<span class="hljs-number">849985</span>,<span class="hljs-number">437682</span>,<span class="hljs-number">335173</span>,<span class="hljs-number">904863</span>,<span class="hljs-number">292186</span>,<span class="hljs-number">659833</span>,<span class="hljs-number">134974</span>,<span class="hljs-number">827439</span>,<span class="hljs-number">635822</span>,<span class="hljs-number">874227,963173</span>,<span class="hljs-number">246008,99250</span>,<span class="hljs-number">536554</span>,<span class="hljs-number">63714,697125</span>,<span class="hljs-number">272604</span>,<span class="hljs-number">835119,311172</span>,<span class="hljs-number">550901</span>,<span class="hljs-number">491821</span>,<span class="hljs-number">603356</span>,<span class="hljs-number">885486</span>,<span class="hljs-number">547271</span>,<span class="hljs-number">5976</span>,<span class="hljs-number">778971</span>,<span class="hljs-number">514250,115486</span>,<span class="hljs-number">295303</span>,<span class="hljs-number">626278</span>,<span class="hljs-number">283710</span>,<span class="hljs-number">106902</span>,<span class="hljs-number">824650</span>,<span class="hljs-number">95833</span>,<span class="hljs-number">350331</span>,<span class="hljs-number">157770,761140</span>,<span class="hljs-number">951472</span>,<span class="hljs-number">291484</span>,<span class="hljs-number">741454</span>,<span class="hljs-number">189975</span>,<span class="hljs-number">283874</span>,<span class="hljs-number">616936</span>,<span class="hljs-number">362548</span>,<span class="hljs-number">575798</span>,<span class="hljs-number">10598</span>,<span class="hljs-number">625387</span>,<span class="hljs-number">8022</span>,<span class="hljs-number">929958</span>,<span class="hljs-number">464412</span>,<span class="hljs-number">296086</span>,<span class="hljs-number">770588</span>,<span class="hljs-number">757731</span>,<span class="hljs-number">735175</span>,<span class="hljs-number">318260</span>,<span class="hljs-number">820840</span>,<span class="hljs-number">258206</span>,<span class="hljs-number">539640</span>,<span class="hljs-number">678029</span>,<span class="hljs-number">216539</span>,<span class="hljs-number">649040</span>,<span class="hljs-number">223408,146186</span>,<span class="hljs-number">647245</span>,<span class="hljs-number">366085</span>,<span class="hljs-number">389450</span>,<span class="hljs-number">367644</span>,<span class="hljs-number">25624</span>,<span class="hljs-number">483017</span>,<span class="hljs-number">190243,700253</span>,<span class="hljs-number">173849,248034</span>,<span class="hljs-number">376505</span>,<span class="hljs-number">88650,480191</span>,<span class="hljs-number">437802</span>,<span class="hljs-number">931335</span>,<span class="hljs-number">710190</span>,<span class="hljs-number">779460</span>,<span class="hljs-number">79385,22258</span>,<span class="hljs-number">894556</span>,<span class="hljs-number">291784</span>,<span class="hljs-number">9384,240645</span>,<span class="hljs-number">514378</span>,<span class="hljs-number">653757</span>,<span class="hljs-number">296415</span>,<span class="hljs-number">762668</span>,<span class="hljs-number">140031</span>,<span class="hljs-number">523401</span>,<span class="hljs-number">480292</span>,<span class="hljs-number">45370,53074</span>,<span class="hljs-number">455224</span>,<span class="hljs-number">685902</span>,<span class="hljs-number">392276</span>,<span class="hljs-number">321849</span>,<span class="hljs-number">969391</span>,<span class="hljs-number">396847</span>,<span class="hljs-number">415776</span>,<span class="hljs-number">432924</span>,<span class="hljs-number">99565,1067</span>,<span class="hljs-number">306575</span>,<span class="hljs-number">788359</span>,<span class="hljs-number">386868</span>,<span class="hljs-number">742135</span>,<span class="hljs-number">605738</span>,<span class="hljs-number">629717</span>,<span class="hljs-number">869831</span>,<span class="hljs-number">456494</span>,<span class="hljs-number">197510,163948</span>,<span class="hljs-number">143105</span>,<span class="hljs-number">864328</span>,<span class="hljs-number">533525</span>,<span class="hljs-number">569884</span>,<span class="hljs-number">201072</span>,<span class="hljs-number">308501</span>,<span class="hljs-number">887904</span>,<span class="hljs-number">524433</span>,<span class="hljs-number">631264</span>,<span class="hljs-number">339080</span>,<span class="hljs-number">31990,876216</span>,<span class="hljs-number">261141,108964</span>,<span class="hljs-number">333231</span>,<span class="hljs-number">628486</span>,<span class="hljs-number">67925</span>,<span class="hljs-number">673433</span>,<span class="hljs-number">863402</span>,<span class="hljs-number">616118</span>,<span class="hljs-number">868873</span>,<span class="hljs-number">826654</span>,<span class="hljs-number">424879</span>,<span class="hljs-number">412975</span>,<span class="hljs-number">374914</span>,<span class="hljs-number">81873</span>,<span class="hljs-number">575859</span>,<span class="hljs-number">413831</span>,<span class="hljs-number">334938</span>,<span class="hljs-number">304553</span>,<span class="hljs-number">668311</span>,<span class="hljs-number">834740</span>,<span class="hljs-number">717742</span>,<span class="hljs-number">594535</span>,<span class="hljs-number">754411</span>,<span class="hljs-number">985526</span>,<span class="hljs-number">293230</span>,<span class="hljs-number">650058</span>,<span class="hljs-number">421458</span>,<span class="hljs-number">67199</span>,<span class="hljs-number">489514</span>,<span class="hljs-number">356387</span>,<span class="hljs-number">705479</span>,<span class="hljs-number">524119</span>,<span class="hljs-number">472268</span>,<span class="hljs-number">734040</span>,<span class="hljs-number">761380</span>,<span class="hljs-number">819611</span>,<span class="hljs-number">858814</span>,<span class="hljs-number">255069</span>,<span class="hljs-number">258732</span>,<span class="hljs-number">631447</span>,<span class="hljs-number">369255,58924</span>,<span class="hljs-number">81534</span>,<span class="hljs-number">591379</span>,<span class="hljs-number">882347</span>,<span class="hljs-number">75896,376127</span>,<span class="hljs-number">630406</span>,<span class="hljs-number">71493,44708</span>,<span class="hljs-number">558748</span>,<span class="hljs-number">831029</span>,<span class="hljs-number">749732</span>,<span class="hljs-number">666999</span>,<span class="hljs-number">171649</span>,<span class="hljs-number">767493</span>,<span class="hljs-number">928841</span>,<span class="hljs-number">341284</span>,<span class="hljs-number">132730</span>,<span class="hljs-number">929647</span>,<span class="hljs-number">748264</span>,<span class="hljs-number">75704,223687</span>,<span class="hljs-number">498946</span>,<span class="hljs-number">398326</span>,<span class="hljs-number">494919</span>,<span class="hljs-number">25668</span>,<span class="hljs-number">293974</span>,<span class="hljs-number">529133,743125</span>,<span class="hljs-number">740363</span>,<span class="hljs-number">20302</span>,<span class="hljs-number">886801</span>,<span class="hljs-number">652544</span>,<span class="hljs-number">30118</span>,<span class="hljs-number">877332</span>,<span class="hljs-number">551882</span>,<span class="hljs-number">802802</span>,<span class="hljs-number">321657</span>,<span class="hljs-number">220608,46212</span>,<span class="hljs-number">57106,12867</span>,<span class="hljs-number">948452</span>,<span class="hljs-number">969661</span>,<span class="hljs-number">603856</span>,<span class="hljs-number">771125</span>,<span class="hljs-number">651852</span>,<span class="hljs-number">724523</span>,<span class="hljs-number">197079,777191</span>,<span class="hljs-number">333082</span>,<span class="hljs-number">35126</span>,<span class="hljs-number">400453</span>,<span class="hljs-number">571727</span>,<span class="hljs-number">295607</span>,<span class="hljs-number">410951</span>,<span class="hljs-number">896547</span>,<span class="hljs-number">187675</span>,<span class="hljs-number">893977</span>,<span class="hljs-number">955646</span>,<span class="hljs-number">297360</span>,<span class="hljs-number">230964,562186</span>,<span class="hljs-number">113312,117006</span>,<span class="hljs-number">120426</span>,<span class="hljs-number">327565</span>,<span class="hljs-number">192942</span>,<span class="hljs-number">627375</span>,<span class="hljs-number">620506</span>,<span class="hljs-number">88894</span>,<span class="hljs-number">647450</span>,<span class="hljs-number">327271</span>,<span class="hljs-number">617859</span>,<span class="hljs-number">827359</span>,<span class="hljs-number">165875</span>,<span class="hljs-number">411067</span>,<span class="hljs-number">977909</span>,<span class="hljs-number">215720,344231</span>,<span class="hljs-number">561124</span>,<span class="hljs-number">776708</span>,<span class="hljs-number">799338</span>,<span class="hljs-number">784430</span>,<span class="hljs-number">539833</span>,<span class="hljs-number">632298</span>,<span class="hljs-number">936895</span>,<span class="hljs-number">197692,78037</span>,<span class="hljs-number">617429</span>,<span class="hljs-number">966514</span>,<span class="hljs-number">846093</span>,<span class="hljs-number">506156</span>,<span class="hljs-number">359903</span>,<span class="hljs-number">203269,955200</span>,<span class="hljs-number">788016</span>,<span class="hljs-number">802153,353206</span>,<span class="hljs-number">843617</span>,<span class="hljs-number">64839</span>,<span class="hljs-number">291541</span>,<span class="hljs-number">810198</span>,<span class="hljs-number">569806</span>,<span class="hljs-number">760662</span>,<span class="hljs-number">612852</span>,<span class="hljs-number">688836</span>,<span class="hljs-number">638868</span>,<span class="hljs-number">409017</span>,<span class="hljs-number">71334,739250</span>,<span class="hljs-number">376779</span>,<span class="hljs-number">202849,96956</span>,<span class="hljs-number">203179,113599</span>,<span class="hljs-number">414476</span>,<span class="hljs-number">351188</span>,<span class="hljs-number">764328</span>,<span class="hljs-number">579095</span>,<span class="hljs-number">384914</span>,<span class="hljs-number">904187</span>,<span class="hljs-number">446776</span>,<span class="hljs-number">271550</span>,<span class="hljs-number">776248</span>,<span class="hljs-number">877449</span>,<span class="hljs-number">199117</span>,<span class="hljs-number">289797</span>,<span class="hljs-number">948650</span>,<span class="hljs-number">763831</span>,<span class="hljs-number">993806</span>,<span class="hljs-number">466523</span>,<span class="hljs-number">903292</span>,<span class="hljs-number">868428</span>,<span class="hljs-number">72219</span>,<span class="hljs-number">363838</span>,<span class="hljs-number">404908</span>,<span class="hljs-number">669968</span>,<span class="hljs-number">629366</span>,<span class="hljs-number">961604</span>,<span class="hljs-number">307825</span>,<span class="hljs-number">32715,193918</span>,<span class="hljs-number">47280,93907</span>,<span class="hljs-number">625564</span>,<span class="hljs-number">200858</span>,<span class="hljs-number">416765</span>,<span class="hljs-number">436398</span>,<span class="hljs-number">283257</span>,<span class="hljs-number">81139,103547</span>,<span class="hljs-number">214468,169462</span>,<span class="hljs-number">421561</span>,<span class="hljs-number">494855</span>,<span class="hljs-number">611131,304118</span>,<span class="hljs-number">106444</span>,<span class="hljs-number">685922</span>,<span class="hljs-number">353341</span>,<span class="hljs-number">925466</span>,<span class="hljs-number">64152</span>,<span class="hljs-number">604597</span>,<span class="hljs-number">787724</span>,<span class="hljs-number">515871</span>,<span class="hljs-number">51670</span>,<span class="hljs-number">898687</span>,<span class="hljs-number">420375</span>,<span class="hljs-number">976782</span>,<span class="hljs-number">968869</span>,<span class="hljs-number">987577</span>,<span class="hljs-number">855187</span>,<span class="hljs-number">698910</span>,<span class="hljs-number">601465</span>,<span class="hljs-number">201997</span>,<span class="hljs-number">277593</span>,<span class="hljs-number">929625</span>,<span class="hljs-number">509297</span>,<span class="hljs-number">155762</span>,<span class="hljs-number">724684</span>,<span class="hljs-number">970196</span>,<span class="hljs-number">369368</span>,<span class="hljs-number">64808</span>,<span class="hljs-number">579689</span>,<span class="hljs-number">252384,222794</span>,<span class="hljs-number">748204</span>,<span class="hljs-number">654552</span>,<span class="hljs-number">338607</span>,<span class="hljs-number">938353</span>,<span class="hljs-number">270852</span>,<span class="hljs-number">810925</span>,<span class="hljs-number">110149,927191</span>,<span class="hljs-number">746662</span>,<span class="hljs-number">573740</span>,<span class="hljs-number">753291</span>,<span class="hljs-number">389093</span>,<span class="hljs-number">58099,29864</span>,<span class="hljs-number">297770</span>,<span class="hljs-number">58741</span>,<span class="hljs-number">689432</span>,<span class="hljs-number">106329</span>,<span class="hljs-number">997359</span>,<span class="hljs-number">211542,403186</span>,<span class="hljs-number">798689</span>,<span class="hljs-number">483703</span>,<span class="hljs-number">347815</span>,<span class="hljs-number">55716</span>,<span class="hljs-number">618359</span>,<span class="hljs-number">124240,33810</span>,<span class="hljs-number">263778</span>,<span class="hljs-number">598937</span>,<span class="hljs-number">381545</span>,<span class="hljs-number">252751,334145</span>,<span class="hljs-number">749681</span>,<span class="hljs-number">888129</span>,<span class="hljs-number">378383</span>,<span class="hljs-number">874100</span>,<span class="hljs-number">923620</span>,<span class="hljs-number">145587</span>,<span class="hljs-number">438575</span>,<span class="hljs-number">487525</span>,<span class="hljs-number">41264,148162</span>,<span class="hljs-number">600237</span>,<span class="hljs-number">629332</span>,<span class="hljs-number">981962</span>,<span class="hljs-number">276819</span>,<span class="hljs-number">257507</span>,<span class="hljs-number">720619</span>,<span class="hljs-number">913665</span>,<span class="hljs-number">649448</span>,<span class="hljs-number">515473</span>,<span class="hljs-number">558956</span>,<span class="hljs-number">784229,169365</span>,<span class="hljs-number">223584,194797</span>,<span class="hljs-number">947491</span>,<span class="hljs-number">124961,220163</span>,<span class="hljs-number">916964</span>,<span class="hljs-number">393251</span>,<span class="hljs-number">383018</span>,<span class="hljs-number">188015</span>,<span class="hljs-number">615394</span>,<span class="hljs-number">797844</span>,<span class="hljs-number">284891</span>,<span class="hljs-number">389194,203979</span>,<span class="hljs-number">911068</span>,<span class="hljs-number">742517</span>,<span class="hljs-number">719358</span>,<span class="hljs-number">798374</span>,<span class="hljs-number">88936</span>,<span class="hljs-number">287962</span>,<span class="hljs-number">208206</span>,<span class="hljs-number">384885</span>,<span class="hljs-number">660624</span>,<span class="hljs-number">879897</span>,<span class="hljs-number">311384</span>,<span class="hljs-number">664079</span>,<span class="hljs-number">321925</span>,<span class="hljs-number">557023</span>,<span class="hljs-number">933845</span>,<span class="hljs-number">9990,38647</span>,<span class="hljs-number">278587</span>,<span class="hljs-number">598319</span>,<span class="hljs-number">316227</span>,<span class="hljs-number">449019</span>,<span class="hljs-number">610943</span>,<span class="hljs-number">723982</span>,<span class="hljs-number">903705</span>,<span class="hljs-number">860536</span>,<span class="hljs-number">552770</span>,<span class="hljs-number">317262</span>,<span class="hljs-number">495107</span>,<span class="hljs-number">689575</span>,<span class="hljs-number">941128</span>,<span class="hljs-number">735453</span>,<span class="hljs-number">941460</span>,<span class="hljs-number">994204</span>,<span class="hljs-number">787920</span>,<span class="hljs-number">771952</span>,<span class="hljs-number">359576</span>,<span class="hljs-number">425764</span>,<span class="hljs-number">161188</span>,<span class="hljs-number">567396</span>,<span class="hljs-number">575243,171670</span>,<span class="hljs-number">788403</span>,<span class="hljs-number">199099</span>,<span class="hljs-number">526476</span>,<span class="hljs-number">144349</span>,<span class="hljs-number">903825</span>,<span class="hljs-number">330695</span>,<span class="hljs-number">475139</span>,<span class="hljs-number">446603</span>,<span class="hljs-number">19032</span>,<span class="hljs-number">651661</span>,<span class="hljs-number">406149</span>,<span class="hljs-number">832096</span>,<span class="hljs-number">208281,69189</span>,<span class="hljs-number">46480</span>,<span class="hljs-number">462039</span>,<span class="hljs-number">233906,227350</span>,<span class="hljs-number">300204</span>,<span class="hljs-number">972414</span>,<span class="hljs-number">975359</span>,<span class="hljs-number">685919</span>,<span class="hljs-number">433389</span>,<span class="hljs-number">926157</span>,<span class="hljs-number">559308</span>,<span class="hljs-number">607028</span>,<span class="hljs-number">767618</span>,<span class="hljs-number">545019</span>,<span class="hljs-number">934982</span>,<span class="hljs-number">612905</span>,<span class="hljs-number">219656</span>,<span class="hljs-number">805505</span>,<span class="hljs-number">525155</span>,<span class="hljs-number">692771</span>,<span class="hljs-number">814105</span>,<span class="hljs-number">806654</span>,<span class="hljs-number">602367</span>,<span class="hljs-number">268892</span>,<span class="hljs-number">136378</span>,<span class="hljs-number">594877</span>,<span class="hljs-number">230625</span>,<span class="hljs-number">383446</span>,<span class="hljs-number">663590</span>,<span class="hljs-number">780157</span>,<span class="hljs-number">630048</span>,<span class="hljs-number">59025,61882</span>,<span class="hljs-number">387501</span>,<span class="hljs-number">925854</span>,<span class="hljs-number">36774,89119</span>,<span class="hljs-number">982371</span>,<span class="hljs-number">303001</span>,<span class="hljs-number">454462</span>,<span class="hljs-number">315756</span>,<span class="hljs-number">562449</span>,<span class="hljs-number">804154,562</span>,<span class="hljs-number">572091</span>,<span class="hljs-number">282784</span>,<span class="hljs-number">247977,67688</span>,<span class="hljs-number">53683</span>,<span class="hljs-number">800845</span>,<span class="hljs-number">814515</span>,<span class="hljs-number">451220</span>,<span class="hljs-number">907021</span>,<span class="hljs-number">27220,247127</span>,<span class="hljs-number">716874</span>,<span class="hljs-number">446717</span>,<span class="hljs-number">84332</span>,<span class="hljs-number">491653</span>,<span class="hljs-number">423487</span>,<span class="hljs-number">322746</span>,<span class="hljs-number">967512</span>,<span class="hljs-number">418215,209205</span>,<span class="hljs-number">524889</span>,<span class="hljs-number">822946</span>,<span class="hljs-number">165373,583159</span>,<span class="hljs-number">904993</span>,<span class="hljs-number">582353</span>,<span class="hljs-number">656205,386157</span>,<span class="hljs-number">280130</span>,<span class="hljs-number">261595</span>,<span class="hljs-number">90250</span>,<span class="hljs-number">751428</span>,<span class="hljs-number">359903</span>,<span class="hljs-number">552906</span>,<span class="hljs-number">174493</span>,<span class="hljs-number">745535</span>,<span class="hljs-number">594429</span>,<span class="hljs-number">750994</span>,<span class="hljs-number">995475</span>,<span class="hljs-number">657949</span>,<span class="hljs-number">963775</span>,<span class="hljs-number">459765</span>,<span class="hljs-number">413027</span>,<span class="hljs-number">391379</span>,<span class="hljs-number">270084</span>,<span class="hljs-number">723176</span>,<span class="hljs-number">876096</span>,<span class="hljs-number">922967</span>,<span class="hljs-number">513565</span>,<span class="hljs-number">629600</span>,<span class="hljs-number">378615</span>,<span class="hljs-number">134056,141141</span>,<span class="hljs-number">321535</span>,<span class="hljs-number">161143</span>,<span class="hljs-number">418985</span>,<span class="hljs-number">87472,88207</span>,<span class="hljs-number">949288</span>,<span class="hljs-number">193004</span>,<span class="hljs-number">935502</span>,<span class="hljs-number">749486</span>,<span class="hljs-number">925024</span>,<span class="hljs-number">866845</span>,<span class="hljs-number">446749</span>,<span class="hljs-number">331761</span>,<span class="hljs-number">39600</span>,<span class="hljs-number">275966</span>,<span class="hljs-number">326044</span>,<span class="hljs-number">212038</span>,<span class="hljs-number">287374</span>,<span class="hljs-number">189133</span>,<span class="hljs-number">812765</span>,<span class="hljs-number">59534,61533</span>,<span class="hljs-number">308152</span>,<span class="hljs-number">926520</span>,<span class="hljs-number">794754</span>,<span class="hljs-number">565068</span>,<span class="hljs-number">888070</span>,<span class="hljs-number">57395,439106</span>,<span class="hljs-number">441491</span>,<span class="hljs-number">605528</span>,<span class="hljs-number">428760</span>,<span class="hljs-number">486510</span>,<span class="hljs-number">507471</span>,<span class="hljs-number">44439</span>,<span class="hljs-number">970435</span>,<span class="hljs-number">84873,166688</span>,<span class="hljs-number">751180</span>,<span class="hljs-number">272525</span>,<span class="hljs-number">720232</span>,<span class="hljs-number">496453</span>,<span class="hljs-number">18155</span>,<span class="hljs-number">259270</span>,<span class="hljs-number">33370</span>,<span class="hljs-number">834515</span>,<span class="hljs-number">581906</span>,<span class="hljs-number">695459</span>,<span class="hljs-number">851093</span>,<span class="hljs-number">559316</span>,<span class="hljs-number">326870</span>,<span class="hljs-number">600131</span>,<span class="hljs-number">743992</span>,<span class="hljs-number">233561</span>,<span class="hljs-number">568894</span>,<span class="hljs-number">140700</span>,<span class="hljs-number">408667</span>,<span class="hljs-number">512908</span>,<span class="hljs-number">590768</span>,<span class="hljs-number">405559</span>,<span class="hljs-number">561459</span>,<span class="hljs-number">502950</span>,<span class="hljs-number">551529</span>,<span class="hljs-number">320911</span>,<span class="hljs-number">827800</span>,<span class="hljs-number">922229</span>,<span class="hljs-number">858732</span>,<span class="hljs-number">961393</span>,<span class="hljs-number">374412</span>,<span class="hljs-number">584409</span>,<span class="hljs-number">795602</span>,<span class="hljs-number">398644</span>,<span class="hljs-number">262192,199897</span>,<span class="hljs-number">689298</span>,<span class="hljs-number">231826</span>,<span class="hljs-number">510698</span>,<span class="hljs-number">995321</span>,<span class="hljs-number">774379</span>,<span class="hljs-number">236596</span>,<span class="hljs-number">655353</span>,<span class="hljs-number">430128,127784</span>,<span class="hljs-number">599533</span>,<span class="hljs-number">45637</span>,<span class="hljs-number">953783</span>,<span class="hljs-number">738038</span>,<span class="hljs-number">911365</span>,<span class="hljs-number">500048</span>,<span class="hljs-number">608884</span>,<span class="hljs-number">660624</span>,<span class="hljs-number">41586</span>,<span class="hljs-number">731644</span>,<span class="hljs-number">9964,168627</span>,<span class="hljs-number">586509</span>,<span class="hljs-number">357346</span>,<span class="hljs-number">922171</span>,<span class="hljs-number">291689</span>,<span class="hljs-number">890528</span>,<span class="hljs-number">618577</span>,<span class="hljs-number">770961</span>,<span class="hljs-number">801648</span>,<span class="hljs-number">351380</span>,<span class="hljs-number">155468</span>,<span class="hljs-number">713984</span>,<span class="hljs-number">832322</span>,<span class="hljs-number">117923,691214</span>,<span class="hljs-number">775954</span>,<span class="hljs-number">976454</span>,<span class="hljs-number">223045,3939</span>,<span class="hljs-number">738727</span>,<span class="hljs-number">425638</span>,<span class="hljs-number">519941</span>,<span class="hljs-number">252362</span>,<span class="hljs-number">327786</span>,<span class="hljs-number">928840</span>,<span class="hljs-number">140277,263156</span>,<span class="hljs-number">812633</span>,<span class="hljs-number">890739</span>,<span class="hljs-number">896010</span>,<span class="hljs-number">757853</span>,<span class="hljs-number">33008</span>,<span class="hljs-number">699500</span>,<span class="hljs-number">715476</span>,<span class="hljs-number">129185</span>,<span class="hljs-number">433389</span>,<span class="hljs-number">892541</span>,<span class="hljs-number">787359</span>,<span class="hljs-number">712567</span>,<span class="hljs-number">195911,247307</span>,<span class="hljs-number">492584</span>,<span class="hljs-number">5535</span>,<span class="hljs-number">950618</span>,<span class="hljs-number">489210</span>,<span class="hljs-number">664614</span>,<span class="hljs-number">674523</span>,<span class="hljs-number">384041</span>,<span class="hljs-number">264121</span>,<span class="hljs-number">603957</span>,<span class="hljs-number">208815</span>,<span class="hljs-number">804780</span>,<span class="hljs-number">320268</span>,<span class="hljs-number">75439</span>,<span class="hljs-number">422667</span>,<span class="hljs-number">830717</span>,<span class="hljs-number">751704</span>,<span class="hljs-number">220366</span>,<span class="hljs-number">606412</span>,<span class="hljs-number">251427,751235</span>,<span class="hljs-number">446455</span>,<span class="hljs-number">559728</span>,<span class="hljs-number">555778</span>,<span class="hljs-number">769432</span>,<span class="hljs-number">608646</span>,<span class="hljs-number">147738</span>,<span class="hljs-number">315795</span>,<span class="hljs-number">26824</span>,<span class="hljs-number">763639</span>,<span class="hljs-number">421</span>,<span class="hljs-number">586864</span>,<span class="hljs-number">532523</span>,<span class="hljs-number">150472,570228</span>,<span class="hljs-number">134634</span>,<span class="hljs-number">892774</span>,<span class="hljs-number">967488</span>,<span class="hljs-number">366547</span>,<span class="hljs-number">261152,170024</span>,<span class="hljs-number">652240,200280</span>,<span class="hljs-number">427586</span>,<span class="hljs-number">322907</span>,<span class="hljs-number">623030</span>,<span class="hljs-number">623365</span>,<span class="hljs-number">19562</span>,<span class="hljs-number">745548</span>,<span class="hljs-number">299900</span>,<span class="hljs-number">244506,636221</span>,<span class="hljs-number">747110</span>,<span class="hljs-number">756714</span>,<span class="hljs-number">232727</span>,<span class="hljs-number">347565</span>,<span class="hljs-number">601280</span>,<span class="hljs-number">137287</span>,<span class="hljs-number">940865</span>,<span class="hljs-number">79781</span>,<span class="hljs-number">851361</span>,<span class="hljs-number">751001</span>,<span class="hljs-number">138869</span>,<span class="hljs-number">910766</span>,<span class="hljs-number">971975</span>,<span class="hljs-number">908106</span>,<span class="hljs-number">952322</span>,<span class="hljs-number">519391</span>,<span class="hljs-number">602317</span>,<span class="hljs-number">235079,119936</span>,<span class="hljs-number">253732,923246</span>,<span class="hljs-number">187503</span>,<span class="hljs-number">292707</span>,<span class="hljs-number">126507</span>,<span class="hljs-number">509598</span>,<span class="hljs-number">163907</span>,<span class="hljs-number">431424</span>,<span class="hljs-number">456566</span>,<span class="hljs-number">613354</span>,<span class="hljs-number">179356</span>,<span class="hljs-number">423282</span>,<span class="hljs-number">512071</span>,<span class="hljs-number">37760,80819</span>,<span class="hljs-number">975330</span>,<span class="hljs-number">77189,57176</span>,<span class="hljs-number">791470</span>,<span class="hljs-number">303015</span>,<span class="hljs-number">418088</span>,<span class="hljs-number">615446</span>,<span class="hljs-number">705623</span>,<span class="hljs-number">320471</span>,<span class="hljs-number">308802</span>,<span class="hljs-number">848711</span>,<span class="hljs-number">421389</span>,<span class="hljs-number">782941</span>,<span class="hljs-number">198137</span>,<span class="hljs-number">632732</span>,<span class="hljs-number">883874</span>,<span class="hljs-number">262408</span>,<span class="hljs-number">996569</span>,<span class="hljs-number">38860</span>,<span class="hljs-number">975650</span>,<span class="hljs-number">482477</span>,<span class="hljs-number">17237,245632</span>,<span class="hljs-number">132259,119247</span>,<span class="hljs-number">199790,50736</span>,<span class="hljs-number">269881</span>,<span class="hljs-number">762137</span>,<span class="hljs-number">562554</span>,<span class="hljs-number">724421</span>,<span class="hljs-number">820534</span>,<span class="hljs-number">630902</span>,<span class="hljs-number">298326</span>,<span class="hljs-number">868009</span>,<span class="hljs-number">440661</span>,<span class="hljs-number">624269</span>,<span class="hljs-number">242030,219705</span>,<span class="hljs-number">616440</span>,<span class="hljs-number">101065,251620</span>,<span class="hljs-number">463887</span>,<span class="hljs-number">668701</span>,<span class="hljs-number">881721</span>,<span class="hljs-number">728925</span>,<span class="hljs-number">146726</span>,<span class="hljs-number">683497</span>,<span class="hljs-number">648453</span>,<span class="hljs-number">987687</span>,<span class="hljs-number">302014</span>,<span class="hljs-number">2524,790124</span>,<span class="hljs-number">453819</span>,<span class="hljs-number">868198</span>,<span class="hljs-number">459907</span>,<span class="hljs-number">995106,99888</span>,<span class="hljs-number">849162</span>,<span class="hljs-number">819871</span>,<span class="hljs-number">178713</span>,<span class="hljs-number">417930</span>,<span class="hljs-number">502295</span>,<span class="hljs-number">800020</span>,<span class="hljs-number">705759</span>,<span class="hljs-number">852743</span>,<span class="hljs-number">730262</span>,<span class="hljs-number">527439</span>,<span class="hljs-number">96994,230732</span>,<span class="hljs-number">929354</span>,<span class="hljs-number">562121</span>,<span class="hljs-number">898907</span>,<span class="hljs-number">586873</span>,<span class="hljs-number">349719</span>,<span class="hljs-number">42435</span>,<span class="hljs-number">579497</span>,<span class="hljs-number">829467</span>,<span class="hljs-number">693991</span>,<span class="hljs-number">737507</span>,<span class="hljs-number">829031</span>,<span class="hljs-number">280998</span>,<span class="hljs-number">553326</span>,<span class="hljs-number">559145,166037</span>,<span class="hljs-number">823771</span>,<span class="hljs-number">557511</span>,<span class="hljs-number">901995</span>,<span class="hljs-number">976061</span>,<span class="hljs-number">328321</span>,<span class="hljs-number">582876</span>,<span class="hljs-number">914140</span>,<span class="hljs-number">532563</span>,<span class="hljs-number">556032</span>,<span class="hljs-number">10995</span>,<span class="hljs-number">628024</span>,<span class="hljs-number">509793</span>,<span class="hljs-number">994123,121587</span>,<span class="hljs-number">330895</span>,<span class="hljs-number">315069</span>,<span class="hljs-number">426514</span>,<span class="hljs-number">462329</span>,<span class="hljs-number">401612</span>,<span class="hljs-number">886308</span>,<span class="hljs-number">333628</span>,<span class="hljs-number">565003</span>,<span class="hljs-number">744693</span>,<span class="hljs-number">791239,183792</span>,<span class="hljs-number">815049</span>,<span class="hljs-number">78580</span>,<span class="hljs-number">584996</span>,<span class="hljs-number">336341</span>,<span class="hljs-number">115692</span>,<span class="hljs-number">356326</span>,<span class="hljs-number">336379</span>,<span class="hljs-number">690213,58987</span>,<span class="hljs-number">966817</span>,<span class="hljs-number">328098</span>,<span class="hljs-number">731193</span>,<span class="hljs-number">790663</span>,<span class="hljs-number">688531</span>,<span class="hljs-number">427728</span>,<span class="hljs-number">350387</span>,<span class="hljs-number">401669</span>,<span class="hljs-number">418891</span>,<span class="hljs-number">82577,100523</span>,<span class="hljs-number">856424</span>,<span class="hljs-number">838244</span>,<span class="hljs-number">612054</span>,<span class="hljs-number">880977</span>,<span class="hljs-number">633611</span>,<span class="hljs-number">270349</span>,<span class="hljs-number">861311</span>,<span class="hljs-number">141682,88009</span>,<span class="hljs-number">78692,43188</span>,<span class="hljs-number">943899</span>,<span class="hljs-number">889452</span>,<span class="hljs-number">743680</span>,<span class="hljs-number">361823</span>,<span class="hljs-number">988119,163216</span>,<span class="hljs-number">754037</span>,<span class="hljs-number">391341</span>,<span class="hljs-number">339034</span>,<span class="hljs-number">577905</span>,<span class="hljs-number">900703</span>,<span class="hljs-number">441293</span>,<span class="hljs-number">534254</span>,<span class="hljs-number">747933</span>,<span class="hljs-number">343469</span>,<span class="hljs-number">214207,115571</span>,<span class="hljs-number">743407</span>,<span class="hljs-number">959568</span>,<span class="hljs-number">548052</span>,<span class="hljs-number">78411</span>,<span class="hljs-number">892510</span>,<span class="hljs-number">541475</span>,<span class="hljs-number">988180</span>,<span class="hljs-number">660037</span>,<span class="hljs-number">929713</span>,<span class="hljs-number">825487</span>,<span class="hljs-number">327637</span>,<span class="hljs-number">611942</span>,<span class="hljs-number">44810</span>,<span class="hljs-number">333392</span>,<span class="hljs-number">50752,97973</span>,<span class="hljs-number">591736</span>,<span class="hljs-number">682042</span>,<span class="hljs-number">346578</span>,<span class="hljs-number">909589</span>,<span class="hljs-number">353835</span>,<span class="hljs-number">479438</span>,<span class="hljs-number">407882</span>,<span class="hljs-number">533615</span>,<span class="hljs-number">427132</span>,<span class="hljs-number">632313</span>,<span class="hljs-number">445545</span>,<span class="hljs-number">959797</span>,<span class="hljs-number">654862</span>,<span class="hljs-number">967937</span>,<span class="hljs-number">608242,238321</span>,<span class="hljs-number">598143,145669</span>,<span class="hljs-number">143366,769108</span>,<span class="hljs-number">638510</span>,<span class="hljs-number">778024</span>,<span class="hljs-number">491538</span>,<span class="hljs-number">256260</span>,<span class="hljs-number">19991</span>,<span class="hljs-number">485525</span>,<span class="hljs-number">280168</span>,<span class="hljs-number">660341</span>,<span class="hljs-number">432264</span>,<span class="hljs-number">871988</span>,<span class="hljs-number">466841</span>,<span class="hljs-number">495567</span>,<span class="hljs-number">152573,364131</span>,<span class="hljs-number">907467</span>,<span class="hljs-number">411605</span>,<span class="hljs-number">958852</span>,<span class="hljs-number">158104</span>,<span class="hljs-number">932464</span>,<span class="hljs-number">312539</span>,<span class="hljs-number">257522</span>,<span class="hljs-number">506852</span>,<span class="hljs-number">178785</span>,<span class="hljs-number">627650</span>,<span class="hljs-number">902492</span>,<span class="hljs-number">914099</span>,<span class="hljs-number">952909</span>,<span class="hljs-number">326682</span>,<span class="hljs-number">24614</span>,<span class="hljs-number">750562</span>,<span class="hljs-number">475438</span>,<span class="hljs-number">840668</span>,<span class="hljs-number">670304</span>,<span class="hljs-number">338083</span>,<span class="hljs-number">877550</span>,<span class="hljs-number">827475</span>,<span class="hljs-number">90268</span>,<span class="hljs-number">469786</span>,<span class="hljs-number">131409</span>,<span class="hljs-number">578489</span>,<span class="hljs-number">302199</span>,<span class="hljs-number">602044</span>,<span class="hljs-number">690584</span>,<span class="hljs-number">687577</span>,<span class="hljs-number">616523</span>,<span class="hljs-number">260809</span>,<span class="hljs-number">25831,671175</span>,<span class="hljs-number">494631</span>,<span class="hljs-number">778756</span>,<span class="hljs-number">669941</span>,<span class="hljs-number">424502</span>,<span class="hljs-number">183133,903206</span>,<span class="hljs-number">764242</span>,<span class="hljs-number">794876</span>,<span class="hljs-number">460481</span>,<span class="hljs-number">569902</span>,<span class="hljs-number">334728</span>,<span class="hljs-number">337347</span>,<span class="hljs-number">24199</span>,<span class="hljs-number">310702</span>,<span class="hljs-number">239633,4190</span>,<span class="hljs-number">961424</span>,<span class="hljs-number">67700</span>,<span class="hljs-number">938794</span>,<span class="hljs-number">743908</span>,<span class="hljs-number">51982</span>,<span class="hljs-number">870008</span>,<span class="hljs-number">343325</span>,<span class="hljs-number">511568</span>,<span class="hljs-number">556860</span>,<span class="hljs-number">585471</span>,<span class="hljs-number">229958,284120</span>,<span class="hljs-number">423824</span>,<span class="hljs-number">44229</span>,<span class="hljs-number">502453</span>,<span class="hljs-number">348299</span>,<span class="hljs-number">979521</span>,<span class="hljs-number">626701</span>,<span class="hljs-number">141296</span>,<span class="hljs-number">767656</span>,<span class="hljs-number">621652</span>,<span class="hljs-number">186995</span>,<span class="hljs-number">407874</span>,<span class="hljs-number">653391</span>,<span class="hljs-number">388854</span>,<span class="hljs-number">789669</span>,<span class="hljs-number">132462</span>,<span class="hljs-number">639924</span>,<span class="hljs-number">714569</span>,<span class="hljs-number">320878</span>,<span class="hljs-number">893546</span>,<span class="hljs-number">323543</span>,<span class="hljs-number">509524</span>,<span class="hljs-number">382302</span>,<span class="hljs-number">100276,258159</span>,<span class="hljs-number">372402</span>,<span class="hljs-number">883213,4277</span>,<span class="hljs-number">991812</span>,<span class="hljs-number">304651</span>,<span class="hljs-number">514288</span>,<span class="hljs-number">337759</span>,<span class="hljs-number">716379</span>,<span class="hljs-number">225792,291157</span>,<span class="hljs-number">534071</span>,<span class="hljs-number">308094</span>,<span class="hljs-number">299330</span>,<span class="hljs-number">184845,30122</span>,<span class="hljs-number">382554</span>,<span class="hljs-number">723368</span>,<span class="hljs-number">87507,127843</span>,<span class="hljs-number">416999</span>,<span class="hljs-number">617211</span>,<span class="hljs-number">727539</span>,<span class="hljs-number">865990</span>,<span class="hljs-number">969276</span>,<span class="hljs-number">776839</span>,<span class="hljs-number">721611</span>,<span class="hljs-number">2282,882138</span>,<span class="hljs-number">694780</span>,<span class="hljs-number">882856</span>,<span class="hljs-number">505921</span>,<span class="hljs-number">696531</span>,<span class="hljs-number">205349</span>,<span class="hljs-number">626529</span>,<span class="hljs-number">191053</span>,<span class="hljs-number">920922</span>,<span class="hljs-number">747334</span>,<span class="hljs-number">32608</span>,<span class="hljs-number">883725</span>,<span class="hljs-number">624198,8903</span>,<span class="hljs-number">873060</span>,<span class="hljs-number">671819</span>,<span class="hljs-number">19183,474177</span>,<span class="hljs-number">264009</span>,<span class="hljs-number">737628</span>,<span class="hljs-number">180959</span>,<span class="hljs-number">729430</span>,<span class="hljs-number">579122,68727</span>,<span class="hljs-number">487968</span>,<span class="hljs-number">107723,222399</span>,<span class="hljs-number">206815</span>,<span class="hljs-number">790567</span>,<span class="hljs-number">522184,235260</span>,<span class="hljs-number">969962</span>,<span class="hljs-number">280530</span>,<span class="hljs-number">280301</span>,<span class="hljs-number">321937</span>,<span class="hljs-number">769600</span>,<span class="hljs-number">288196,203760</span>,<span class="hljs-number">57815,106577</span>,<span class="hljs-number">232241</span>,<span class="hljs-number">776581</span>,<span class="hljs-number">239245,52844</span>,<span class="hljs-number">255283</span>,<span class="hljs-number">788531</span>,<span class="hljs-number">871855</span>,<span class="hljs-number">875442</span>,<span class="hljs-number">930083</span>,<span class="hljs-number">552366</span>,<span class="hljs-number">180383,778167</span>,<span class="hljs-number">584958</span>,<span class="hljs-number">990455</span>,<span class="hljs-number">653894</span>,<span class="hljs-number">536698</span>,<span class="hljs-number">988591</span>,<span class="hljs-number">323567</span>,<span class="hljs-number">418600</span>,<span class="hljs-number">135527,222130</span>,<span class="hljs-number">485670</span>,<span class="hljs-number">393056</span>,<span class="hljs-number">181783</span>,<span class="hljs-number">672786</span>,<span class="hljs-number">930563</span>,<span class="hljs-number">168141</span>,<span class="hljs-number">336431</span>,<span class="hljs-number">164404,169513</span>,<span class="hljs-number">327538</span>,<span class="hljs-number">948011</span>,<span class="hljs-number">976904</span>,<span class="hljs-number">304367</span>,<span class="hljs-number">995332</span>,<span class="hljs-number">265661</span>,<span class="hljs-number">496117</span>,<span class="hljs-number">726733</span>,<span class="hljs-number">135237</span>,<span class="hljs-number">925495</span>,<span class="hljs-number">211983,346249</span>,<span class="hljs-number">881377</span>,<span class="hljs-number">670420</span>,<span class="hljs-number">499242,703245</span>,<span class="hljs-number">333005</span>,<span class="hljs-number">321122,149793</span>,<span class="hljs-number">538979</span>,<span class="hljs-number">228663</span>,<span class="hljs-number">461492</span>,<span class="hljs-number">675223,262110</span>,<span class="hljs-number">555646</span>,<span class="hljs-number">1434</span>,<span class="hljs-number">944398</span>,<span class="hljs-number">9421,236601</span>,<span class="hljs-number">628425</span>,<span class="hljs-number">296632</span>,<span class="hljs-number">750670</span>,<span class="hljs-number">445904</span>,<span class="hljs-number">835777</span>,<span class="hljs-number">405562</span>,<span class="hljs-number">358709</span>,<span class="hljs-number">145838</span>,<span class="hljs-number">265599</span>,<span class="hljs-number">160556,109192</span>,<span class="hljs-number">877751</span>,<span class="hljs-number">471258</span>,<span class="hljs-number">987641</span>,<span class="hljs-number">45417</span>,<span class="hljs-number">517294</span>,<span class="hljs-number">233869</span>,<span class="hljs-number">745798</span>,<span class="hljs-number">830520</span>,<span class="hljs-number">249460</span>,<span class="hljs-number">964708</span>,<span class="hljs-number">375588</span>,<span class="hljs-number">131349,225865</span>,<span class="hljs-number">802891</span>,<span class="hljs-number">633491</span>,<span class="hljs-number">360487</span>,<span class="hljs-number">134036</span>,<span class="hljs-number">602035</span>,<span class="hljs-number">158644</span>,<span class="hljs-number">705457</span>,<span class="hljs-number">305050</span>,<span class="hljs-number">388487</span>,<span class="hljs-number">913936</span>,<span class="hljs-number">712448</span>,<span class="hljs-number">754309</span>,<span class="hljs-number">374808</span>,<span class="hljs-number">386655</span>,<span class="hljs-number">567580</span>,<span class="hljs-number">621715</span>,<span class="hljs-number">965267</span>,<span class="hljs-number">512449</span>,<span class="hljs-number">605666</span>,<span class="hljs-number">449737</span>,<span class="hljs-number">190577</span>,<span class="hljs-number">475988</span>,<span class="hljs-number">452323</span>,<span class="hljs-number">535201,45148</span>,<span class="hljs-number">945693</span>,<span class="hljs-number">543758</span>,<span class="hljs-number">650785</span>,<span class="hljs-number">35267</span>,<span class="hljs-number">686763</span>,<span class="hljs-number">886313</span>,<span class="hljs-number">411378</span>,<span class="hljs-number">562070</span>,<span class="hljs-number">342543</span>,<span class="hljs-number">234378</span>,<span class="hljs-number">504870</span>,<span class="hljs-number">979776</span>,<span class="hljs-number">68150,114189</span>,<span class="hljs-number">105161,3574</span>,<span class="hljs-number">740037</span>,<span class="hljs-number">44188</span>,<span class="hljs-number">688468</span>,<span class="hljs-number">1302</span>,<span class="hljs-number">604288</span>,<span class="hljs-number">658357</span>,<span class="hljs-number">781513</span>,<span class="hljs-number">979610</span>,<span class="hljs-number">506470</span>,<span class="hljs-number">764354</span>,<span class="hljs-number">346910</span>,<span class="hljs-number">59078</span>,<span class="hljs-number">858029</span>,<span class="hljs-number">849518</span>,<span class="hljs-number">924790</span>,<span class="hljs-number">831632</span>,<span class="hljs-number">522375</span>,<span class="hljs-number">369825</span>,<span class="hljs-number">56887,104862</span>,<span class="hljs-number">586231,50059</span>,<span class="hljs-number">274540</span>,<span class="hljs-number">615746</span>,<span class="hljs-number">48155</span>,<span class="hljs-number">495673</span>,<span class="hljs-number">2214</span>,<span class="hljs-number">425438</span>,<span class="hljs-number">42973,339224</span>,<span class="hljs-number">57782,983238</span>,<span class="hljs-number">159499</span>,<span class="hljs-number">606618</span>,<span class="hljs-number">935557</span>,<span class="hljs-number">819305</span>,<span class="hljs-number">649881</span>,<span class="hljs-number">714035</span>,<span class="hljs-number">874102,930195</span>,<span class="hljs-number">194624,717232</span>,<span class="hljs-number">346191</span>,<span class="hljs-number">916383</span>,<span class="hljs-number">313176</span>,<span class="hljs-number">418389</span>,<span class="hljs-number">96757</span>,<span class="hljs-number">914701</span>,<span class="hljs-number">316975</span>,<span class="hljs-number">262815</span>,<span class="hljs-number">515698</span>,<span class="hljs-number">442350</span>,<span class="hljs-number">345649</span>,<span class="hljs-number">82835,67737</span>,<span class="hljs-number">365540</span>,<span class="hljs-number">370088</span>,<span class="hljs-number">588578</span>,<span class="hljs-number">946211</span>,<span class="hljs-number">612084</span>,<span class="hljs-number">559225</span>,<span class="hljs-number">724478</span>,<span class="hljs-number">485769</span>,<span class="hljs-number">92062</span>,<span class="hljs-number">288789</span>,<span class="hljs-number">605292</span>,<span class="hljs-number">813312</span>,<span class="hljs-number">622341</span>,<span class="hljs-number">706005</span>,<span class="hljs-number">339617</span>,<span class="hljs-number">749369</span>,<span class="hljs-number">653663</span>,<span class="hljs-number">351501</span>,<span class="hljs-number">350279</span>,<span class="hljs-number">468019</span>,<span class="hljs-number">834880</span>,<span class="hljs-number">610745</span>,<span class="hljs-number">248123,404150</span>,<span class="hljs-number">799670</span>,<span class="hljs-number">663652</span>,<span class="hljs-number">279156</span>,<span class="hljs-number">632045</span>,<span class="hljs-number">104469</span>,<span class="hljs-number">930006</span>,<span class="hljs-number">925464</span>,<span class="hljs-number">739495</span>,<span class="hljs-number">849041</span>,<span class="hljs-number">369865</span>,<span class="hljs-number">191927,755145</span>,<span class="hljs-number">205875</span>,<span class="hljs-number">408808</span>,<span class="hljs-number">877704</span>,<span class="hljs-number">543450</span>,<span class="hljs-number">358692</span>,<span class="hljs-number">622355</span>,<span class="hljs-number">219060,212010</span>,<span class="hljs-number">707992</span>,<span class="hljs-number">172084</span>,<span class="hljs-number">496648</span>,<span class="hljs-number">335087</span>,<span class="hljs-number">744217</span>,<span class="hljs-number">754843</span>,<span class="hljs-number">643159</span>,<span class="hljs-number">595521</span>,<span class="hljs-number">229994</span>,<span class="hljs-number">393561</span>,<span class="hljs-number">715216,192458</span>,<span class="hljs-number">123991,54768</span>,<span class="hljs-number">584229</span>,<span class="hljs-number">524542</span>,<span class="hljs-number">481834</span>,<span class="hljs-number">874896</span>,<span class="hljs-number">282444</span>,<span class="hljs-number">149118</span>,<span class="hljs-number">750606</span>,<span class="hljs-number">397747</span>,<span class="hljs-number">379004</span>,<span class="hljs-number">867698</span>,<span class="hljs-number">317087</span>,<span class="hljs-number">60707</span>,<span class="hljs-number">339913</span>,<span class="hljs-number">365468</span>,<span class="hljs-number">748672</span>,<span class="hljs-number">805960</span>,<span class="hljs-number">20114</span>,<span class="hljs-number">788301</span>,<span class="hljs-number">203946</span>,<span class="hljs-number">508697</span>,<span class="hljs-number">420883</span>,<span class="hljs-number">187291</span>,<span class="hljs-number">421379</span>,<span class="hljs-number">222404,871160</span>,<span class="hljs-number">539730</span>,<span class="hljs-number">215136</span>,<span class="hljs-number">272435</span>,<span class="hljs-number">312896</span>,<span class="hljs-number">52813</span>,<span class="hljs-number">482963</span>,<span class="hljs-number">571743</span>,<span class="hljs-number">610963</span>,<span class="hljs-number">93968</span>,<span class="hljs-number">991784</span>,<span class="hljs-number">795733</span>,<span class="hljs-number">570803</span>,<span class="hljs-number">956418</span>,<span class="hljs-number">363593</span>,<span class="hljs-number">358116</span>,<span class="hljs-number">311981</span>,<span class="hljs-number">506427</span>,<span class="hljs-number">305387</span>,<span class="hljs-number">259641</span>,<span class="hljs-number">822583</span>,<span class="hljs-number">337560</span>,<span class="hljs-number">186279</span>,<span class="hljs-number">628776</span>,<span class="hljs-number">987383</span>,<span class="hljs-number">267182,626224</span>,<span class="hljs-number">514872</span>,<span class="hljs-number">542776</span>,<span class="hljs-number">644036</span>,<span class="hljs-number">90580</span>,<span class="hljs-number">477623</span>,<span class="hljs-number">593741</span>,<span class="hljs-number">96602,190086</span>,<span class="hljs-number">838513</span>,<span class="hljs-number">594983</span>,<span class="hljs-number">161840,205045</span>,<span class="hljs-number">293721</span>,<span class="hljs-number">84028</span>,<span class="hljs-number">760943</span>,<span class="hljs-number">381814</span>,<span class="hljs-number">661593</span>,<span class="hljs-number">24832</span>,<span class="hljs-number">921867</span>,<span class="hljs-number">961857</span>,<span class="hljs-number">894035</span>,<span class="hljs-number">77936</span>,<span class="hljs-number">929527</span>,<span class="hljs-number">741941</span>,<span class="hljs-number">998069</span>,<span class="hljs-number">97810</span>,<span class="hljs-number">870892</span>,<span class="hljs-number">951418</span>,<span class="hljs-number">833754</span>,<span class="hljs-number">513990</span>,<span class="hljs-number">179110,783113</span>,<span class="hljs-number">810942</span>,<span class="hljs-number">692256</span>,<span class="hljs-number">368735</span>,<span class="hljs-number">248368</span>,<span class="hljs-number">868438</span>,<span class="hljs-number">874629</span>,<span class="hljs-number">358842</span>,<span class="hljs-number">804141,152056</span>,<span class="hljs-number">534927</span>,<span class="hljs-number">811956</span>,<span class="hljs-number">498152,92132</span>,<span class="hljs-number">393956</span>,<span class="hljs-number">981401</span>,<span class="hljs-number">979192</span>,<span class="hljs-number">878989</span>,<span class="hljs-number">254824,452106</span>,<span class="hljs-number">537647</span>,<span class="hljs-number">326031</span>,<span class="hljs-number">510513</span>,<span class="hljs-number">410375</span>,<span class="hljs-number">404274</span>,<span class="hljs-number">281760</span>,<span class="hljs-number">904284</span>,<span class="hljs-number">789150</span>,<span class="hljs-number">896858</span>,<span class="hljs-number">485347</span>,<span class="hljs-number">287987</span>,<span class="hljs-number">567686</span>,<span class="hljs-number">274533</span>,<span class="hljs-number">92169</span>,<span class="hljs-number">324330</span>,<span class="hljs-number">967702</span>,<span class="hljs-number">620548</span>,<span class="hljs-number">778758</span>,<span class="hljs-number">333963</span>,<span class="hljs-number">473152,234472</span>,<span class="hljs-number">49107,130232</span>,<span class="hljs-number">169422</span>,<span class="hljs-number">670872</span>,<span class="hljs-number">58158</span>,<span class="hljs-number">850784</span>,<span class="hljs-number">895324</span>,<span class="hljs-number">905214,4151</span>,<span class="hljs-number">563420</span>,<span class="hljs-number">626608</span>,<span class="hljs-number">378587</span>,<span class="hljs-number">117141</span>,<span class="hljs-number">765634</span>,<span class="hljs-number">517418</span>,<span class="hljs-number">919335</span>,<span class="hljs-number">617360</span>,<span class="hljs-number">161855,190828</span>,<span class="hljs-number">598054</span>,<span class="hljs-number">776160</span>,<span class="hljs-number">958526</span>,<span class="hljs-number">854454</span>,<span class="hljs-number">683773</span>,<span class="hljs-number">849670</span>,<span class="hljs-number">881878</span>,<span class="hljs-number">168848</span>,<span class="hljs-number">635034</span>,<span class="hljs-number">807239,168722</span>,<span class="hljs-number">902693</span>,<span class="hljs-number">658384</span>,<span class="hljs-number">63244,338212</span>,<span class="hljs-number">709657</span>,<span class="hljs-number">778215</span>,<span class="hljs-number">533396</span>,<span class="hljs-number">113799</span>,<span class="hljs-number">891074</span>,<span class="hljs-number">704076</span>,<span class="hljs-number">64078,67924</span>,<span class="hljs-number">730086</span>,<span class="hljs-number">961861</span>,<span class="hljs-number">787038</span>,<span class="hljs-number">502940</span>,<span class="hljs-number">749506</span>,<span class="hljs-number">866796</span>,<span class="hljs-number">965136,161806</span>,<span class="hljs-number">346822</span>,<span class="hljs-number">607052</span>,<span class="hljs-number">409492</span>,<span class="hljs-number">23404</span>,<span class="hljs-number">753626</span>,<span class="hljs-number">104232</span>,<span class="hljs-number">859036</span>,<span class="hljs-number">36216,400179</span>,<span class="hljs-number">267378</span>,<span class="hljs-number">697958</span>,<span class="hljs-number">435186</span>,<span class="hljs-number">898822</span>,<span class="hljs-number">293807</span>,<span class="hljs-number">928210</span>,<span class="hljs-number">972687</span>,<span class="hljs-number">764350</span>,<span class="hljs-number">747743</span>,<span class="hljs-number">621975</span>,<span class="hljs-number">895932</span>,<span class="hljs-number">216459,150379</span>,<span class="hljs-number">855694</span>,<span class="hljs-number">960960</span>,<span class="hljs-number">39846,797192</span>,<span class="hljs-number">106160,8902</span>,<span class="hljs-number">213117</span>,<span class="hljs-number">623391</span>,<span class="hljs-number">157002,670233</span>,<span class="hljs-number">386363</span>,<span class="hljs-number">981991</span>,<span class="hljs-number">627528</span>,<span class="hljs-number">980198,415135</span>,<span class="hljs-number">617757</span>,<span class="hljs-number">620720</span>,<span class="hljs-number">60625</span>,<span class="hljs-number">627867</span>,<span class="hljs-number">834487</span>,<span class="hljs-number">16891,853225</span>,<span class="hljs-number">195904</span>,<span class="hljs-number">427842</span>,<span class="hljs-number">42979</span>,<span class="hljs-number">579604</span>,<span class="hljs-number">591449</span>,<span class="hljs-number">116645</span>,<span class="hljs-number">482503</span>,<span class="hljs-number">104517,57414</span>,<span class="hljs-number">122551,5070</span>,<span class="hljs-number">618584</span>,<span class="hljs-number">762662</span>,<span class="hljs-number">749084</span>,<span class="hljs-number">213619,110723</span>,<span class="hljs-number">52409,520215</span>,<span class="hljs-number">697087</span>,<span class="hljs-number">936427</span>,<span class="hljs-number">33824</span>,<span class="hljs-number">271914</span>,<span class="hljs-number">613581</span>,<span class="hljs-number">214276,79788</span>,<span class="hljs-number">903778</span>,<span class="hljs-number">739798</span>,<span class="hljs-number">411910</span>,<span class="hljs-number">200346,113366</span>,<span class="hljs-number">842788</span>,<span class="hljs-number">969547</span>,<span class="hljs-number">666651</span>,<span class="hljs-number">697526</span>,<span class="hljs-number">985200,917132</span>,<span class="hljs-number">544229</span>,<span class="hljs-number">648357</span>,<span class="hljs-number">111819</span>,<span class="hljs-number">437344</span>,<span class="hljs-number">175196</span>,<span class="hljs-number">391479</span>,<span class="hljs-number">922457</span>,<span class="hljs-number">16952,232860</span>,<span class="hljs-number">341285</span>,<span class="hljs-number">414332</span>,<span class="hljs-number">232553,134335</span>,<span class="hljs-number">208160,193333</span>,<span class="hljs-number">731430</span>,<span class="hljs-number">892615</span>,<span class="hljs-number">678698</span>,<span class="hljs-number">215062</span>,<span class="hljs-number">396483</span>,<span class="hljs-number">41806,213174</span>,<span class="hljs-number">158094</span>,<span class="hljs-number">705649</span>,<span class="hljs-number">561158,250123</span>,<span class="hljs-number">556425</span>,<span class="hljs-number">452517</span>,<span class="hljs-number">276491</span>,<span class="hljs-number">838292</span>,<span class="hljs-number">257922</span>,<span class="hljs-number">886287</span>,<span class="hljs-number">861983</span>,<span class="hljs-number">484517</span>,<span class="hljs-number">667928</span>,<span class="hljs-number">175972</span>,<span class="hljs-number">877333</span>,<span class="hljs-number">858255,240681</span>,<span class="hljs-number">668902</span>,<span class="hljs-number">111304</span>,<span class="hljs-number">802680</span>,<span class="hljs-number">1137,410127</span>,<span class="hljs-number">266926</span>,<span class="hljs-number">241887</span>,<span class="hljs-number">983706</span>,<span class="hljs-number">75024</span>,<span class="hljs-number">429650</span>,<span class="hljs-number">936087</span>,<span class="hljs-number">15980,225716</span>,<span class="hljs-number">440442</span>,<span class="hljs-number">260753</span>,<span class="hljs-number">500075</span>,<span class="hljs-number">146501</span>,<span class="hljs-number">464676</span>,<span class="hljs-number">43037,249401</span>,<span class="hljs-number">504185,157270</span>,<span class="hljs-number">134326,20467</span>,<span class="hljs-number">56823</span>,<span class="hljs-number">430030</span>,<span class="hljs-number">945361</span>,<span class="hljs-number">620886</span>,<span class="hljs-number">235920</span>,<span class="hljs-number">482981</span>,<span class="hljs-number">483244,248136</span>,<span class="hljs-number">336668</span>,<span class="hljs-number">983058</span>,<span class="hljs-number">59722</span>,<span class="hljs-number">468389</span>,<span class="hljs-number">303831</span>,<span class="hljs-number">278271</span>,<span class="hljs-number">727098</span>,<span class="hljs-number">94744,141632</span>,<span class="hljs-number">424416</span>,<span class="hljs-number">585531</span>,<span class="hljs-number">571965</span>,<span class="hljs-number">791254,45821</span>,<span class="hljs-number">925532</span>,<span class="hljs-number">487792</span>,<span class="hljs-number">780940</span>,<span class="hljs-number">904442</span>,<span class="hljs-number">753487</span>,<span class="hljs-number">471469</span>,<span class="hljs-number">193398,94108</span>,<span class="hljs-number">90045</span>,<span class="hljs-number">546773</span>,<span class="hljs-number">42872,3280</span>,<span class="hljs-number">294088</span>,<span class="hljs-number">317871</span>,<span class="hljs-number">534388</span>,<span class="hljs-number">926314</span>,<span class="hljs-number">199383</span>,<span class="hljs-number">771069</span>,<span class="hljs-number">369277</span>,<span class="hljs-number">901461</span>,<span class="hljs-number">871107</span>,<span class="hljs-number">398811</span>,<span class="hljs-number">348109</span>,<span class="hljs-number">325929</span>,<span class="hljs-number">517701</span>,<span class="hljs-number">147240,255855</span>,<span class="hljs-number">848274</span>,<span class="hljs-number">106700</span>,<span class="hljs-number">847580</span>,<span class="hljs-number">896953</span>,<span class="hljs-number">682431</span>,<span class="hljs-number">799231</span>,<span class="hljs-number">556634</span>,<span class="hljs-number">752301</span>,<span class="hljs-number">43930</span>,<span class="hljs-number">677257</span>,<span class="hljs-number">211139</span>,<span class="hljs-number">519298</span>,<span class="hljs-number">910623</span>,<span class="hljs-number">60705,7062</span>,<span class="hljs-number">833920</span>,<span class="hljs-number">510246,257157</span>,<span class="hljs-number">278021</span>,<span class="hljs-number">190586</span>,<span class="hljs-number">968836</span>,<span class="hljs-number">497319</span>,<span class="hljs-number">294127</span>,<span class="hljs-number">864524</span>,<span class="hljs-number">333961</span>,<span class="hljs-number">147121</span>,<span class="hljs-number">773479</span>,<span class="hljs-number">528271</span>,<span class="hljs-number">886397</span>,<span class="hljs-number">932299</span>,<span class="hljs-number">408664</span>,<span class="hljs-number">915116</span>,<span class="hljs-number">339700</span>,<span class="hljs-number">366400</span>,<span class="hljs-number">203241,484148</span>,<span class="hljs-number">3694</span>,<span class="hljs-number">602681</span>,<span class="hljs-number">66182</span>,<span class="hljs-number">394993</span>,<span class="hljs-number">578627</span>,<span class="hljs-number">509322</span>,<span class="hljs-number">635981</span>,<span class="hljs-number">962551</span>,<span class="hljs-number">660560</span>,<span class="hljs-number">182794</span>,<span class="hljs-number">435333</span>,<span class="hljs-number">163391,860142</span>,<span class="hljs-number">715326</span>,<span class="hljs-number">988060</span>,<span class="hljs-number">209197</span>,<span class="hljs-number">320985</span>,<span class="hljs-number">624135,405134</span>,<span class="hljs-number">441837</span>,<span class="hljs-number">224225</span>,<span class="hljs-number">329735</span>,<span class="hljs-number">768997</span>,<span class="hljs-number">977110,916207</span>,<span class="hljs-number">588124</span>,<span class="hljs-number">554084</span>,<span class="hljs-number">537684</span>,<span class="hljs-number">8678,474130</span>,<span class="hljs-number">30108</span>,<span class="hljs-number">317540</span>,<span class="hljs-number">206012,295104</span>,<span class="hljs-number">95818</span>,<span class="hljs-number">985268</span>,<span class="hljs-number">580652</span>,<span class="hljs-number">502515</span>,<span class="hljs-number">329499</span>,<span class="hljs-number">970925</span>,<span class="hljs-number">121576</span>,<span class="hljs-number">962548</span>,<span class="hljs-number">801999</span>,<span class="hljs-number">395315</span>,<span class="hljs-number">126158,115886</span>,<span class="hljs-number">576841</span>,<span class="hljs-number">344471</span>,<span class="hljs-number">172753,92428</span>,<span class="hljs-number">749650</span>,<span class="hljs-number">540759</span>,<span class="hljs-number">324784</span>,<span class="hljs-number">9705</span>,<span class="hljs-number">309507</span>,<span class="hljs-number">323789</span>,<span class="hljs-number">486816</span>,<span class="hljs-number">568251,704137</span>,<span class="hljs-number">699486</span>,<span class="hljs-number">322537</span>,<span class="hljs-number">271710</span>,<span class="hljs-number">283686</span>,<span class="hljs-number">991527</span>,<span class="hljs-number">3562</span>,<span class="hljs-number">974651</span>,<span class="hljs-number">279507</span>,<span class="hljs-number">37247</span>,<span class="hljs-number">898282</span>,<span class="hljs-number">947281</span>,<span class="hljs-number">689631</span>,<span class="hljs-number">720719</span>,<span class="hljs-number">347250</span>,<span class="hljs-number">620262</span>,<span class="hljs-number">737922</span>,<span class="hljs-number">409755</span>,<span class="hljs-number">341796</span>,<span class="hljs-number">226106,4063</span>,<span class="hljs-number">88922</span>,<span class="hljs-number">754806</span>,<span class="hljs-number">234215</span>,<span class="hljs-number">724510</span>,<span class="hljs-number">710539</span>,<span class="hljs-number">285556</span>,<span class="hljs-number">431197</span>,<span class="hljs-number">687964</span>,<span class="hljs-number">954378</span>,<span class="hljs-number">157701,27263</span>,<span class="hljs-number">741131</span>,<span class="hljs-number">807450</span>,<span class="hljs-number">160117</span>,<span class="hljs-number">990586</span>,<span class="hljs-number">264182</span>,<span class="hljs-number">499659</span>,<span class="hljs-number">738112</span>,<span class="hljs-number">451940</span>,<span class="hljs-number">605336</span>,<span class="hljs-number">726214</span>,<span class="hljs-number">409759</span>,<span class="hljs-number">788552</span>,<span class="hljs-number">94480,35871</span>,<span class="hljs-number">309802</span>,<span class="hljs-number">472596</span>,<span class="hljs-number">911716</span>,<span class="hljs-number">902442</span>,<span class="hljs-number">353205,56188</span>,<span class="hljs-number">882450</span>,<span class="hljs-number">535094</span>,<span class="hljs-number">254681,49185</span>,<span class="hljs-number">389878</span>,<span class="hljs-number">454002</span>,<span class="hljs-number">464202</span>,<span class="hljs-number">326828</span>,<span class="hljs-number">863080</span>,<span class="hljs-number">977456</span>,<span class="hljs-number">629460</span>,<span class="hljs-number">650041</span>,<span class="hljs-number">995884</span>,<span class="hljs-number">818106,164568</span>,<span class="hljs-number">242638</span>,<span class="hljs-number">267570</span>,<span class="hljs-number">106255,622171</span>,<span class="hljs-number">745253,753186</span>,<span class="hljs-number">537874</span>,<span class="hljs-number">678053</span>,<span class="hljs-number">407225,5265</span>,<span class="hljs-number">270833</span>,<span class="hljs-number">865975</span>,<span class="hljs-number">833162</span>,<span class="hljs-number">555859</span>,<span class="hljs-number">18385,506145</span>,<span class="hljs-number">470653</span>,<span class="hljs-number">376322</span>,<span class="hljs-number">949499</span>,<span class="hljs-number">820969</span>,<span class="hljs-number">298086</span>,<span class="hljs-number">231308,52802</span>,<span class="hljs-number">2777,908186</span>,<span class="hljs-number">315263</span>,<span class="hljs-number">674914</span>,<span class="hljs-number">398180</span>,<span class="hljs-number">930064</span>,<span class="hljs-number">498937</span>,<span class="hljs-number">580896</span>,<span class="hljs-number">517750</span>,<span class="hljs-number">126815</span>,<span class="hljs-number">875690</span>,<span class="hljs-number">491915</span>,<span class="hljs-number">12680,121503</span>,<span class="hljs-number">390994</span>,<span class="hljs-number">747063</span>,<span class="hljs-number">966241,153827</span>,<span class="hljs-number">154862,850203</span>,<span class="hljs-number">136726,64978</span>,<span class="hljs-number">934183,338180</span>,<span class="hljs-number">739629</span>,<span class="hljs-number">193870,62510</span>,<span class="hljs-number">683276</span>,<span class="hljs-number">403680</span>,<span class="hljs-number">41731</span>,<span class="hljs-number">511520</span>,<span class="hljs-number">873899</span>,<span class="hljs-number">325040</span>,<span class="hljs-number">408644</span>,<span class="hljs-number">972831</span>,<span class="hljs-number">214722</span>,<span class="hljs-number">572613</span>,<span class="hljs-number">83281,95415</span>,<span class="hljs-number">691927</span>,<span class="hljs-number">393565</span>,<span class="hljs-number">188122</span>,<span class="hljs-number">806322</span>,<span class="hljs-number">685907</span>,<span class="hljs-number">773168,851200</span>,<span class="hljs-number">455690</span>,<span class="hljs-number">405266</span>,<span class="hljs-number">582206,49291</span>,<span class="hljs-number">76198,78622</span>,<span class="hljs-number">561357</span>,<span class="hljs-number">268023</span>,<span class="hljs-number">150928</span>,<span class="hljs-number">989679</span>,<span class="hljs-number">448175</span>,<span class="hljs-number">977437</span>,<span class="hljs-number">939514</span>,<span class="hljs-number">387217</span>,<span class="hljs-number">322469</span>,<span class="hljs-number">203920,630175</span>,<span class="hljs-number">248253</span>,<span class="hljs-number">671885</span>,<span class="hljs-number">449683</span>,<span class="hljs-number">16954</span>,<span class="hljs-number">560725</span>,<span class="hljs-number">958444</span>,<span class="hljs-number">320632</span>,<span class="hljs-number">119608</span>,<span class="hljs-number">547506</span>,<span class="hljs-number">317191</span>,<span class="hljs-number">826879</span>,<span class="hljs-number">92620</span>,<span class="hljs-number">958392</span>,<span class="hljs-number">590483</span>,<span class="hljs-number">275058</span>,<span class="hljs-number">367926</span>,<span class="hljs-number">854902</span>,<span class="hljs-number">487816</span>,<span class="hljs-number">155929,690180</span>,<span class="hljs-number">372485</span>,<span class="hljs-number">307463</span>,<span class="hljs-number">670182</span>,<span class="hljs-number">782019</span>,<span class="hljs-number">942601</span>,<span class="hljs-number">546200,71996</span>,<span class="hljs-number">650400</span>,<span class="hljs-number">319976</span>,<span class="hljs-number">256843</span>,<span class="hljs-number">971159</span>,<span class="hljs-number">918992</span>,<span class="hljs-number">827456</span>,<span class="hljs-number">336922</span>,<span class="hljs-number">973881</span>,<span class="hljs-number">124603,199973</span>,<span class="hljs-number">689903</span>,<span class="hljs-number">91135,478143</span>,<span class="hljs-number">447673</span>,<span class="hljs-number">455912</span>,<span class="hljs-number">950230</span>,<span class="hljs-number">496654</span>,<span class="hljs-number">692726</span>,<span class="hljs-number">505002</span>,<span class="hljs-number">517341</span>,<span class="hljs-number">559466</span>,<span class="hljs-number">90077,114398</span>,<span class="hljs-number">988872</span>,<span class="hljs-number">138369,250721</span>,<span class="hljs-number">647611</span>,<span class="hljs-number">661647</span>,<span class="hljs-number">337743</span>,<span class="hljs-number">231212</span>,<span class="hljs-number">585842</span>,<span class="hljs-number">532472</span>,<span class="hljs-number">51084,232362</span>,<span class="hljs-number">945823</span>,<span class="hljs-number">637842</span>,<span class="hljs-number">531421</span>,<span class="hljs-number">380717</span>,<span class="hljs-number">27453</span>,<span class="hljs-number">542261</span>,<span class="hljs-number">545919</span>,<span class="hljs-number">398074</span>,<span class="hljs-number">99012,181016</span>,<span class="hljs-number">351475</span>,<span class="hljs-number">800855</span>,<span class="hljs-number">946418</span>,<span class="hljs-number">925212,840155</span>,<span class="hljs-number">217755</span>,<span class="hljs-number">736977</span>,<span class="hljs-number">118308</span>,<span class="hljs-number">652003</span>,<span class="hljs-number">647915</span>,<span class="hljs-number">553161</span>,<span class="hljs-number">767984</span>,<span class="hljs-number">385038</span>,<span class="hljs-number">11255</span>,<span class="hljs-number">735922</span>,<span class="hljs-number">858518</span>,<span class="hljs-number">667008</span>,<span class="hljs-number">475788</span>,<span class="hljs-number">900594</span>,<span class="hljs-number">415110,698226</span>,<span class="hljs-number">373742</span>,<span class="hljs-number">521803</span>,<span class="hljs-number">715473</span>,<span class="hljs-number">342666</span>,<span class="hljs-number">283859</span>,<span class="hljs-number">894453</span>,<span class="hljs-number">913421</span>,<span class="hljs-number">697979</span>,<span class="hljs-number">720569</span>,<span class="hljs-number">336742</span>,<span class="hljs-number">289837</span>,<span class="hljs-number">139012,294227</span>,<span class="hljs-number">793443</span>,<span class="hljs-number">952270</span>,<span class="hljs-number">629354</span>,<span class="hljs-number">54438,143504</span>,<span class="hljs-number">342279</span>,<span class="hljs-number">437846</span>,<span class="hljs-number">205815</span>,<span class="hljs-number">732083</span>,<span class="hljs-number">7367</span>,<span class="hljs-number">690854</span>,<span class="hljs-number">230338</span>,<span class="hljs-number">584780</span>,<span class="hljs-number">645404</span>,<span class="hljs-number">584500</span>,<span class="hljs-number">413213,967228</span>,<span class="hljs-number">604977</span>,<span class="hljs-number">711068</span>,<span class="hljs-number">261696</span>,<span class="hljs-number">454040</span>,<span class="hljs-number">427191,248311</span>,<span class="hljs-number">292915</span>,<span class="hljs-number">274630</span>,<span class="hljs-number">727819</span>,<span class="hljs-number">925435</span>,<span class="hljs-number">700266</span>,<span class="hljs-number">848661</span>,<span class="hljs-number">894097</span>,<span class="hljs-number">215630,1287</span>,<span class="hljs-number">963364</span>,<span class="hljs-number">883797</span>,<span class="hljs-number">387437</span>,<span class="hljs-number">716331</span>,<span class="hljs-number">234039</span>,<span class="hljs-number">426311</span>,<span class="hljs-number">412049</span>,<span class="hljs-number">950312</span>,<span class="hljs-number">183449</span>,<span class="hljs-number">317349</span>,<span class="hljs-number">954201,133009</span>,<span class="hljs-number">527709</span>,<span class="hljs-number">38628</span>,<span class="hljs-number">421654</span>,<span class="hljs-number">50535,92850</span>,<span class="hljs-number">793995</span>,<span class="hljs-number">228292</span>,<span class="hljs-number">474295</span>,<span class="hljs-number">204357</span>,<span class="hljs-number">981680</span>,<span class="hljs-number">696426</span>,<span class="hljs-number">628260</span>,<span class="hljs-number">926183,4123</span>,<span class="hljs-number">584011</span>,<span class="hljs-number">339078</span>,<span class="hljs-number">763622</span>,<span class="hljs-number">931809</span>,<span class="hljs-number">754844</span>,<span class="hljs-number">379248</span>,<span class="hljs-number">741633</span>,<span class="hljs-number">976360</span>,<span class="hljs-number">286823</span>,<span class="hljs-number">691316</span>,<span class="hljs-number">996952</span>,<span class="hljs-number">964406</span>,<span class="hljs-number">558305</span>,<span class="hljs-number">976819</span>,<span class="hljs-number">642913</span>,<span class="hljs-number">670532</span>,<span class="hljs-number">909063</span>,<span class="hljs-number">626030</span>,<span class="hljs-number">321872</span>,<span class="hljs-number">262603</span>,<span class="hljs-number">851823</span>,<span class="hljs-number">571898</span>,<span class="hljs-number">556971</span>,<span class="hljs-number">276585</span>,<span class="hljs-number">730130</span>,<span class="hljs-number">632926</span>,<span class="hljs-number">115132</span>,<span class="hljs-number">997919</span>,<span class="hljs-number">525290</span>,<span class="hljs-number">487080</span>,<span class="hljs-number">550791</span>,<span class="hljs-number">970129</span>,<span class="hljs-number">906328</span>,<span class="hljs-number">309838</span>,<span class="hljs-number">3059</span>,<span class="hljs-number">539325</span>,<span class="hljs-number">15263,684113</span>,<span class="hljs-number">508854</span>,<span class="hljs-number">882644</span>,<span class="hljs-number">567154,189332</span>,<span class="hljs-number">93140</span>,<span class="hljs-number">350600</span>,<span class="hljs-number">569698</span>,<span class="hljs-number">134997</span>,<span class="hljs-number">333913</span>,<span class="hljs-number">25137,36171</span>,<span class="hljs-number">641550</span>,<span class="hljs-number">230857</span>,<span class="hljs-number">712753</span>,<span class="hljs-number">481445</span>,<span class="hljs-number">457466</span>,<span class="hljs-number">973441</span>,<span class="hljs-number">511102</span>,<span class="hljs-number">291626</span>,<span class="hljs-number">21998,173705</span>,<span class="hljs-number">540506</span>,<span class="hljs-number">506981</span>,<span class="hljs-number">912176</span>,<span class="hljs-number">927307</span>,<span class="hljs-number">95751,17876</span>,<span class="hljs-number">278006</span>,<span class="hljs-number">855251</span>,<span class="hljs-number">265451</span>,<span class="hljs-number">562229,208760</span>,<span class="hljs-number">8582</span>,<span class="hljs-number">294965</span>,<span class="hljs-number">507770</span>,<span class="hljs-number">641979</span>,<span class="hljs-number">404042</span>,<span class="hljs-number">838246,184180</span>,<span class="hljs-number">605377</span>,<span class="hljs-number">928426</span>,<span class="hljs-number">82486</span>,<span class="hljs-number">918734</span>,<span class="hljs-number">938340</span>,<span class="hljs-number">192032,936229</span>,<span class="hljs-number">93117</span>,<span class="hljs-number">989597</span>,<span class="hljs-number">638671</span>,<span class="hljs-number">395544</span>,<span class="hljs-number">99328</span>,<span class="hljs-number">408098</span>,<span class="hljs-number">169602</span>,<span class="hljs-number">894373</span>,<span class="hljs-number">519304</span>,<span class="hljs-number">705480</span>,<span class="hljs-number">736600</span>,<span class="hljs-number">261712</span>,<span class="hljs-number">641753</span>,<span class="hljs-number">343511</span>,<span class="hljs-number">795979</span>,<span class="hljs-number">430137,199842</span>,<span class="hljs-number">917141</span>,<span class="hljs-number">910929</span>,<span class="hljs-number">420965</span>,<span class="hljs-number">902976</span>,<span class="hljs-number">901427</span>,<span class="hljs-number">407457</span>,<span class="hljs-number">422269</span>,<span class="hljs-number">739968</span>,<span class="hljs-number">457913</span>,<span class="hljs-number">925844</span>,<span class="hljs-number">313722</span>,<span class="hljs-number">229223</span>,<span class="hljs-number">366051</span>,<span class="hljs-number">934395</span>,<span class="hljs-number">391875</span>,<span class="hljs-number">392385</span>,<span class="hljs-number">354664</span>,<span class="hljs-number">325740</span>,<span class="hljs-number">278450</span>,<span class="hljs-number">276132</span>,<span class="hljs-number">576915</span>,<span class="hljs-number">388656</span>,<span class="hljs-number">855638</span>,<span class="hljs-number">620666</span>,<span class="hljs-number">969106</span>,<span class="hljs-number">410901</span>,<span class="hljs-number">865421</span>,<span class="hljs-number">658185</span>,<span class="hljs-number">440584</span>,<span class="hljs-number">901876</span>,<span class="hljs-number">788618</span>,<span class="hljs-number">418004</span>,<span class="hljs-number">120936</span>,<span class="hljs-number">740934</span>,<span class="hljs-number">143937</span>,<span class="hljs-number">398088</span>,<span class="hljs-number">836364</span>,<span class="hljs-number">32518</span>,<span class="hljs-number">494576</span>,<span class="hljs-number">878500</span>,<span class="hljs-number">647258</span>,<span class="hljs-number">973157</span>,<span class="hljs-number">376635</span>,<span class="hljs-number">893761</span>,<span class="hljs-number">213106,69008</span>,<span class="hljs-number">553643</span>,<span class="hljs-number">433469</span>,<span class="hljs-number">157969</span>,<span class="hljs-number">491992</span>,<span class="hljs-number">995129</span>,<span class="hljs-number">321380</span>,<span class="hljs-number">611490</span>,<span class="hljs-number">638591</span>,<span class="hljs-number">477663</span>,<span class="hljs-number">980777</span>,<span class="hljs-number">380470</span>,<span class="hljs-number">988734</span>,<span class="hljs-number">719044</span>,<span class="hljs-number">335309</span>,<span class="hljs-number">21983</span>,<span class="hljs-number">833449</span>,<span class="hljs-number">529809</span>,<span class="hljs-number">751521</span>,<span class="hljs-number">910619</span>,<span class="hljs-number">852713</span>,<span class="hljs-number">582393</span>,<span class="hljs-number">420611</span>,<span class="hljs-number">792183</span>,<span class="hljs-number">906758</span>,<span class="hljs-number">659540</span>,<span class="hljs-number">118840,737101</span>,<span class="hljs-number">385987</span>,<span class="hljs-number">282001</span>,<span class="hljs-number">42594,441198</span>,<span class="hljs-number">290066</span>,<span class="hljs-number">734093</span>,<span class="hljs-number">650766</span>,<span class="hljs-number">662083</span>,<span class="hljs-number">639502</span>,<span class="hljs-number">53694</span>,<span class="hljs-number">853260</span>,<span class="hljs-number">54243,119713</span>,<span class="hljs-number">889017</span>,<span class="hljs-number">232016,185481</span>,<span class="hljs-number">240205</span>,<span class="hljs-number">374646</span>,<span class="hljs-number">786262</span>,<span class="hljs-number">926688</span>,<span class="hljs-number">807576</span>,<span class="hljs-number">895931</span>,<span class="hljs-number">336108</span>,<span class="hljs-number">878867</span>,<span class="hljs-number">676564</span>,<span class="hljs-number">676006</span>,<span class="hljs-number">182278,586154</span>,<span class="hljs-number">961710</span>,<span class="hljs-number">308416</span>,<span class="hljs-number">807021</span>,<span class="hljs-number">707663</span>,<span class="hljs-number">895273</span>,<span class="hljs-number">484534</span>,<span class="hljs-number">140718</span>,<span class="hljs-number">382476</span>,<span class="hljs-number">131711</span>,<span class="hljs-number">840301</span>,<span class="hljs-number">455585</span>,<span class="hljs-number">324144,369222</span>,<span class="hljs-number">265332</span>,<span class="hljs-number">513883</span>,<span class="hljs-number">197177</span>,<span class="hljs-number">798832</span>,<span class="hljs-number">391207,145356</span>,<span class="hljs-number">143048</span>,<span class="hljs-number">965040</span>,<span class="hljs-number">395358</span>,<span class="hljs-number">551007</span>,<span class="hljs-number">687146</span>,<span class="hljs-number">401090</span>,<span class="hljs-number">10277</span>,<span class="hljs-number">950710</span>,<span class="hljs-number">974657</span>,<span class="hljs-number">764043</span>,<span class="hljs-number">505815</span>,<span class="hljs-number">223605</span>,<span class="hljs-number">565689</span>,<span class="hljs-number">149856</span>,<span class="hljs-number">895305</span>,<span class="hljs-number">883766</span>,<span class="hljs-number">102498,109505</span>,<span class="hljs-number">932649</span>,<span class="hljs-number">621423</span>,<span class="hljs-number">968301</span>,<span class="hljs-number">402919</span>,<span class="hljs-number">321660</span>,<span class="hljs-number">567196</span>,<span class="hljs-number">752500</span>,<span class="hljs-number">66861</span>,<span class="hljs-number">279291</span>,<span class="hljs-number">990405</span>,<span class="hljs-number">179463</span>,<span class="hljs-number">815058</span>,<span class="hljs-number">551786</span>,<span class="hljs-number">48959</span>,<span class="hljs-number">811810</span>,<span class="hljs-number">881482</span>,<span class="hljs-number">917820</span>,<span class="hljs-number">257155</span>,<span class="hljs-number">401923</span>,<span class="hljs-number">406866</span>,<span class="hljs-number">424188,14551</span>,<span class="hljs-number">807945</span>,<span class="hljs-number">680902</span>,<span class="hljs-number">513016</span>,<span class="hljs-number">752973</span>,<span class="hljs-number">10278</span>,<span class="hljs-number">702964</span>,<span class="hljs-number">823794</span>,<span class="hljs-number">431145,64460</span>,<span class="hljs-number">916240</span>,<span class="hljs-number">953530</span>,<span class="hljs-number">354046</span>,<span class="hljs-number">821459</span>,<span class="hljs-number">842480</span>,<span class="hljs-number">72697,480158</span>,<span class="hljs-number">574447</span>,<span class="hljs-number">204674,782252</span>,<span class="hljs-number">700022</span>,<span class="hljs-number">756622</span>,<span class="hljs-number">119327,131610</span>,<span class="hljs-number">375760</span>,<span class="hljs-number">425636</span>,<span class="hljs-number">615192</span>,<span class="hljs-number">600018</span>,<span class="hljs-number">492036</span>,<span class="hljs-number">459305</span>,<span class="hljs-number">428497</span>,<span class="hljs-number">217277</span>,<span class="hljs-number">876271</span>,<span class="hljs-number">843061</span>,<span class="hljs-number">244282,661150</span>,<span class="hljs-number">989988</span>,<span class="hljs-number">749297</span>,<span class="hljs-number">986554</span>,<span class="hljs-number">591502</span>,<span class="hljs-number">396875</span>,<span class="hljs-number">121495,194143</span>,<span class="hljs-number">395989</span>,<span class="hljs-number">597593</span>,<span class="hljs-number">675733</span>,<span class="hljs-number">145385</span>,<span class="hljs-number">587671</span>,<span class="hljs-number">623034</span>,<span class="hljs-number">196867</span>,<span class="hljs-number">266940</span>,<span class="hljs-number">360933</span>,<span class="hljs-number">486051</span>,<span class="hljs-number">586628</span>,<span class="hljs-number">677402</span>,<span class="hljs-number">70578</span>,<span class="hljs-number">322974</span>,<span class="hljs-number">767102,123498</span>,<span class="hljs-number">807979</span>,<span class="hljs-number">623968</span>,<span class="hljs-number">92528</span>,<span class="hljs-number">917481</span>,<span class="hljs-number">423405</span>,<span class="hljs-number">432114,116858</span>,<span class="hljs-number">517511</span>,<span class="hljs-number">176269,98259</span>,<span class="hljs-number">629482</span>,<span class="hljs-number">945027</span>,<span class="hljs-number">437091</span>,<span class="hljs-number">260249,153601</span>,<span class="hljs-number">199042</span>,<span class="hljs-number">446001</span>,<span class="hljs-number">810401</span>,<span class="hljs-number">773100,273221</span>,<span class="hljs-number">885328</span>,<span class="hljs-number">61021,115848</span>,<span class="hljs-number">440569</span>,<span class="hljs-number">522251,202777</span>,<span class="hljs-number">374264</span>,<span class="hljs-number">832347</span>,<span class="hljs-number">206340</span>,<span class="hljs-number">839919</span>,<span class="hljs-number">951768</span>,<span class="hljs-number">906940</span>,<span class="hljs-number">577983</span>,<span class="hljs-number">700228,147106</span>,<span class="hljs-number">538388</span>,<span class="hljs-number">367427</span>,<span class="hljs-number">317313</span>,<span class="hljs-number">632324</span>,<span class="hljs-number">740844</span>,<span class="hljs-number">270532</span>,<span class="hljs-number">215966</span>,<span class="hljs-number">965672</span>,<span class="hljs-number">703960</span>,<span class="hljs-number">716157</span>,<span class="hljs-number">412425</span>,<span class="hljs-number">387474</span>,<span class="hljs-number">552599</span>,<span class="hljs-number">714028</span>,<span class="hljs-number">532980</span>,<span class="hljs-number">914547</span>,<span class="hljs-number">410322</span>,<span class="hljs-number">997253</span>,<span class="hljs-number">937714</span>,<span class="hljs-number">15020</span>,<span class="hljs-number">607973</span>,<span class="hljs-number">797123,161870</span>,<span class="hljs-number">559545</span>,<span class="hljs-number">885882</span>,<span class="hljs-number">735159</span>,<span class="hljs-number">799354</span>,<span class="hljs-number">330695</span>,<span class="hljs-number">483380</span>,<span class="hljs-number">911460</span>,<span class="hljs-number">389203</span>,<span class="hljs-number">412553</span>,<span class="hljs-number">228762</span>,<span class="hljs-number">716794</span>,<span class="hljs-number">962931</span>,<span class="hljs-number">166606</span>,<span class="hljs-number">272820</span>,<span class="hljs-number">335882</span>,<span class="hljs-number">995239</span>,<span class="hljs-number">618792</span>,<span class="hljs-number">702010</span>,<span class="hljs-number">571507</span>,<span class="hljs-number">180735</span>,<span class="hljs-number">496327</span>,<span class="hljs-number">14941</span>,<span class="hljs-number">434628</span>,<span class="hljs-number">857604</span>,<span class="hljs-number">93412,530134</span>,<span class="hljs-number">318556</span>,<span class="hljs-number">233938,179692</span>,<span class="hljs-number">332138,120551</span>,<span class="hljs-number">253805</span>,<span class="hljs-number">977053</span>,<span class="hljs-number">120868</span>,<span class="hljs-number">763795</span>,<span class="hljs-number">365177</span>,<span class="hljs-number">793927</span>,<span class="hljs-number">372998</span>,<span class="hljs-number">277407</span>,<span class="hljs-number">170369</span>,<span class="hljs-number">667669</span>,<span class="hljs-number">223637</span>,<span class="hljs-number">350068</span>,<span class="hljs-number">529894</span>,<span class="hljs-number">852150</span>,<span class="hljs-number">998449</span>,<span class="hljs-number">629099</span>,<span class="hljs-number">463039</span>,<span class="hljs-number">266484</span>,<span class="hljs-number">889973</span>,<span class="hljs-number">742375</span>,<span class="hljs-number">560380</span>,<span class="hljs-number">441324</span>,<span class="hljs-number">475812</span>,<span class="hljs-number">801332</span>,<span class="hljs-number">133652,103694</span>,<span class="hljs-number">529692</span>,<span class="hljs-number">154502</span>,<span class="hljs-number">681373</span>,<span class="hljs-number">427020</span>,<span class="hljs-number">658169,30971</span>,<span class="hljs-number">102928,668159</span>,<span class="hljs-number">242020</span>,<span class="hljs-number">421010</span>,<span class="hljs-number">970060</span>,<span class="hljs-number">698587</span>,<span class="hljs-number">736126,227118</span>,<span class="hljs-number">358562</span>,<span class="hljs-number">463595</span>,<span class="hljs-number">643318</span>,<span class="hljs-number">852296</span>,<span class="hljs-number">622424</span>,<span class="hljs-number">859413</span>,<span class="hljs-number">417161</span>,<span class="hljs-number">516956</span>,<span class="hljs-number">493971</span>,<span class="hljs-number">347342</span>,<span class="hljs-number">867503</span>,<span class="hljs-number">379660</span>,<span class="hljs-number">264345</span>,<span class="hljs-number">664518</span>,<span class="hljs-number">923804</span>,<span class="hljs-number">343230</span>,<span class="hljs-number">824772</span>,<span class="hljs-number">77327</span>,<span class="hljs-number">592275</span>,<span class="hljs-number">831708</span>,<span class="hljs-number">56556</span>,<span class="hljs-number">324890</span>,<span class="hljs-number">273228,607173</span>,<span class="hljs-number">78056</span>,<span class="hljs-number">662324</span>,<span class="hljs-number">245757,718236</span>,<span class="hljs-number">724396</span>,<span class="hljs-number">940804</span>,<span class="hljs-number">939093</span>,<span class="hljs-number">486800</span>,<span class="hljs-number">913858</span>,<span class="hljs-number">301602</span>,<span class="hljs-number">894940</span>,<span class="hljs-number">749635</span>,<span class="hljs-number">330459</span>,<span class="hljs-number">513148</span>,<span class="hljs-number">466518</span>,<span class="hljs-number">537385</span>,<span class="hljs-number">35532,181158</span>,<span class="hljs-number">6368,127278</span>,<span class="hljs-number">246004</span>,<span class="hljs-number">467539</span>,<span class="hljs-number">25850</span>,<span class="hljs-number">735305</span>,<span class="hljs-number">703053</span>,<span class="hljs-number">871374</span>,<span class="hljs-number">293503</span>,<span class="hljs-number">504483</span>,<span class="hljs-number">527248</span>,<span class="hljs-number">838858</span>,<span class="hljs-number">648494</span>,<span class="hljs-number">817525</span>,<span class="hljs-number">498086</span>,<span class="hljs-number">7953</span>,<span class="hljs-number">275389</span>,<span class="hljs-number">372628</span>,<span class="hljs-number">870246,103670</span>,<span class="hljs-number">449353</span>,<span class="hljs-number">599452</span>,<span class="hljs-number">495469</span>,<span class="hljs-number">951625</span>,<span class="hljs-number">277684</span>,<span class="hljs-number">554132</span>,<span class="hljs-number">867070</span>,<span class="hljs-number">203681</span>,<span class="hljs-number">288089</span>,<span class="hljs-number">984972</span>,<span class="hljs-number">137307</span>,<span class="hljs-number">945954</span>,<span class="hljs-number">432428</span>,<span class="hljs-number">613779</span>,<span class="hljs-number">612793</span>,<span class="hljs-number">674842</span>,<span class="hljs-number">309513</span>,<span class="hljs-number">573603</span>,<span class="hljs-number">626859</span>,<span class="hljs-number">286762</span>,<span class="hljs-number">60890,764253</span>,<span class="hljs-number">494459</span>,<span class="hljs-number">105263,70483</span>,<span class="hljs-number">627169,20502</span>,<span class="hljs-number">67562,203600</span>,<span class="hljs-number">711589</span>,<span class="hljs-number">495252</span>,<span class="hljs-number">757792</span>,<span class="hljs-number">474236,502235</span>,<span class="hljs-number">632384</span>,<span class="hljs-number">779590</span>,<span class="hljs-number">463986</span>,<span class="hljs-number">564901</span>,<span class="hljs-number">283435</span>,<span class="hljs-number">934876</span>,<span class="hljs-number">859227,11664</span>,<span class="hljs-number">528803</span>,<span class="hljs-number">32379,177336</span>,<span class="hljs-number">863779</span>,<span class="hljs-number">809396</span>,<span class="hljs-number">718218</span>,<span class="hljs-number">593337</span>,<span class="hljs-number">604758</span>,<span class="hljs-number">600022</span>,<span class="hljs-number">252403,469204</span>,<span class="hljs-number">988329</span>,<span class="hljs-number">172616</span>,<span class="hljs-number">931814</span>,<span class="hljs-number">379176,115242</span>,<span class="hljs-number">347886</span>,<span class="hljs-number">584903</span>,<span class="hljs-number">229240</span>,<span class="hljs-number">325001</span>,<span class="hljs-number">535495</span>,<span class="hljs-number">841550</span>,<span class="hljs-number">475187</span>,<span class="hljs-number">513997</span>,<span class="hljs-number">679718</span>,<span class="hljs-number">628227</span>,<span class="hljs-number">644049</span>,<span class="hljs-number">79779</span>,<span class="hljs-number">629801</span>,<span class="hljs-number">625916</span>,<span class="hljs-number">963851</span>,<span class="hljs-number">447872</span>,<span class="hljs-number">783453</span>,<span class="hljs-number">731424</span>,<span class="hljs-number">289769</span>,<span class="hljs-number">508708</span>,<span class="hljs-number">308735</span>,<span class="hljs-number">915187,238232</span>,<span class="hljs-number">695660</span>,<span class="hljs-number">212973</span>,<span class="hljs-number">633380</span>,<span class="hljs-number">221897,167048</span>,<span class="hljs-number">808904</span>,<span class="hljs-number">946041</span>,<span class="hljs-number">305538</span>,<span class="hljs-number">574681</span>,<span class="hljs-number">946316</span>,<span class="hljs-number">63072</span>,<span class="hljs-number">647883</span>,<span class="hljs-number">688453</span>,<span class="hljs-number">877199</span>,<span class="hljs-number">804910</span>,<span class="hljs-number">705277</span>,<span class="hljs-number">440658</span>,<span class="hljs-number">555339</span>,<span class="hljs-number">712144</span>,<span class="hljs-number">471037</span>,<span class="hljs-number">755711</span>,<span class="hljs-number">721023</span>,<span class="hljs-number">505952</span>,<span class="hljs-number">83834</span>,<span class="hljs-number">298013</span>,<span class="hljs-number">77200</span>,<span class="hljs-number">967484</span>,<span class="hljs-number">230406</span>,<span class="hljs-number">451278</span>,<span class="hljs-number">173239</span>,<span class="hljs-number">874511</span>,<span class="hljs-number">380484</span>,<span class="hljs-number">200668</span>,<span class="hljs-number">789769</span>,<span class="hljs-number">400162</span>,<span class="hljs-number">398465</span>,<span class="hljs-number">259720</span>,<span class="hljs-number">539161,202177</span>,<span class="hljs-number">959951</span>,<span class="hljs-number">466621</span>,<span class="hljs-number">13370,793109</span>,<span class="hljs-number">541695</span>,<span class="hljs-number">416148,121981</span>,<span class="hljs-number">351263</span>,<span class="hljs-number">626454</span>,<span class="hljs-number">598787</span>,<span class="hljs-number">838363</span>,<span class="hljs-number">951788</span>,<span class="hljs-number">250578,29454</span>,<span class="hljs-number">718070</span>,<span class="hljs-number">66180,122064</span>,<span class="hljs-number">393931</span>,<span class="hljs-number">374881</span>,<span class="hljs-number">655994</span>,<span class="hljs-number">504761</span>,<span class="hljs-number">911521</span>,<span class="hljs-number">872366</span>,<span class="hljs-number">408284</span>,<span class="hljs-number">79729,98697</span>,<span class="hljs-number">783872</span>,<span class="hljs-number">668485</span>,<span class="hljs-number">635100</span>,<span class="hljs-number">352262</span>,<span class="hljs-number">383853</span>,<span class="hljs-number">277600</span>,<span class="hljs-number">869345</span>,<span class="hljs-number">606967</span>,<span class="hljs-number">467589</span>,<span class="hljs-number">59066</span>,<span class="hljs-number">720490</span>,<span class="hljs-number">728822</span>,<span class="hljs-number">654946</span>,<span class="hljs-number">232281,240804</span>,<span class="hljs-number">235110</span>,<span class="hljs-number">632501</span>,<span class="hljs-number">833348</span>,<span class="hljs-number">760838</span>,<span class="hljs-number">747357</span>,<span class="hljs-number">559717</span>,<span class="hljs-number">975025</span>,<span class="hljs-number">825748</span>,<span class="hljs-number">719095</span>,<span class="hljs-number">16872</span>,<span class="hljs-number">293834</span>,<span class="hljs-number">39582,203708</span>,<span class="hljs-number">946374</span>,<span class="hljs-number">947029</span>,<span class="hljs-number">731545</span>,<span class="hljs-number">483274</span>,<span class="hljs-number">56466</span>,<span class="hljs-number">478793</span>,<span class="hljs-number">184143,197004</span>,<span class="hljs-number">580381</span>,<span class="hljs-number">798980</span>,<span class="hljs-number">549304</span>,<span class="hljs-number">931030</span>,<span class="hljs-number">167553</span>,<span class="hljs-number">511926</span>,<span class="hljs-number">424828</span>,<span class="hljs-number">624015</span>,<span class="hljs-number">206446</span>,<span class="hljs-number">428618</span>,<span class="hljs-number">74504</span>,<span class="hljs-number">574504</span>,<span class="hljs-number">859723</span>,<span class="hljs-number">498681</span>,<span class="hljs-number">793582</span>,<span class="hljs-number">52151,226727</span>,<span class="hljs-number">81664</span>,<span class="hljs-number">765850</span>,<span class="hljs-number">431874</span>,<span class="hljs-number">158962</span>,<span class="hljs-number">345419</span>,<span class="hljs-number">177399</span>,<span class="hljs-number">382048</span>,<span class="hljs-number">895650</span>,<span class="hljs-number">444591</span>,<span class="hljs-number">68679,76503</span>,<span class="hljs-number">429381</span>,<span class="hljs-number">540114,509212</span>,<span class="hljs-number">712595</span>,<span class="hljs-number">592540</span>,<span class="hljs-number">185351</span>,<span class="hljs-number">578397</span>,<span class="hljs-number">923809</span>,<span class="hljs-number">114523,99651</span>,<span class="hljs-number">64925,228426</span>,<span class="hljs-number">363811</span>,<span class="hljs-number">212508</span>,<span class="hljs-number">930820</span>,<span class="hljs-number">310497</span>,<span class="hljs-number">986516</span>,<span class="hljs-number">663669</span>,<span class="hljs-number">977761</span>,<span class="hljs-number">986402</span>,<span class="hljs-number">411728</span>,<span class="hljs-number">709263</span>,<span class="hljs-number">472914</span>,<span class="hljs-number">67455</span>,<span class="hljs-number">720091</span>,<span class="hljs-number">619892</span>,<span class="hljs-number">986818</span>,<span class="hljs-number">20603</span>,<span class="hljs-number">679749</span>,<span class="hljs-number">902297</span>,<span class="hljs-number">116886</span>,<span class="hljs-number">493557</span>,<span class="hljs-number">48704</span>,<span class="hljs-number">277686</span>,<span class="hljs-number">149795</span>,<span class="hljs-number">339944</span>,<span class="hljs-number">432165</span>,<span class="hljs-number">740280</span>,<span class="hljs-number">408783</span>,<span class="hljs-number">244269,148066</span>,<span class="hljs-number">954696</span>,<span class="hljs-number">553422</span>,<span class="hljs-number">445816</span>,<span class="hljs-number">315268</span>,<span class="hljs-number">252988,158342</span>,<span class="hljs-number">164449,776118</span>,<span class="hljs-number">624113</span>,<span class="hljs-number">833004</span>,<span class="hljs-number">876766</span>,<span class="hljs-number">67465</span>,<span class="hljs-number">361017</span>,<span class="hljs-number">756947</span>,<span class="hljs-number">207307</span>,<span class="hljs-number">792463</span>,<span class="hljs-number">487313</span>,<span class="hljs-number">14689,175274</span>,<span class="hljs-number">898978</span>,<span class="hljs-number">408039</span>,<span class="hljs-number">319462</span>,<span class="hljs-number">687305</span>,<span class="hljs-number">798852</span>,<span class="hljs-number">516769</span>,<span class="hljs-number">976811</span>,<span class="hljs-number">518706</span>,<span class="hljs-number">898116,107704</span>,<span class="hljs-number">245825</span>,<span class="hljs-number">613931</span>,<span class="hljs-number">711403</span>,<span class="hljs-number">797638</span>,<span class="hljs-number">109724,155540</span>,<span class="hljs-number">180914,247555</span>,<span class="hljs-number">483423</span>,<span class="hljs-number">184464,533238</span>,<span class="hljs-number">923442</span>,<span class="hljs-number">90565</span>,<span class="hljs-number">543852</span>,<span class="hljs-number">207759</span>,<span class="hljs-number">678312</span>,<span class="hljs-number">763323</span>,<span class="hljs-number">336896</span>,<span class="hljs-number">971315</span>,<span class="hljs-number">32324</span>,<span class="hljs-number">490846</span>,<span class="hljs-number">178872,326152</span>,<span class="hljs-number">592340</span>,<span class="hljs-number">683246</span>,<span class="hljs-number">865792</span>,<span class="hljs-number">134369</span>,<span class="hljs-number">812579</span>,<span class="hljs-number">347100</span>,<span class="hljs-number">344538</span>,<span class="hljs-number">13976</span>,<span class="hljs-number">992048</span>,<span class="hljs-number">786429</span>,<span class="hljs-number">164258,583126</span>,<span class="hljs-number">226263</span>,<span class="hljs-number">403655</span>,<span class="hljs-number">796675</span>,<span class="hljs-number">631705</span>,<span class="hljs-number">949369</span>,<span class="hljs-number">645728</span>,<span class="hljs-number">950274</span>,<span class="hljs-number">833237</span>,<span class="hljs-number">854713</span>,<span class="hljs-number">22577</span>,<span class="hljs-number">928473</span>,<span class="hljs-number">386347</span>,<span class="hljs-number">7532</span>,<span class="hljs-number">700521</span>,<span class="hljs-number">379443</span>,<span class="hljs-number">996190</span>,<span class="hljs-number">652778</span>,<span class="hljs-number">596458</span>,<span class="hljs-number">850747</span>,<span class="hljs-number">600195,110572</span>,<span class="hljs-number">343543</span>,<span class="hljs-number">347504</span>,<span class="hljs-number">781106,309223</span>,<span class="hljs-number">379320</span>,<span class="hljs-number">613127</span>,<span class="hljs-number">740634</span>,<span class="hljs-number">725364</span>,<span class="hljs-number">815233</span>,<span class="hljs-number">818960</span>,<span class="hljs-number">445983</span>,<span class="hljs-number">784036</span>,<span class="hljs-number">763308</span>,<span class="hljs-number">675342</span>,<span class="hljs-number">359079</span>,<span class="hljs-number">812025</span>,<span class="hljs-number">680623</span>,<span class="hljs-number">999865</span>,<span class="hljs-number">813067</span>,<span class="hljs-number">760298</span>,<span class="hljs-number">913784</span>,<span class="hljs-number">763970</span>,<span class="hljs-number">580089</span>,<span class="hljs-number">174248,363238</span>,<span class="hljs-number">208233,430124</span>,<span class="hljs-number">859714</span>,<span class="hljs-number">723703</span>,<span class="hljs-number">403408</span>,<span class="hljs-number">461518</span>,<span class="hljs-number">216457</span>,<span class="hljs-number">264439</span>,<span class="hljs-number">844105</span>,<span class="hljs-number">361709</span>,<span class="hljs-number">495351</span>,<span class="hljs-number">150067</span>,<span class="hljs-number">605957</span>,<span class="hljs-number">607536</span>,<span class="hljs-number">529435</span>,<span class="hljs-number">314732</span>,<span class="hljs-number">942607</span>,<span class="hljs-number">205450</span>,<span class="hljs-number">794844</span>,<span class="hljs-number">35874,362228</span>,<span class="hljs-number">963989</span>,<span class="hljs-number">652800</span>,<span class="hljs-number">996134,6451</span>,<span class="hljs-number">554602</span>,<span class="hljs-number">806733</span>,<span class="hljs-number">16710</span>,<span class="hljs-number">550856</span>,<span class="hljs-number">526198</span>,<span class="hljs-number">605043</span>,<span class="hljs-number">158574,125090</span>,<span class="hljs-number">4537</span>,<span class="hljs-number">925616</span>,<span class="hljs-number">700018</span>,<span class="hljs-number">787033</span>,<span class="hljs-number">943748</span>,<span class="hljs-number">750262</span>,<span class="hljs-number">952251</span>,<span class="hljs-number">476256</span>,<span class="hljs-number">535539</span>,<span class="hljs-number">740139</span>,<span class="hljs-number">563295</span>,<span class="hljs-number">258278</span>,<span class="hljs-number">356297</span>,<span class="hljs-number">356877</span>,<span class="hljs-number">639012</span>,<span class="hljs-number">626528</span>,<span class="hljs-number">193505,55381</span>,<span class="hljs-number">826739</span>,<span class="hljs-number">453306</span>,<span class="hljs-number">323753</span>,<span class="hljs-number">388245</span>,<span class="hljs-number">603642</span>,<span class="hljs-number">964663</span>,<span class="hljs-number">950514</span>,<span class="hljs-number">226955,121659</span>,<span class="hljs-number">226927</span>,<span class="hljs-number">890823</span>,<span class="hljs-number">112516,579226</span>,<span class="hljs-number">440481</span>,<span class="hljs-number">151861</span>,<span class="hljs-number">598724</span>,<span class="hljs-number">691686</span>,<span class="hljs-number">26594,184205</span>,<span class="hljs-number">782936</span>,<span class="hljs-number">896193</span>,<span class="hljs-number">912877</span>,<span class="hljs-number">103070,110187</span>,<span class="hljs-number">166371,273177</span>,<span class="hljs-number">426293</span>,<span class="hljs-number">178345,194186</span>,<span class="hljs-number">825057</span>,<span class="hljs-number">504668</span>,<span class="hljs-number">641778</span>,<span class="hljs-number">964802</span>,<span class="hljs-number">745100</span>,<span class="hljs-number">797742</span>,<span class="hljs-number">39382,203437</span>,<span class="hljs-number">273324</span>,<span class="hljs-number">894058</span>,<span class="hljs-number">136988,215089</span>,<span class="hljs-number">21941</span>,<span class="hljs-number">279558</span>,<span class="hljs-number">184932</span>,<span class="hljs-number">718778</span>,<span class="hljs-number">298688</span>,<span class="hljs-number">263985</span>,<span class="hljs-number">370953</span>,<span class="hljs-number">191771,214968</span>,<span class="hljs-number">39577</span>,<span class="hljs-number">335637</span>,<span class="hljs-number">890770</span>,<span class="hljs-number">931615</span>,<span class="hljs-number">480459</span>,<span class="hljs-number">494765</span>,<span class="hljs-number">107383,244521</span>,<span class="hljs-number">258933</span>,<span class="hljs-number">190026</span>,<span class="hljs-number">723985</span>,<span class="hljs-number">998426</span>,<span class="hljs-number">796682</span>,<span class="hljs-number">587532</span>,<span class="hljs-number">49097,253696</span>,<span class="hljs-number">852568</span>,<span class="hljs-number">452986</span>,<span class="hljs-number">115793</span>,<span class="hljs-number">713345</span>,<span class="hljs-number">469378</span>,<span class="hljs-number">251189,11500</span>,<span class="hljs-number">227079</span>,<span class="hljs-number">914556</span>,<span class="hljs-number">388518</span>,<span class="hljs-number">50878</span>,<span class="hljs-number">836406</span>,<span class="hljs-number">934579</span>,<span class="hljs-number">8257,143669</span>,<span class="hljs-number">360264</span>,<span class="hljs-number">226179,475224</span>,<span class="hljs-number">709379</span>,<span class="hljs-number">40148,19357</span>,<span class="hljs-number">47963,385221</span>,<span class="hljs-number">939983</span>,<span class="hljs-number">26345</span>,<span class="hljs-number">765802</span>,<span class="hljs-number">75379,108940</span>,<span class="hljs-number">248874,162858</span>,<span class="hljs-number">676508</span>,<span class="hljs-number">898627</span>,<span class="hljs-number">527238,86615</span>,<span class="hljs-number">643109,114633</span>,<span class="hljs-number">607736</span>,<span class="hljs-number">454840</span>,<span class="hljs-number">116557,231906</span>,<span class="hljs-number">515852</span>,<span class="hljs-number">108871</span>,<span class="hljs-number">566520</span>,<span class="hljs-number">74260</span>,<span class="hljs-number">514388</span>,<span class="hljs-number">134495</span>,<span class="hljs-number">672977</span>,<span class="hljs-number">261151</span>,<span class="hljs-number">760707</span>,<span class="hljs-number">894912</span>,<span class="hljs-number">392846</span>,<span class="hljs-number">501003</span>,<span class="hljs-number">869312</span>,<span class="hljs-number">257532</span>,<span class="hljs-number">124137</span>,<span class="hljs-number">457760</span>,<span class="hljs-number">605447</span>,<span class="hljs-number">575468</span>,<span class="hljs-number">338222</span>,<span class="hljs-number">433460</span>,<span class="hljs-number">29423</span>,<span class="hljs-number">682723</span>,<span class="hljs-number">270134</span>,<span class="hljs-number">319551</span>,<span class="hljs-number">795694</span>,<span class="hljs-number">619910</span>,<span class="hljs-number">195054</span>,<span class="hljs-number">618513</span>,<span class="hljs-number">230325,53507</span>,<span class="hljs-number">769999</span>,<span class="hljs-number">509660</span>,<span class="hljs-number">84961,30211</span>,<span class="hljs-number">986222</span>,<span class="hljs-number">710941</span>,<span class="hljs-number">698550</span>,<span class="hljs-number">320847</span>,<span class="hljs-number">576459</span>,<span class="hljs-number">28061,439164</span>,<span class="hljs-number">399333</span>,<span class="hljs-number">413992</span>,<span class="hljs-number">505337</span>,<span class="hljs-number">924597</span>,<span class="hljs-number">639212</span>,<span class="hljs-number">853388</span>,<span class="hljs-number">503899</span>,<span class="hljs-number">152198</span>,<span class="hljs-number">569860</span>,<span class="hljs-number">553079</span>,<span class="hljs-number">343253</span>,<span class="hljs-number">821440</span>,<span class="hljs-number">85265</span>,<span class="hljs-number">370285</span>,<span class="hljs-number">500653</span>,<span class="hljs-number">856147,101663</span>,<span class="hljs-number">682241</span>,<span class="hljs-number">442323</span>,<span class="hljs-number">17497</span>,<span class="hljs-number">474388</span>,<span class="hljs-number">73294,114739</span>,<span class="hljs-number">17325</span>,<span class="hljs-number">669465</span>,<span class="hljs-number">835932</span>,<span class="hljs-number">410458</span>,<span class="hljs-number">439817</span>,<span class="hljs-number">875322</span>,<span class="hljs-number">593539</span>,<span class="hljs-number">368255,102192</span>,<span class="hljs-number">294331</span>,<span class="hljs-number">849620</span>,<span class="hljs-number">261126</span>,<span class="hljs-number">333709</span>,<span class="hljs-number">757862</span>,<span class="hljs-number">64730</span>,<span class="hljs-number">670654</span>,<span class="hljs-number">144467,77563</span>,<span class="hljs-number">799062</span>,<span class="hljs-number">457409</span>,<span class="hljs-number">284724</span>,<span class="hljs-number">61700</span>,<span class="hljs-number">823619</span>,<span class="hljs-number">580567</span>,<span class="hljs-number">100592</span>,<span class="hljs-number">391579</span>,<span class="hljs-number">580536</span>,<span class="hljs-number">563416</span>,<span class="hljs-number">770942</span>,<span class="hljs-number">560572</span>,<span class="hljs-number">334600</span>,<span class="hljs-number">478785</span>,<span class="hljs-number">70251,478127</span>,<span class="hljs-number">791685</span>,<span class="hljs-number">752061</span>,<span class="hljs-number">992762</span>,<span class="hljs-number">776898</span>,<span class="hljs-number">199253,196861</span>,<span class="hljs-number">201225</span>,<span class="hljs-number">264879</span>,<span class="hljs-number">45284,91344</span>,<span class="hljs-number">978920</span>,<span class="hljs-number">347944</span>,<span class="hljs-number">941817</span>,<span class="hljs-number">844584</span>,<span class="hljs-number">67263,963238</span>,<span class="hljs-number">373520</span>,<span class="hljs-number">853256</span>,<span class="hljs-number">990787</span>,<span class="hljs-number">176144</span>,<span class="hljs-number">783581</span>,<span class="hljs-number">41317</span>,<span class="hljs-number">387699</span>,<span class="hljs-number">866497</span>,<span class="hljs-number">970953</span>,<span class="hljs-number">600219</span>,<span class="hljs-number">634371</span>,<span class="hljs-number">573614</span>,<span class="hljs-number">257294</span>,<span class="hljs-number">977887</span>,<span class="hljs-number">8962</span>,<span class="hljs-number">532797</span>,<span class="hljs-number">76994</span>,<span class="hljs-number">447431</span>,<span class="hljs-number">441347</span>,<span class="hljs-number">480077</span>,<span class="hljs-number">335907</span>,<span class="hljs-number">427398</span>,<span class="hljs-number">808596</span>,<span class="hljs-number">634838</span>,<span class="hljs-number">532080</span>,<span class="hljs-number">218356</span>,<span class="hljs-number">683636</span>,<span class="hljs-number">773826</span>,<span class="hljs-number">20743,145851</span>,<span class="hljs-number">831929</span>,<span class="hljs-number">783479</span>,<span class="hljs-number">896585</span>,<span class="hljs-number">588654</span>,<span class="hljs-number">67214,453174</span>,<span class="hljs-number">768964</span>,<span class="hljs-number">755200,223162</span>,<span class="hljs-number">540140</span>,<span class="hljs-number">876490</span>,<span class="hljs-number">470964</span>,<span class="hljs-number">608</span>,<span class="hljs-number">900466</span>,<span class="hljs-number">414991</span>,<span class="hljs-number">52934,156524</span>,<span class="hljs-number">391832</span>,<span class="hljs-number">333866</span>,<span class="hljs-number">552417</span>,<span class="hljs-number">34071</span>,<span class="hljs-number">855813</span>,<span class="hljs-number">606891</span>,<span class="hljs-number">817832</span>,<span class="hljs-number">887712</span>,<span class="hljs-number">171791</span>,<span class="hljs-number">658085</span>,<span class="hljs-number">887287</span>,<span class="hljs-number">769990</span>,<span class="hljs-number">716260</span>,<span class="hljs-number">38344</span>,<span class="hljs-number">986018</span>,<span class="hljs-number">144698,127331</span>,<span class="hljs-number">687217</span>,<span class="hljs-number">596543</span>,<span class="hljs-number">476133</span>,<span class="hljs-number">465883</span>,<span class="hljs-number">4130,129908</span>,<span class="hljs-number">301423</span>,<span class="hljs-number">643805</span>,<span class="hljs-number">31725</span>,<span class="hljs-number">658579</span>,<span class="hljs-number">451285</span>,<span class="hljs-number">267626</span>,<span class="hljs-number">6096</span>,<span class="hljs-number">505677</span>,<span class="hljs-number">558139</span>,<span class="hljs-number">525748</span>,<span class="hljs-number">644899</span>,<span class="hljs-number">584563</span>,<span class="hljs-number">764028</span>,<span class="hljs-number">168938,898153</span>,<span class="hljs-number">916807</span>,<span class="hljs-number">320716</span>,<span class="hljs-number">355030</span>,<span class="hljs-number">593858</span>,<span class="hljs-number">476690</span>,<span class="hljs-number">936957</span>,<span class="hljs-number">635907</span>,<span class="hljs-number">519977</span>,<span class="hljs-number">94981</span>,<span class="hljs-number">771963</span>,<span class="hljs-number">461713</span>,<span class="hljs-number">650628</span>,<span class="hljs-number">653728</span>,<span class="hljs-number">995836</span>,<span class="hljs-number">866234</span>,<span class="hljs-number">928578</span>,<span class="hljs-number">496705</span>,<span class="hljs-number">982232</span>,<span class="hljs-number">971519</span>,<span class="hljs-number">421917</span>,<span class="hljs-number">592594</span>,<span class="hljs-number">683804</span>,<span class="hljs-number">592668</span>,<span class="hljs-number">753496</span>,<span class="hljs-number">66434,238045</span>,<span class="hljs-number">69186,56186</span>,<span class="hljs-number">827166,204185</span>,<span class="hljs-number">195025</span>,<span class="hljs-number">989795</span>,<span class="hljs-number">616010</span>,<span class="hljs-number">617170</span>,<span class="hljs-number">523555</span>,<span class="hljs-number">66334</span>,<span class="hljs-number">583455</span>,<span class="hljs-number">273507</span>,<span class="hljs-number">248766</span>,<span class="hljs-number">948895</span>,<span class="hljs-number">426633</span>,<span class="hljs-number">38007,239491</span>,<span class="hljs-number">1753,912102</span>,<span class="hljs-number">713531</span>,<span class="hljs-number">187901,210907</span>,<span class="hljs-number">956736</span>,<span class="hljs-number">359162</span>,<span class="hljs-number">486738</span>,<span class="hljs-number">958180</span>,<span class="hljs-number">278959</span>,<span class="hljs-number">669549</span>,<span class="hljs-number">868734</span>,<span class="hljs-number">91963,930223</span>,<span class="hljs-number">43386,97271</span>,<span class="hljs-number">175874,319239</span>,<span class="hljs-number">478653</span>,<span class="hljs-number">45972</span>,<span class="hljs-number">643508</span>,<span class="hljs-number">211096</span>,<span class="hljs-number">408911</span>,<span class="hljs-number">591389</span>,<span class="hljs-number">856085</span>,<span class="hljs-number">61740</span>,<span class="hljs-number">648751</span>,<span class="hljs-number">742528</span>,<span class="hljs-number">686994</span>,<span class="hljs-number">553119,209264</span>,<span class="hljs-number">770113</span>,<span class="hljs-number">867949</span>,<span class="hljs-number">403218</span>,<span class="hljs-number">542909</span>,<span class="hljs-number">806048</span>,<span class="hljs-number">101882,176929</span>,<span class="hljs-number">971047</span>,<span class="hljs-number">675686</span>,<span class="hljs-number">205475</span>,<span class="hljs-number">897770</span>,<span class="hljs-number">643599</span>,<span class="hljs-number">928675</span>,<span class="hljs-number">271208</span>,<span class="hljs-number">945288</span>,<span class="hljs-number">813038</span>,<span class="hljs-number">20068</span>,<span class="hljs-number">774874</span>,<span class="hljs-number">685171</span>,<span class="hljs-number">719465</span>,<span class="hljs-number">815101</span>,<span class="hljs-number">447415</span>,<span class="hljs-number">499453</span>,<span class="hljs-number">335116</span>,<span class="hljs-number">839737</span>,<span class="hljs-number">959258</span>,<span class="hljs-number">286180,168058</span>,<span class="hljs-number">223231</span>,<span class="hljs-number">272827</span>,<span class="hljs-number">983564</span>,<span class="hljs-number">250515</span>,<span class="hljs-number">425320</span>,<span class="hljs-number">769948</span>,<span class="hljs-number">54453,536134</span>,<span class="hljs-number">454799</span>,<span class="hljs-number">374007</span>,<span class="hljs-number">712047</span>,<span class="hljs-number">495909</span>,<span class="hljs-number">21769</span>,<span class="hljs-number">933051</span>,<span class="hljs-number">182542</span>,<span class="hljs-number">261477</span>,<span class="hljs-number">199616</span>,<span class="hljs-number">875674</span>,<span class="hljs-number">378211</span>,<span class="hljs-number">329316</span>,<span class="hljs-number">862117</span>,<span class="hljs-number">631793</span>,<span class="hljs-number">566810</span>,<span class="hljs-number">279742</span>,<span class="hljs-number">783353</span>,<span class="hljs-number">276797</span>,<span class="hljs-number">749668</span>,<span class="hljs-number">839777</span>,<span class="hljs-number">998148,677228</span>,<span class="hljs-number">794597</span>,<span class="hljs-number">809246</span>,<span class="hljs-number">415736</span>,<span class="hljs-number">204081,480185</span>,<span class="hljs-number">440799</span>,<span class="hljs-number">290789</span>,<span class="hljs-number">272578</span>,<span class="hljs-number">929621</span>,<span class="hljs-number">676876</span>,<span class="hljs-number">549551</span>,<span class="hljs-number">623539</span>,<span class="hljs-number">283684</span>,<span class="hljs-number">936752</span>,<span class="hljs-number">139830,215662</span>,<span class="hljs-number">920757</span>,<span class="hljs-number">357675</span>,<span class="hljs-number">336768</span>,<span class="hljs-number">41657,39692</span>,<span class="hljs-number">892596</span>,<span class="hljs-number">857260</span>,<span class="hljs-number">585827</span>,<span class="hljs-number">655124,7512</span>,<span class="hljs-number">103693</span>,<span class="hljs-number">539762</span>,<span class="hljs-number">650377</span>,<span class="hljs-number">338866</span>,<span class="hljs-number">375203</span>,<span class="hljs-number">655450</span>,<span class="hljs-number">367816</span>,<span class="hljs-number">947935</span>,<span class="hljs-number">203757,279214</span>,<span class="hljs-number">710830</span>,<span class="hljs-number">47039</span>,<span class="hljs-number">836648</span>,<span class="hljs-number">880598</span>,<span class="hljs-number">71770,600213</span>,<span class="hljs-number">511852</span>,<span class="hljs-number">333679</span>,<span class="hljs-number">229330</span>,<span class="hljs-number">576566</span>,<span class="hljs-number">448035</span>,<span class="hljs-number">732261</span>,<span class="hljs-number">406334</span>,<span class="hljs-number">838218,903181</span>,<span class="hljs-number">209159,30241</span>,<span class="hljs-number">482248</span>,<span class="hljs-number">671599</span>,<span class="hljs-number">113831,225311</span>,<span class="hljs-number">411881</span>,<span class="hljs-number">771378</span>,<span class="hljs-number">891680</span>,<span class="hljs-number">177931,555182</span>,<span class="hljs-number">819107,169831</span>,<span class="hljs-number">203624,952110</span>,<span class="hljs-number">224012</span>,<span class="hljs-number">627508</span>,<span class="hljs-number">514722</span>,<span class="hljs-number">608744</span>,<span class="hljs-number">41858</span>,<span class="hljs-number">667974</span>,<span class="hljs-number">261568</span>,<span class="hljs-number">881736</span>,<span class="hljs-number">203663</span>,<span class="hljs-number">609962</span>,<span class="hljs-number">676470</span>,<span class="hljs-number">599417</span>,<span class="hljs-number">580949</span>,<span class="hljs-number">118485</span>,<span class="hljs-number">635313</span>,<span class="hljs-number">607066</span>,<span class="hljs-number">61348</span>,<span class="hljs-number">532020</span>,<span class="hljs-number">159595</span>,<span class="hljs-number">675407</span>,<span class="hljs-number">815116,713103</span>,<span class="hljs-number">702629</span>,<span class="hljs-number">305028</span>,<span class="hljs-number">735230</span>,<span class="hljs-number">404418</span>,<span class="hljs-number">522525</span>,<span class="hljs-number">246096,55772</span>,<span class="hljs-number">523703</span>,<span class="hljs-number">50416</span>,<span class="hljs-number">995345</span>,<span class="hljs-number">493187,794205</span>,<span class="hljs-number">767888</span>,<span class="hljs-number">395641</span>,<span class="hljs-number">849918</span>,<span class="hljs-number">738964</span>,<span class="hljs-number">302009</span>,<span class="hljs-number">432476</span>,<span class="hljs-number">258899</span>,<span class="hljs-number">968824</span>,<span class="hljs-number">995215,127332</span>,<span class="hljs-number">713602</span>,<span class="hljs-number">946097</span>,<span class="hljs-number">610797</span>,<span class="hljs-number">162419,985212</span>,<span class="hljs-number">550508</span>,<span class="hljs-number">698438</span>,<span class="hljs-number">134370,211559</span>,<span class="hljs-number">624349</span>,<span class="hljs-number">560155</span>,<span class="hljs-number">406269</span>,<span class="hljs-number">808301</span>,<span class="hljs-number">946215</span>,<span class="hljs-number">474436</span>,<span class="hljs-number">421684</span>,<span class="hljs-number">659174,227571</span>,<span class="hljs-number">96998</span>,<span class="hljs-number">874959</span>,<span class="hljs-number">434829</span>,<span class="hljs-number">318150</span>,<span class="hljs-number">751537</span>,<span class="hljs-number">364548</span>,<span class="hljs-number">145591</span>,<span class="hljs-number">668648</span>,<span class="hljs-number">717643</span>,<span class="hljs-number">120659</span>,<span class="hljs-number">774465</span>,<span class="hljs-number">661288</span>,<span class="hljs-number">180805,204597</span>,<span class="hljs-number">644954</span>,<span class="hljs-number">856333</span>,<span class="hljs-number">844535</span>,<span class="hljs-number">387975</span>,<span class="hljs-number">182271,87579</span>,<span class="hljs-number">31843,69739</span>,<span class="hljs-number">65078,129065</span>,<span class="hljs-number">631808</span>,<span class="hljs-number">83330</span>,<span class="hljs-number">265936</span>,<span class="hljs-number">272307</span>,<span class="hljs-number">388794</span>,<span class="hljs-number">429977</span>,<span class="hljs-number">431513</span>,<span class="hljs-number">834170</span>,<span class="hljs-number">765023</span>,<span class="hljs-number">91909</span>,<span class="hljs-number">660368</span>,<span class="hljs-number">482659</span>,<span class="hljs-number">705484</span>,<span class="hljs-number">124987</span>,<span class="hljs-number">422402</span>,<span class="hljs-number">723330</span>,<span class="hljs-number">197740</span>,<span class="hljs-number">299043</span>,<span class="hljs-number">790621</span>,<span class="hljs-number">865287</span>,<span class="hljs-number">798030</span>,<span class="hljs-number">621402</span>,<span class="hljs-number">7299</span>,<span class="hljs-number">377040</span>,<span class="hljs-number">946946</span>,<span class="hljs-number">951911</span>,<span class="hljs-number">126241,317249</span>,<span class="hljs-number">537977</span>,<span class="hljs-number">467495</span>,<span class="hljs-number">207919</span>,<span class="hljs-number">297849</span>,<span class="hljs-number">113323</span>,<span class="hljs-number">940525</span>,<span class="hljs-number">966699</span>,<span class="hljs-number">288419</span>,<span class="hljs-number">458761</span>,<span class="hljs-number">255640</span>,<span class="hljs-number">665369</span>,<span class="hljs-number">589653</span>,<span class="hljs-number">852191</span>,<span class="hljs-number">332753</span>,<span class="hljs-number">675009</span>,<span class="hljs-number">777930</span>,<span class="hljs-number">927666</span>,<span class="hljs-number">446251,42973</span>,<span class="hljs-number">561828</span>,<span class="hljs-number">929800</span>,<span class="hljs-number">911254,94550</span>,<span class="hljs-number">695383</span>,<span class="hljs-number">648167,638</span>,<span class="hljs-number">374036</span>,<span class="hljs-number">393409</span>,<span class="hljs-number">397019</span>,<span class="hljs-number">436568</span>,<span class="hljs-number">973361</span>,<span class="hljs-number">775091</span>,<span class="hljs-number">621473</span>,<span class="hljs-number">690924</span>,<span class="hljs-number">739378</span>,<span class="hljs-number">206807</span>,<span class="hljs-number">478511</span>,<span class="hljs-number">36643</span>,<span class="hljs-number">838595</span>,<span class="hljs-number">702742</span>,<span class="hljs-number">728659</span>,<span class="hljs-number">927897</span>,<span class="hljs-number">370859</span>,<span class="hljs-number">174409</span>,<span class="hljs-number">644665</span>,<span class="hljs-number">545345</span>,<span class="hljs-number">602634</span>,<span class="hljs-number">923977</span>,<span class="hljs-number">994316</span>,<span class="hljs-number">332524</span>,<span class="hljs-number">743486</span>,<span class="hljs-number">347301</span>,<span class="hljs-number">147426</span>,<span class="hljs-number">868578</span>,<span class="hljs-number">610487</span>,<span class="hljs-number">461261</span>,<span class="hljs-number">307721</span>,<span class="hljs-number">613431</span>,<span class="hljs-number">156629</span>,<span class="hljs-number">976306</span>,<span class="hljs-number">322921</span>,<span class="hljs-number">690688</span>,<span class="hljs-number">618801</span>,<span class="hljs-number">337815</span>,<span class="hljs-number">863730</span>,<span class="hljs-number">982885</span>,<span class="hljs-number">700842</span>,<span class="hljs-number">191565</span>,<span class="hljs-number">819541</span>,<span class="hljs-number">773950</span>,<span class="hljs-number">9583,13142</span>,<span class="hljs-number">828175,73929</span>,<span class="hljs-number">652626</span>,<span class="hljs-number">924754</span>,<span class="hljs-number">657159,105941</span>,<span class="hljs-number">544865</span>,<span class="hljs-number">40410</span>,<span class="hljs-number">880756</span>,<span class="hljs-number">528270</span>,<span class="hljs-number">742419</span>,<span class="hljs-number">637491</span>,<span class="hljs-number">673650</span>,<span class="hljs-number">732297</span>,<span class="hljs-number">74979</span>,<span class="hljs-number">886703</span>,<span class="hljs-number">664390</span>,<span class="hljs-number">295929</span>,<span class="hljs-number">493770</span>,<span class="hljs-number">945412</span>,<span class="hljs-number">286166,202537</span>,<span class="hljs-number">245808</span>,<span class="hljs-number">890801</span>,<span class="hljs-number">483614</span>,<span class="hljs-number">888092</span>,<span class="hljs-number">927536</span>,<span class="hljs-number">597274</span>,<span class="hljs-number">172942,314160</span>,<span class="hljs-number">617013</span>,<span class="hljs-number">127564</span>,<span class="hljs-number">626598</span>,<span class="hljs-number">611352</span>,<span class="hljs-number">771755</span>,<span class="hljs-number">61276,318159</span>,<span class="hljs-number">929673</span>,<span class="hljs-number">363707</span>,<span class="hljs-number">411295</span>,<span class="hljs-number">684168,300178</span>,<span class="hljs-number">477811</span>,<span class="hljs-number">68590</span>,<span class="hljs-number">299273</span>,<span class="hljs-number">755173</span>,<span class="hljs-number">385881</span>,<span class="hljs-number">185162,252421</span>,<span class="hljs-number">743165</span>,<span class="hljs-number">680455</span>,<span class="hljs-number">455431</span>,<span class="hljs-number">98404,370171</span>,<span class="hljs-number">559076</span>,<span class="hljs-number">869770</span>,<span class="hljs-number">758091</span>,<span class="hljs-number">682443</span>,<span class="hljs-number">551246,544188</span>,<span class="hljs-number">427301</span>,<span class="hljs-number">414786</span>,<span class="hljs-number">54084</span>,<span class="hljs-number">259695</span>,<span class="hljs-number">782109</span>,<span class="hljs-number">570993</span>,<span class="hljs-number">37227</span>,<span class="hljs-number">589847</span>,<span class="hljs-number">56449</span>,<span class="hljs-number">344808</span>,<span class="hljs-number">821556</span>,<span class="hljs-number">451505</span>,<span class="hljs-number">526178,153234</span>,<span class="hljs-number">133754</span>,<span class="hljs-number">889339</span>,<span class="hljs-number">429779</span>,<span class="hljs-number">526474</span>,<span class="hljs-number">947051</span>,<span class="hljs-number">227493</span>,<span class="hljs-number">696658</span>,<span class="hljs-number">119629,163447</span>,<span class="hljs-number">676395</span>,<span class="hljs-number">616640</span>,<span class="hljs-number">294600</span>,<span class="hljs-number">409324</span>,<span class="hljs-number">766614</span>,<span class="hljs-number">476642</span>,<span class="hljs-number">163338</span>,<span class="hljs-number">945747</span>,<span class="hljs-number">768078</span>,<span class="hljs-number">290915</span>,<span class="hljs-number">74859</span>,<span class="hljs-number">379024</span>,<span class="hljs-number">810171</span>,<span class="hljs-number">667562</span>,<span class="hljs-number">771842</span>,<span class="hljs-number">77805,531159</span>,<span class="hljs-number">663400</span>,<span class="hljs-number">68185</span>,<span class="hljs-number">501907</span>,<span class="hljs-number">458545</span>,<span class="hljs-number">823746</span>,<span class="hljs-number">945637</span>,<span class="hljs-number">850803</span>,<span class="hljs-number">752258</span>,<span class="hljs-number">340770</span>,<span class="hljs-number">554333</span>,<span class="hljs-number">334768</span>,<span class="hljs-number">727558</span>,<span class="hljs-number">456367</span>,<span class="hljs-number">896708</span>,<span class="hljs-number">338702</span>,<span class="hljs-number">574065</span>,<span class="hljs-number">856398</span>,<span class="hljs-number">257706</span>,<span class="hljs-number">918245,71679</span>,<span class="hljs-number">154017,24774</span>,<span class="hljs-number">24103</span>,<span class="hljs-number">394754</span>,<span class="hljs-number">114907,427140</span>,<span class="hljs-number">346612</span>,<span class="hljs-number">983587</span>,<span class="hljs-number">758747</span>,<span class="hljs-number">251664</span>,<span class="hljs-number">350596</span>,<span class="hljs-number">843359</span>,<span class="hljs-number">329167,485196</span>,<span class="hljs-number">866949</span>,<span class="hljs-number">332726</span>,<span class="hljs-number">622892</span>,<span class="hljs-number">610291</span>,<span class="hljs-number">360979</span>,<span class="hljs-number">652277</span>,<span class="hljs-number">608640</span>,<span class="hljs-number">151251,41963</span>,<span class="hljs-number">393741</span>,<span class="hljs-number">860120,558177</span>,<span class="hljs-number">985458</span>,<span class="hljs-number">532781</span>,<span class="hljs-number">171137</span>,<span class="hljs-number">279674</span>,<span class="hljs-number">250807</span>,<span class="hljs-number">368932</span>,<span class="hljs-number">815833</span>,<span class="hljs-number">304487</span>,<span class="hljs-number">312176</span>,<span class="hljs-number">520518</span>,<span class="hljs-number">978259</span>,<span class="hljs-number">269677</span>,<span class="hljs-number">248419</span>,<span class="hljs-number">420488</span>,<span class="hljs-number">70097</span>,<span class="hljs-number">366393</span>,<span class="hljs-number">364363</span>,<span class="hljs-number">635532</span>,<span class="hljs-number">360141,219131</span>,<span class="hljs-number">754345</span>,<span class="hljs-number">787961</span>,<span class="hljs-number">905448</span>,<span class="hljs-number">459411</span>,<span class="hljs-number">941510</span>,<span class="hljs-number">107968</span>,<span class="hljs-number">918402</span>,<span class="hljs-number">824838</span>,<span class="hljs-number">583041</span>,<span class="hljs-number">506884</span>,<span class="hljs-number">536860</span>,<span class="hljs-number">681808</span>,<span class="hljs-number">957205,53240</span>,<span class="hljs-number">235906,164744</span>,<span class="hljs-number">79990,119182</span>,<span class="hljs-number">529661</span>,<span class="hljs-number">200963</span>,<span class="hljs-number">300481</span>,<span class="hljs-number">262258</span>,<span class="hljs-number">213897,29381</span>,<span class="hljs-number">485437</span>,<span class="hljs-number">773519</span>,<span class="hljs-number">301191</span>,<span class="hljs-number">716385</span>,<span class="hljs-number">655125</span>,<span class="hljs-number">497541</span>,<span class="hljs-number">228552,205545</span>,<span class="hljs-number">671269</span>,<span class="hljs-number">516288</span>,<span class="hljs-number">436722</span>,<span class="hljs-number">331644</span>,<span class="hljs-number">794522</span>,<span class="hljs-number">834916</span>,<span class="hljs-number">929470</span>,<span class="hljs-number">778420</span>,<span class="hljs-number">829070</span>,<span class="hljs-number">394455</span>,<span class="hljs-number">154652,104823</span>,<span class="hljs-number">671370</span>,<span class="hljs-number">555033</span>,<span class="hljs-number">835929</span>,<span class="hljs-number">71680</span>,<span class="hljs-number">784737</span>,<span class="hljs-number">436250</span>,<span class="hljs-number">329657</span>,<span class="hljs-number">268192</span>,<span class="hljs-number">273645</span>,<span class="hljs-number">444558</span>,<span class="hljs-number">975697</span>,<span class="hljs-number">652202</span>,<span class="hljs-number">660518</span>,<span class="hljs-number">498138,250095</span>,<span class="hljs-number">150407</span>,<span class="hljs-number">448533</span>,<span class="hljs-number">160375,187115</span>,<span class="hljs-number">25321</span>,<span class="hljs-number">503049</span>,<span class="hljs-number">848938</span>,<span class="hljs-number">922756</span>,<span class="hljs-number">420260</span>,<span class="hljs-number">490301</span>,<span class="hljs-number">803302</span>,<span class="hljs-number">618656</span>,<span class="hljs-number">363649</span>,<span class="hljs-number">27078</span>,<span class="hljs-number">483558</span>,<span class="hljs-number">153505</span>,<span class="hljs-number">298545</span>,<span class="hljs-number">290132,182698</span>,<span class="hljs-number">971080</span>,<span class="hljs-number">448774</span>,<span class="hljs-number">324275</span>,<span class="hljs-number">187755,219455</span>,<span class="hljs-number">697801</span>,<span class="hljs-number">231472</span>,<span class="hljs-number">662058</span>,<span class="hljs-number">82101,129432</span>,<span class="hljs-number">867102</span>,<span class="hljs-number">572425</span>,<span class="hljs-number">608636</span>,<span class="hljs-number">315421</span>,<span class="hljs-number">963669</span>,<span class="hljs-number">670196</span>,<span class="hljs-number">632463</span>,<span class="hljs-number">110522,38125</span>,<span class="hljs-number">937098</span>,<span class="hljs-number">522863</span>,<span class="hljs-number">320468</span>,<span class="hljs-number">78993,499204</span>,<span class="hljs-number">618799</span>,<span class="hljs-number">281266</span>,<span class="hljs-number">610573</span>,<span class="hljs-number">286927</span>,<span class="hljs-number">852725</span>,<span class="hljs-number">306973</span>,<span class="hljs-number">822611</span>,<span class="hljs-number">757599</span>,<span class="hljs-number">718021</span>,<span class="hljs-number">974198,99884</span>,<span class="hljs-number">151328,534233</span>,<span class="hljs-number">719905</span>,<span class="hljs-number">609027</span>,<span class="hljs-number">365109,537223</span>,<span class="hljs-number">279634</span>,<span class="hljs-number">269075</span>,<span class="hljs-number">974601</span>,<span class="hljs-number">325113</span>,<span class="hljs-number">557345</span>,<span class="hljs-number">274531</span>,<span class="hljs-number">118134,133065</span>,<span class="hljs-number">737436</span>,<span class="hljs-number">256863</span>,<span class="hljs-number">656348</span>,<span class="hljs-number">306229</span>,<span class="hljs-number">750768</span>,<span class="hljs-number">105333,179423</span>,<span class="hljs-number">354831</span>,<span class="hljs-number">282741</span>,<span class="hljs-number">406308</span>,<span class="hljs-number">496387</span>,<span class="hljs-number">801824</span>,<span class="hljs-number">92647</span>,<span class="hljs-number">655436</span>,<span class="hljs-number">188821,64531</span>,<span class="hljs-number">525708</span>,<span class="hljs-number">94021</span>,<span class="hljs-number">792303</span>,<span class="hljs-number">869984</span>,<span class="hljs-number">281104</span>,<span class="hljs-number">365558</span>,<span class="hljs-number">279912</span>,<span class="hljs-number">189110</span>,<span class="hljs-number">628762</span>,<span class="hljs-number">600080</span>,<span class="hljs-number">354682</span>,<span class="hljs-number">225190</span>,<span class="hljs-number">965685</span>,<span class="hljs-number">310872</span>,<span class="hljs-number">324810</span>,<span class="hljs-number">487158</span>,<span class="hljs-number">622692</span>,<span class="hljs-number">986892</span>,<span class="hljs-number">780750</span>,<span class="hljs-number">181865,335240</span>,<span class="hljs-number">532483</span>,<span class="hljs-number">665528</span>,<span class="hljs-number">955217</span>,<span class="hljs-number">836264</span>,<span class="hljs-number">601872</span>,<span class="hljs-number">308543</span>,<span class="hljs-number">117754</span>,<span class="hljs-number">575032</span>,<span class="hljs-number">920286</span>,<span class="hljs-number">946135</span>,<span class="hljs-number">500314</span>,<span class="hljs-number">213399,26685</span>,<span class="hljs-number">590161</span>,<span class="hljs-number">900727</span>,<span class="hljs-number">199012,82516</span>,<span class="hljs-number">9850,26654</span>,<span class="hljs-number">485577</span>,<span class="hljs-number">691126</span>,<span class="hljs-number">506428</span>,<span class="hljs-number">824513</span>,<span class="hljs-number">464597</span>,<span class="hljs-number">290456</span>,<span class="hljs-number">767155</span>,<span class="hljs-number">975375</span>,<span class="hljs-number">638802</span>,<span class="hljs-number">721874</span>,<span class="hljs-number">884570</span>,<span class="hljs-number">447910</span>,<span class="hljs-number">92970</span>,<span class="hljs-number">894446</span>,<span class="hljs-number">810051</span>,<span class="hljs-number">412905</span>,<span class="hljs-number">133191</span>,<span class="hljs-number">466710</span>,<span class="hljs-number">313996</span>,<span class="hljs-number">55771</span>,<span class="hljs-number">594295</span>,<span class="hljs-number">3414</span>,<span class="hljs-number">892096</span>,<span class="hljs-number">423914</span>,<span class="hljs-number">869395</span>,<span class="hljs-number">705780</span>,<span class="hljs-number">646611</span>,<span class="hljs-number">62528</span>,<span class="hljs-number">774281</span>,<span class="hljs-number">877622</span>,<span class="hljs-number">366637</span>,<span class="hljs-number">436721</span>,<span class="hljs-number">437943</span>,<span class="hljs-number">623927</span>,<span class="hljs-number">313796</span>,<span class="hljs-number">751757</span>,<span class="hljs-number">406118</span>,<span class="hljs-number">864025</span>,<span class="hljs-number">375501</span>,<span class="hljs-number">343742</span>,<span class="hljs-number">348352</span>,<span class="hljs-number">652268</span>,<span class="hljs-number">70335</span>,<span class="hljs-number">625476</span>,<span class="hljs-number">266917</span>,<span class="hljs-number">560331</span>,<span class="hljs-number">20851</span>,<span class="hljs-number">976676</span>,<span class="hljs-number">8866</span>,<span class="hljs-number">704411</span>,<span class="hljs-number">124741</span>,<span class="hljs-number">553627</span>,<span class="hljs-number">527342</span>,<span class="hljs-number">635216</span>,<span class="hljs-number">866720</span>,<span class="hljs-number">6079,664183</span>,<span class="hljs-number">888522</span>,<span class="hljs-number">999977</span>,<span class="hljs-number">551775</span>,<span class="hljs-number">278294</span>,<span class="hljs-number">924101</span>,<span class="hljs-number">549934</span>,<span class="hljs-number">976223,591115</span>,<span class="hljs-number">405503</span>,<span class="hljs-number">323561</span>,<span class="hljs-number">968296</span>,<span class="hljs-number">844724</span>,<span class="hljs-number">524361</span>,<span class="hljs-number">301320</span>,<span class="hljs-number">242528</span>,<span class="hljs-number">754945</span>,<span class="hljs-number">502856</span>,<span class="hljs-number">924448</span>,<span class="hljs-number">476041</span>,<span class="hljs-number">441232</span>,<span class="hljs-number">985688</span>,<span class="hljs-number">318893</span>,<span class="hljs-number">662712</span>,<span class="hljs-number">218550</span>,<span class="hljs-number">373331</span>,<span class="hljs-number">791513</span>,<span class="hljs-number">139822</span>,<span class="hljs-number">606627</span>,<span class="hljs-number">265660</span>,<span class="hljs-number">222082</span>,<span class="hljs-number">666080</span>,<span class="hljs-number">329012</span>,<span class="hljs-number">410386</span>,<span class="hljs-number">422000</span>,<span class="hljs-number">174317</span>,<span class="hljs-number">987454</span>,<span class="hljs-number">399143</span>,<span class="hljs-number">327272</span>,<span class="hljs-number">179726</span>,<span class="hljs-number">964311</span>,<span class="hljs-number">293869</span>,<span class="hljs-number">418352</span>,<span class="hljs-number">328111</span>,<span class="hljs-number">339917</span>,<span class="hljs-number">505837</span>,<span class="hljs-number">398206,39023</span>,<span class="hljs-number">667611</span>,<span class="hljs-number">202933,131370</span>,<span class="hljs-number">921166,10008</span>,<span class="hljs-number">59223,3406</span>,<span class="hljs-number">760300</span>,<span class="hljs-number">691917</span>,<span class="hljs-number">68890,119247</span>,<span class="hljs-number">32943,196828</span>,<span class="hljs-number">591783</span>,<span class="hljs-number">670706</span>,<span class="hljs-number">935836</span>,<span class="hljs-number">42811</span>,<span class="hljs-number">795938</span>,<span class="hljs-number">100037</span>,<span class="hljs-number">649330</span>,<span class="hljs-number">238074</span>,<span class="hljs-number">514840</span>,<span class="hljs-number">640880</span>,<span class="hljs-number">844774</span>,<span class="hljs-number">367280</span>,<span class="hljs-number">513665</span>,<span class="hljs-number">635068</span>,<span class="hljs-number">137065,916111</span>,<span class="hljs-number">400312</span>,<span class="hljs-number">277773</span>,<span class="hljs-number">813664</span>,<span class="hljs-number">285474</span>,<span class="hljs-number">633318</span>,<span class="hljs-number">476585</span>,<span class="hljs-number">643650</span>,<span class="hljs-number">752941</span>,<span class="hljs-number">17484</span>,<span class="hljs-number">591257</span>,<span class="hljs-number">807802</span>,<span class="hljs-number">890006</span>,<span class="hljs-number">740142,425185</span>,<span class="hljs-number">946389</span>,<span class="hljs-number">893176,145462</span>,<span class="hljs-number">136096</span>,<span class="hljs-number">326768</span>,<span class="hljs-number">684342</span>,<span class="hljs-number">917564</span>,<span class="hljs-number">730104,235911</span>,<span class="hljs-number">311269</span>,<span class="hljs-number">454743</span>,<span class="hljs-number">339056</span>,<span class="hljs-number">316199</span>,<span class="hljs-number">754687</span>,<span class="hljs-number">194187,955168</span>,<span class="hljs-number">170259</span>,<span class="hljs-number">637577</span>,<span class="hljs-number">862131</span>,<span class="hljs-number">508722</span>,<span class="hljs-number">442417</span>,<span class="hljs-number">20483</span>,<span class="hljs-number">495405</span>,<span class="hljs-number">992341</span>,<span class="hljs-number">752365</span>,<span class="hljs-number">683567</span>,<span class="hljs-number">985213,457235</span>,<span class="hljs-number">682848</span>,<span class="hljs-number">614538</span>,<span class="hljs-number">290527</span>,<span class="hljs-number">742817</span>,<span class="hljs-number">649523</span>,<span class="hljs-number">773544</span>,<span class="hljs-number">422673</span>,<span class="hljs-number">568243</span>,<span class="hljs-number">550422</span>,<span class="hljs-number">431167</span>,<span class="hljs-number">499366</span>,<span class="hljs-number">441704</span>,<span class="hljs-number">313940</span>,<span class="hljs-number">2768</span>,<span class="hljs-number">360035</span>,<span class="hljs-number">7624</span>,<span class="hljs-number">466276</span>,<span class="hljs-number">932013</span>,<span class="hljs-number">388191,188509</span>,<span class="hljs-number">111829,392231</span>,<span class="hljs-number">805052</span>,<span class="hljs-number">330190</span>,<span class="hljs-number">625731</span>,<span class="hljs-number">358509</span>,<span class="hljs-number">222423,213455</span>,<span class="hljs-number">955618</span>,<span class="hljs-number">635756</span>,<span class="hljs-number">737021</span>,<span class="hljs-number">474737</span>,<span class="hljs-number">416279</span>,<span class="hljs-number">462834</span>,<span class="hljs-number">130146,188839</span>,<span class="hljs-number">474325</span>,<span class="hljs-number">749233</span>,<span class="hljs-number">881579</span>,<span class="hljs-number">351302</span>,<span class="hljs-number">569305</span>,<span class="hljs-number">910211</span>,<span class="hljs-number">548560</span>,<span class="hljs-number">630937</span>,<span class="hljs-number">266405</span>,<span class="hljs-number">236934</span>,<span class="hljs-number">459926</span>,<span class="hljs-number">156726</span>,<span class="hljs-number">723426</span>,<span class="hljs-number">150852,544118</span>,<span class="hljs-number">231395,136511</span>,<span class="hljs-number">897514</span>,<span class="hljs-number">912788</span>,<span class="hljs-number">589402</span>,<span class="hljs-number">968745</span>,<span class="hljs-number">152302</span>,<span class="hljs-number">653470</span>,<span class="hljs-number">99079</span>,<span class="hljs-number">955011</span>,<span class="hljs-number">306632</span>,<span class="hljs-number">115612,233896</span>,<span class="hljs-number">913853</span>,<span class="hljs-number">31781</span>,<span class="hljs-number">445660</span>,<span class="hljs-number">633671</span>,<span class="hljs-number">382933</span>,<span class="hljs-number">32744,432170</span>,<span class="hljs-number">277486</span>,<span class="hljs-number">579925</span>,<span class="hljs-number">636137</span>,<span class="hljs-number">277736</span>,<span class="hljs-number">265320</span>,<span class="hljs-number">959685</span>,<span class="hljs-number">861924</span>,<span class="hljs-number">338506</span>,<span class="hljs-number">16079</span>,<span class="hljs-number">472822</span>,<span class="hljs-number">382474</span>,<span class="hljs-number">373144</span>,<span class="hljs-number">802387</span>,<span class="hljs-number">661798</span>,<span class="hljs-number">82857</span>,<span class="hljs-number">596069</span>,<span class="hljs-number">463839</span>,<span class="hljs-number">30303</span>,<span class="hljs-number">569005</span>,<span class="hljs-number">972620</span>,<span class="hljs-number">144902</span>,<span class="hljs-number">439517</span>,<span class="hljs-number">38024</span>,<span class="hljs-number">971359</span>,<span class="hljs-number">459469</span>,<span class="hljs-number">719424</span>,<span class="hljs-number">502504</span>,<span class="hljs-number">469350</span>,<span class="hljs-number">63874</span>,<span class="hljs-number">747930</span>,<span class="hljs-number">955671</span>,<span class="hljs-number">256892</span>,<span class="hljs-number">612937</span>,<span class="hljs-number">348379</span>,<span class="hljs-number">684582</span>,<span class="hljs-number">408867</span>,<span class="hljs-number">121241</span>,<span class="hljs-number">839832</span>,<span class="hljs-number">488042</span>,<span class="hljs-number">320222</span>,<span class="hljs-number">374885</span>,<span class="hljs-number">937290</span>,<span class="hljs-number">713531</span>,<span class="hljs-number">545815</span>,<span class="hljs-number">56520,273207</span>,<span class="hljs-number">422949</span>,<span class="hljs-number">470586</span>,<span class="hljs-number">707661</span>,<span class="hljs-number">421076</span>,<span class="hljs-number">286379</span>,<span class="hljs-number">658012</span>,<span class="hljs-number">825462</span>,<span class="hljs-number">504221</span>,<span class="hljs-number">521032</span>,<span class="hljs-number">862377</span>,<span class="hljs-number">388946</span>,<span class="hljs-number">715634</span>,<span class="hljs-number">413875</span>,<span class="hljs-number">634634</span>,<span class="hljs-number">830168</span>,<span class="hljs-number">545467</span>,<span class="hljs-number">129410</span>,<span class="hljs-number">516950</span>,<span class="hljs-number">361699</span>,<span class="hljs-number">109834</span>,<span class="hljs-number">508888</span>,<span class="hljs-number">569769</span>,<span class="hljs-number">759873</span>,<span class="hljs-number">80878</span>,<span class="hljs-number">959676</span>,<span class="hljs-number">898377</span>,<span class="hljs-number">85888</span>,<span class="hljs-number">944092</span>,<span class="hljs-number">366444</span>,<span class="hljs-number">377719</span>,<span class="hljs-number">708393</span>,<span class="hljs-number">20226</span>,<span class="hljs-number">409764</span>,<span class="hljs-number">646760</span>,<span class="hljs-number">863475</span>,<span class="hljs-number">84135,60224</span>,<span class="hljs-number">337322</span>,<span class="hljs-number">70353</span>,<span class="hljs-number">900458</span>,<span class="hljs-number">944783</span>,<span class="hljs-number">489504</span>,<span class="hljs-number">636077</span>,<span class="hljs-number">821106,291207</span>,<span class="hljs-number">402656</span>,<span class="hljs-number">414004</span>,<span class="hljs-number">79599</span>,<span class="hljs-number">330274</span>,<span class="hljs-number">537692</span>,<span class="hljs-number">793147</span>,<span class="hljs-number">739508</span>,<span class="hljs-number">430228</span>,<span class="hljs-number">757309</span>,<span class="hljs-number">231416</span>,<span class="hljs-number">636654</span>,<span class="hljs-number">425704</span>,<span class="hljs-number">867360</span>,<span class="hljs-number">174789</span>,<span class="hljs-number">408991</span>,<span class="hljs-number">897327</span>,<span class="hljs-number">624937</span>,<span class="hljs-number">418423</span>,<span class="hljs-number">962832</span>,<span class="hljs-number">521562</span>,<span class="hljs-number">808926</span>,<span class="hljs-number">61626</span>,<span class="hljs-number">676463</span>,<span class="hljs-number">981755</span>,<span class="hljs-number">480655</span>,<span class="hljs-number">976647</span>,<span class="hljs-number">373564</span>,<span class="hljs-number">421577</span>,<span class="hljs-number">243862</span>,<span class="hljs-number">747056</span>,<span class="hljs-number">205148,545213</span>,<span class="hljs-number">652819</span>,<span class="hljs-number">604794</span>,<span class="hljs-number">590663</span>,<span class="hljs-number">398929</span>,<span class="hljs-number">762234</span>,<span class="hljs-number">682669</span>,<span class="hljs-number">845529</span>,<span class="hljs-number">669153</span>,<span class="hljs-number">286933</span>,<span class="hljs-number">529879</span>,<span class="hljs-number">152797</span>,<span class="hljs-number">499098</span>,<span class="hljs-number">846342</span>,<span class="hljs-number">443818</span>,<span class="hljs-number">449213,240158</span>,<span class="hljs-number">758195,220485</span>,<span class="hljs-number">537456</span>,<span class="hljs-number">401203</span>,<span class="hljs-number">795327</span>,<span class="hljs-number">424120</span>,<span class="hljs-number">426989</span>,<span class="hljs-number">458764</span>,<span class="hljs-number">387116</span>,<span class="hljs-number">699689</span>,<span class="hljs-number">781385</span>,<span class="hljs-number">531549</span>,<span class="hljs-number">959642</span>,<span class="hljs-number">178349,189353</span>,<span class="hljs-number">194953,307214</span>,<span class="hljs-number">126744,457196</span>,<span class="hljs-number">958385</span>,<span class="hljs-number">575962</span>,<span class="hljs-number">812445</span>,<span class="hljs-number">829516</span>,<span class="hljs-number">330117,58837</span>,<span class="hljs-number">467570</span>,<span class="hljs-number">852054</span>,<span class="hljs-number">449378</span>,<span class="hljs-number">534986</span>,<span class="hljs-number">413777</span>,<span class="hljs-number">247042</span>,<span class="hljs-number">598365</span>,<span class="hljs-number">825241,817213</span>,<span class="hljs-number">621006</span>,<span class="hljs-number">620714</span>,<span class="hljs-number">348472</span>,<span class="hljs-number">553083</span>,<span class="hljs-number">850446</span>,<span class="hljs-number">696347</span>,<span class="hljs-number">42817,95134</span>,<span class="hljs-number">380357</span>,<span class="hljs-number">175749</span>,<span class="hljs-number">336043</span>,<span class="hljs-number">728159</span>,<span class="hljs-number">978317</span>,<span class="hljs-number">739723</span>,<span class="hljs-number">776935</span>,<span class="hljs-number">402499</span>,<span class="hljs-number">504655</span>,<span class="hljs-number">796948</span>,<span class="hljs-number">716516</span>,<span class="hljs-number">427916</span>,<span class="hljs-number">189046,549152</span>,<span class="hljs-number">622782</span>,<span class="hljs-number">423128</span>,<span class="hljs-number">278862</span>,<span class="hljs-number">916883</span>,<span class="hljs-number">928044</span>,<span class="hljs-number">582573</span>,<span class="hljs-number">547444</span>,<span class="hljs-number">391435</span>,<span class="hljs-number">812005</span>,<span class="hljs-number">571930</span>,<span class="hljs-number">614170</span>,<span class="hljs-number">752632</span>,<span class="hljs-number">539850</span>,<span class="hljs-number">375182</span>,<span class="hljs-number">768488</span>,<span class="hljs-number">426864</span>,<span class="hljs-number">913485</span>,<span class="hljs-number">128391</span>,<span class="hljs-number">325337</span>,<span class="hljs-number">682989</span>,<span class="hljs-number">215899</span>,<span class="hljs-number">993461</span>,<span class="hljs-number">465458</span>,<span class="hljs-number">293547</span>,<span class="hljs-number">383074</span>,<span class="hljs-number">321823</span>,<span class="hljs-number">342962</span>,<span class="hljs-number">269172,93434</span>,<span class="hljs-number">285764</span>,<span class="hljs-number">691908</span>,<span class="hljs-number">340515</span>,<span class="hljs-number">826727</span>,<span class="hljs-number">663919</span>,<span class="hljs-number">283915</span>,<span class="hljs-number">624075</span>,<span class="hljs-number">844011</span>,<span class="hljs-number">633709</span>,<span class="hljs-number">639563</span>,<span class="hljs-number">356353</span>,<span class="hljs-number">78781</span>,<span class="hljs-number">665009</span>,<span class="hljs-number">116969,183907</span>,<span class="hljs-number">688772</span>,<span class="hljs-number">49456</span>,<span class="hljs-number">795614</span>,<span class="hljs-number">506873</span>,<span class="hljs-number">379576</span>,<span class="hljs-number">288469</span>,<span class="hljs-number">642326</span>,<span class="hljs-number">430175</span>,<span class="hljs-number">678525</span>,<span class="hljs-number">348829</span>,<span class="hljs-number">828955</span>,<span class="hljs-number">164841</span>,<span class="hljs-number">696785</span>,<span class="hljs-number">270913</span>,<span class="hljs-number">655630</span>,<span class="hljs-number">314057</span>,<span class="hljs-number">687574</span>,<span class="hljs-number">96843</span>,<span class="hljs-number">356423</span>,<span class="hljs-number">839027</span>,<span class="hljs-number">954970</span>,<span class="hljs-number">446321</span>,<span class="hljs-number">521112</span>,<span class="hljs-number">694495</span>,<span class="hljs-number">941654</span>,<span class="hljs-number">190303,173211</span>,<span class="hljs-number">440738</span>,<span class="hljs-number">621782</span>,<span class="hljs-number">564801</span>,<span class="hljs-number">35510</span>,<span class="hljs-number">601822</span>,<span class="hljs-number">786698</span>,<span class="hljs-number">902399</span>,<span class="hljs-number">319519</span>,<span class="hljs-number">912969</span>,<span class="hljs-number">610964</span>,<span class="hljs-number">851437</span>,<span class="hljs-number">531197</span>,<span class="hljs-number">379746</span>,<span class="hljs-number">284047</span>,<span class="hljs-number">767544</span>,<span class="hljs-number">113483,136550</span>,<span class="hljs-number">511074</span>,<span class="hljs-number">858447</span>,<span class="hljs-number">854949</span>,<span class="hljs-number">875624</span>,<span class="hljs-number">152828</span>,<span class="hljs-number">831762</span>,<span class="hljs-number">523000</span>,<span class="hljs-number">534281</span>,<span class="hljs-number">372637</span>,<span class="hljs-number">717913</span>,<span class="hljs-number">215032</span>,<span class="hljs-number">410876</span>,<span class="hljs-number">92760,19002</span>,<span class="hljs-number">201224,103047</span>,<span class="hljs-number">823061</span>,<span class="hljs-number">583877</span>,<span class="hljs-number">92048</span>,<span class="hljs-number">955971</span>,<span class="hljs-number">859459</span>,<span class="hljs-number">785197,215397</span>,<span class="hljs-number">699197</span>,<span class="hljs-number">748457</span>,<span class="hljs-number">520747</span>,<span class="hljs-number">739014</span>,<span class="hljs-number">264083</span>,<span class="hljs-number">368119</span>,<span class="hljs-number">601034</span>,<span class="hljs-number">256175</span>,<span class="hljs-number">916871</span>,<span class="hljs-number">658528</span>,<span class="hljs-number">676841</span>,<span class="hljs-number">477189,135992</span>,<span class="hljs-number">157594</span>,<span class="hljs-number">457436</span>,<span class="hljs-number">788312</span>,<span class="hljs-number">221778,232201</span>,<span class="hljs-number">876662</span>,<span class="hljs-number">637173</span>,<span class="hljs-number">628357</span>,<span class="hljs-number">179291</span>,<span class="hljs-number">912713</span>,<span class="hljs-number">592379</span>,<span class="hljs-number">122314,435229</span>,<span class="hljs-number">314508</span>,<span class="hljs-number">733150,414183</span>,<span class="hljs-number">718788</span>,<span class="hljs-number">281967</span>,<span class="hljs-number">625650</span>,<span class="hljs-number">842990</span>,<span class="hljs-number">222716,789129</span>,<span class="hljs-number">52672,108887</span>,<span class="hljs-number">913102</span>,<span class="hljs-number">347902</span>,<span class="hljs-number">784162,194109</span>,<span class="hljs-number">53137</span>,<span class="hljs-number">952063</span>,<span class="hljs-number">484569</span>,<span class="hljs-number">41588</span>,<span class="hljs-number">398019</span>,<span class="hljs-number">82141,36930</span>,<span class="hljs-number">441162,144497</span>,<span class="hljs-number">471897</span>,<span class="hljs-number">551403</span>,<span class="hljs-number">263688</span>,<span class="hljs-number">361332</span>,<span class="hljs-number">950352</span>,<span class="hljs-number">606137,138501</span>,<span class="hljs-number">218920,664253</span>,<span class="hljs-number">991640</span>,<span class="hljs-number">526403</span>,<span class="hljs-number">315813</span>,<span class="hljs-number">571982</span>,<span class="hljs-number">767279</span>,<span class="hljs-number">870600</span>,<span class="hljs-number">742975</span>,<span class="hljs-number">23112</span>,<span class="hljs-number">592445</span>,<span class="hljs-number">848187</span>,<span class="hljs-number">806746</span>,<span class="hljs-number">674042</span>,<span class="hljs-number">452086</span>,<span class="hljs-number">851804</span>,<span class="hljs-number">64304</span>,<span class="hljs-number">757675</span>,<span class="hljs-number">676466</span>,<span class="hljs-number">334461</span>,<span class="hljs-number">102280,100101</span>,<span class="hljs-number">557025</span>,<span class="hljs-number">193550</span>,<span class="hljs-number">343956</span>,<span class="hljs-number">398453</span>,<span class="hljs-number">855828</span>,<span class="hljs-number">564179,340210</span>,<span class="hljs-number">560951</span>,<span class="hljs-number">219887</span>,<span class="hljs-number">397781</span>,<span class="hljs-number">558813</span>,<span class="hljs-number">73871</span>,<span class="hljs-number">340273</span>,<span class="hljs-number">260891</span>,<span class="hljs-number">52991</span>,<span class="hljs-number">864326</span>,<span class="hljs-number">493288</span>,<span class="hljs-number">321147,3715</span>,<span class="hljs-number">733835</span>,<span class="hljs-number">710202</span>,<span class="hljs-number">635566</span>,<span class="hljs-number">766183</span>,<span class="hljs-number">443903</span>,<span class="hljs-number">174467</span>,<span class="hljs-number">708716</span>,<span class="hljs-number">511585</span>,<span class="hljs-number">767605</span>,<span class="hljs-number">262635</span>,<span class="hljs-number">927238</span>,<span class="hljs-number">664770</span>,<span class="hljs-number">434243,28306</span>,<span class="hljs-number">902182</span>,<span class="hljs-number">637669</span>,<span class="hljs-number">254304,550127</span>,<span class="hljs-number">169120</span>,<span class="hljs-number">279362</span>,<span class="hljs-number">232586,739181</span>,<span class="hljs-number">790764</span>,<span class="hljs-number">555424</span>,<span class="hljs-number">408898</span>,<span class="hljs-number">959236</span>,<span class="hljs-number">800784</span>,<span class="hljs-number">630566</span>,<span class="hljs-number">564134</span>,<span class="hljs-number">469288</span>,<span class="hljs-number">464313</span>,<span class="hljs-number">403118,130768</span>,<span class="hljs-number">494872</span>,<span class="hljs-number">718635</span>,<span class="hljs-number">217615</span>,<span class="hljs-number">518541</span>,<span class="hljs-number">407031</span>,<span class="hljs-number">814721</span>,<span class="hljs-number">462566</span>,<span class="hljs-number">224210</span>,<span class="hljs-number">582450</span>,<span class="hljs-number">494152</span>,<span class="hljs-number">645057</span>,<span class="hljs-number">307847</span>,<span class="hljs-number">307393</span>,<span class="hljs-number">643587</span>,<span class="hljs-number">729865</span>,<span class="hljs-number">69696</span>,<span class="hljs-number">705448</span>,<span class="hljs-number">203427</span>,<span class="hljs-number">690925</span>,<span class="hljs-number">99477</span>,<span class="hljs-number">717388</span>,<span class="hljs-number">994476</span>,<span class="hljs-number">689741</span>,<span class="hljs-number">166775</span>,<span class="hljs-number">945951</span>,<span class="hljs-number">258434</span>,<span class="hljs-number">884258</span>,<span class="hljs-number">533806</span>,<span class="hljs-number">925280</span>,<span class="hljs-number">623042</span>,<span class="hljs-number">628933</span>,<span class="hljs-number">46265</span>,<span class="hljs-number">903690</span>,<span class="hljs-number">677895</span>,<span class="hljs-number">774644</span>,<span class="hljs-number">179265</span>,<span class="hljs-number">826526</span>,<span class="hljs-number">66474</span>,<span class="hljs-number">819432</span>,<span class="hljs-number">784728</span>,<span class="hljs-number">680912</span>,<span class="hljs-number">808394</span>,<span class="hljs-number">310816</span>,<span class="hljs-number">359524</span>,<span class="hljs-number">354121,435174</span>,<span class="hljs-number">115146</span>,<span class="hljs-number">556813</span>,<span class="hljs-number">738182</span>,<span class="hljs-number">909281</span>,<span class="hljs-number">797300</span>,<span class="hljs-number">584565</span>,<span class="hljs-number">584262</span>,<span class="hljs-number">561041</span>,<span class="hljs-number">858152,23989</span>,<span class="hljs-number">35025</span>,<span class="hljs-number">798573</span>,<span class="hljs-number">308063</span>,<span class="hljs-number">831534</span>,<span class="hljs-number">196821</span>,<span class="hljs-number">829867</span>,<span class="hljs-number">939104,82999</span>,<span class="hljs-number">348167</span>,<span class="hljs-number">307372</span>,<span class="hljs-number">178808,134116</span>,<span class="hljs-number">985010</span>,<span class="hljs-number">966507</span>,<span class="hljs-number">478467</span>,<span class="hljs-number">224465</span>,<span class="hljs-number">903026</span>,<span class="hljs-number">347496</span>,<span class="hljs-number">164670,554171</span>,<span class="hljs-number">607751</span>,<span class="hljs-number">90342</span>,<span class="hljs-number">839801</span>,<span class="hljs-number">897830</span>,<span class="hljs-number">873695</span>,<span class="hljs-number">250833</span>,<span class="hljs-number">457587</span>,<span class="hljs-number">332541</span>,<span class="hljs-number">240183</span>,<span class="hljs-number">920742</span>,<span class="hljs-number">826711</span>,<span class="hljs-number">915126</span>,<span class="hljs-number">811771</span>,<span class="hljs-number">732776</span>,<span class="hljs-number">534524</span>,<span class="hljs-number">375784</span>,<span class="hljs-number">761388</span>,<span class="hljs-number">213463,44846</span>,<span class="hljs-number">107072,401175</span>,<span class="hljs-number">330323</span>,<span class="hljs-number">279384</span>,<span class="hljs-number">407145</span>,<span class="hljs-number">257661</span>,<span class="hljs-number">921060</span>,<span class="hljs-number">473727</span>,<span class="hljs-number">316020</span>,<span class="hljs-number">717199</span>,<span class="hljs-number">425743</span>,<span class="hljs-number">597180</span>,<span class="hljs-number">320813</span>,<span class="hljs-number">478709</span>,<span class="hljs-number">111351</span>,<span class="hljs-number">457570</span>,<span class="hljs-number">435220,71036</span>,<span class="hljs-number">151792,181205</span>,<span class="hljs-number">643631</span>,<span class="hljs-number">821193</span>,<span class="hljs-number">340798</span>,<span class="hljs-number">51748,902170</span>,<span class="hljs-number">854364</span>,<span class="hljs-number">764294</span>,<span class="hljs-number">843483</span>,<span class="hljs-number">249082</span>,<span class="hljs-number">922834</span>,<span class="hljs-number">86058</span>,<span class="hljs-number">842957</span>,<span class="hljs-number">817471</span>,<span class="hljs-number">112732</span>,<span class="hljs-number">458766</span>,<span class="hljs-number">302375</span>,<span class="hljs-number">636556</span>,<span class="hljs-number">182095,17685</span>,<span class="hljs-number">702612</span>,<span class="hljs-number">988046</span>,<span class="hljs-number">296179,104954</span>,<span class="hljs-number">612307</span>,<span class="hljs-number">908102,562247</span>,<span class="hljs-number">310789</span>,<span class="hljs-number">69294</span>,<span class="hljs-number">728703</span>,<span class="hljs-number">79718,691138</span>,<span class="hljs-number">536410</span>,<span class="hljs-number">750560</span>,<span class="hljs-number">552458</span>,<span class="hljs-number">599375</span>,<span class="hljs-number">55268</span>,<span class="hljs-number">972916</span>,<span class="hljs-number">657658</span>,<span class="hljs-number">698463</span>,<span class="hljs-number">966600</span>,<span class="hljs-number">921310</span>,<span class="hljs-number">102545</span>,<span class="hljs-number">570610</span>,<span class="hljs-number">313832</span>,<span class="hljs-number">386295</span>,<span class="hljs-number">729245,84323</span>,<span class="hljs-number">106512</span>,<span class="hljs-number">434739</span>,<span class="hljs-number">597622</span>,<span class="hljs-number">89192</span>,<span class="hljs-number">445926</span>,<span class="hljs-number">385768</span>,<span class="hljs-number">16156,103342</span>,<span class="hljs-number">89778</span>,<span class="hljs-number">713501</span>,<span class="hljs-number">179153</span>,<span class="hljs-number">710049</span>,<span class="hljs-number">874125</span>,<span class="hljs-number">805848</span>,<span class="hljs-number">196892</span>,<span class="hljs-number">518495</span>,<span class="hljs-number">207976</span>,<span class="hljs-number">964825</span>,<span class="hljs-number">521506</span>,<span class="hljs-number">352324</span>,<span class="hljs-number">861493</span>,<span class="hljs-number">699838</span>,<span class="hljs-number">836722</span>,<span class="hljs-number">674637</span>,<span class="hljs-number">659576</span>,<span class="hljs-number">746627</span>,<span class="hljs-number">448993</span>,<span class="hljs-number">669292</span>,<span class="hljs-number">23324</span>,<span class="hljs-number">630576</span>,<span class="hljs-number">517906</span>,<span class="hljs-number">871653</span>,<span class="hljs-number">674153</span>,<span class="hljs-number">462770</span>,<span class="hljs-number">215439,212973</span>,<span class="hljs-number">8829</span>,<span class="hljs-number">603343</span>,<span class="hljs-number">532961</span>,<span class="hljs-number">375858</span>,<span class="hljs-number">87283</span>,<span class="hljs-number">313388</span>,<span class="hljs-number">328217</span>,<span class="hljs-number">847988</span>,<span class="hljs-number">798746</span>,<span class="hljs-number">551527</span>,<span class="hljs-number">776620</span>,<span class="hljs-number">286391</span>,<span class="hljs-number">157606</span>,<span class="hljs-number">849718</span>,<span class="hljs-number">719948</span>,<span class="hljs-number">80887</span>,<span class="hljs-number">353731</span>,<span class="hljs-number">717595</span>,<span class="hljs-number">172752,671225</span>,<span class="hljs-number">284218</span>,<span class="hljs-number">285842</span>,<span class="hljs-number">562654</span>,<span class="hljs-number">758658</span>,<span class="hljs-number">885965</span>,<span class="hljs-number">28092</span>,<span class="hljs-number">495064</span>,<span class="hljs-number">957830</span>,<span class="hljs-number">817310</span>,<span class="hljs-number">805542</span>,<span class="hljs-number">483835</span>,<span class="hljs-number">651155</span>,<span class="hljs-number">915668</span>,<span class="hljs-number">418728</span>,<span class="hljs-number">345046</span>,<span class="hljs-number">935689</span>,<span class="hljs-number">258873</span>,<span class="hljs-number">150432</span>,<span class="hljs-number">948592</span>,<span class="hljs-number">332781</span>,<span class="hljs-number">469848</span>,<span class="hljs-number">874477</span>,<span class="hljs-number">78354,215552</span>,<span class="hljs-number">138758</span>,<span class="hljs-number">411923</span>,<span class="hljs-number">946996</span>,<span class="hljs-number">364404</span>,<span class="hljs-number">371554</span>,<span class="hljs-number">500507</span>,<span class="hljs-number">353603</span>,<span class="hljs-number">926937</span>,<span class="hljs-number">542959</span>,<span class="hljs-number">443077</span>,<span class="hljs-number">650120,158213</span>,<span class="hljs-number">940350</span>,<span class="hljs-number">587966</span>,<span class="hljs-number">217069</span>,<span class="hljs-number">376345</span>,<span class="hljs-number">639740</span>,<span class="hljs-number">476531</span>,<span class="hljs-number">104643</span>,<span class="hljs-number">458288</span>,<span class="hljs-number">506918</span>,<span class="hljs-number">979708</span>,<span class="hljs-number">334895</span>,<span class="hljs-number">518967</span>,<span class="hljs-number">327536</span>,<span class="hljs-number">418396</span>,<span class="hljs-number">4454</span>,<span class="hljs-number">692964</span>,<span class="hljs-number">388656</span>,<span class="hljs-number">689160,162529</span>,<span class="hljs-number">722198,958248</span>,<span class="hljs-number">247863</span>,<span class="hljs-number">544987</span>,<span class="hljs-number">760086</span>,<span class="hljs-number">789586</span>,<span class="hljs-number">851770</span>,<span class="hljs-number">566270</span>,<span class="hljs-number">168696,52511</span>,<span class="hljs-number">538800</span>,<span class="hljs-number">459490</span>,<span class="hljs-number">365046</span>,<span class="hljs-number">763266</span>,<span class="hljs-number">539253</span>,<span class="hljs-number">801586</span>,<span class="hljs-number">404325</span>,<span class="hljs-number">848979</span>,<span class="hljs-number">817976</span>,<span class="hljs-number">55571,19393</span>,<span class="hljs-number">129040</span>,<span class="hljs-number">872484</span>,<span class="hljs-number">506096</span>,<span class="hljs-number">957616</span>,<span class="hljs-number">783539</span>,<span class="hljs-number">295438</span>,<span class="hljs-number">248536,105813</span>,<span class="hljs-number">269798</span>,<span class="hljs-number">172673,5812</span>,<span class="hljs-number">625104,825213</span>,<span class="hljs-number">34970,209244</span>,<span class="hljs-number">431246,90943</span>,<span class="hljs-number">617060</span>,<span class="hljs-number">235017,782156</span>,<span class="hljs-number">500036</span>,<span class="hljs-number">802103</span>,<span class="hljs-number">261016</span>,<span class="hljs-number">591862</span>,<span class="hljs-number">125486,403191</span>,<span class="hljs-number">221396,89019</span>,<span class="hljs-number">23554</span>,<span class="hljs-number">845031</span>,<span class="hljs-number">415860</span>,<span class="hljs-number">368478</span>,<span class="hljs-number">41596</span>,<span class="hljs-number">363802</span>,<span class="hljs-number">635004</span>,<span class="hljs-number">457783</span>,<span class="hljs-number">756272</span>,<span class="hljs-number">257816</span>,<span class="hljs-number">300411</span>,<span class="hljs-number">828660</span>,<span class="hljs-number">266558</span>,<span class="hljs-number">205833,756248</span>,<span class="hljs-number">805300</span>,<span class="hljs-number">770033</span>,<span class="hljs-number">639565</span>,<span class="hljs-number">703263</span>,<span class="hljs-number">957921</span>,<span class="hljs-number">409866</span>,<span class="hljs-number">891715</span>,<span class="hljs-number">806478</span>,<span class="hljs-number">442438</span>,<span class="hljs-number">827425</span>,<span class="hljs-number">863647</span>,<span class="hljs-number">512327</span>,<span class="hljs-number">284115</span>,<span class="hljs-number">840881</span>,<span class="hljs-number">284466</span>,<span class="hljs-number">98174,908111</span>,<span class="hljs-number">968862</span>,<span class="hljs-number">695277</span>,<span class="hljs-number">793098</span>,<span class="hljs-number">191747</span>,<span class="hljs-number">406303</span>,<span class="hljs-number">582266</span>,<span class="hljs-number">579719</span>,<span class="hljs-number">795909</span>,<span class="hljs-number">757037</span>,<span class="hljs-number">971491</span>,<span class="hljs-number">343829</span>,<span class="hljs-number">480125,194430</span>,<span class="hljs-number">650062</span>,<span class="hljs-number">346577</span>,<span class="hljs-number">386053</span>,<span class="hljs-number">804026</span>,<span class="hljs-number">173437</span>,<span class="hljs-number">898432</span>,<span class="hljs-number">635397</span>,<span class="hljs-number">758129</span>,<span class="hljs-number">380764</span>,<span class="hljs-number">950360</span>,<span class="hljs-number">558895</span>,<span class="hljs-number">524211,91261</span>,<span class="hljs-number">673161,159881</span>,<span class="hljs-number">22335,57644</span>,<span class="hljs-number">322350</span>,<span class="hljs-number">642135</span>,<span class="hljs-number">671841</span>,<span class="hljs-number">147291,409144</span>,<span class="hljs-number">72182,126232</span>,<span class="hljs-number">751572</span>,<span class="hljs-number">608617</span>,<span class="hljs-number">669781</span>,<span class="hljs-number">65709,27491</span>,<span class="hljs-number">111397,64146</span>,<span class="hljs-number">479601</span>,<span class="hljs-number">275569</span>,<span class="hljs-number">636139,122852</span>,<span class="hljs-number">896625</span>,<span class="hljs-number">826521</span>,<span class="hljs-number">468139</span>,<span class="hljs-number">942925</span>,<span class="hljs-number">473773</span>,<span class="hljs-number">686315</span>,<span class="hljs-number">431413</span>,<span class="hljs-number">208968,66605</span>,<span class="hljs-number">747804</span>,<span class="hljs-number">67557</span>,<span class="hljs-number">410587</span>,<span class="hljs-number">777954</span>,<span class="hljs-number">820757</span>,<span class="hljs-number">97567</span>,<span class="hljs-number">304271</span>,<span class="hljs-number">978212</span>,<span class="hljs-number">444526</span>,<span class="hljs-number">70208</span>,<span class="hljs-number">321403</span>,<span class="hljs-number">987094</span>,<span class="hljs-number">376158</span>,<span class="hljs-number">803392</span>,<span class="hljs-number">371825</span>,<span class="hljs-number">771674</span>,<span class="hljs-number">942464</span>,<span class="hljs-number">348867</span>,<span class="hljs-number">809450</span>,<span class="hljs-number">464232,238803</span>,<span class="hljs-number">155739</span>,<span class="hljs-number">640088</span>,<span class="hljs-number">500114</span>,<span class="hljs-number">607480</span>,<span class="hljs-number">243823</span>,<span class="hljs-number">381624</span>,<span class="hljs-number">199580,31543</span>,<span class="hljs-number">952475</span>,<span class="hljs-number">645524</span>,<span class="hljs-number">936759</span>,<span class="hljs-number">456237</span>,<span class="hljs-number">555941</span>,<span class="hljs-number">539018</span>,<span class="hljs-number">591362</span>,<span class="hljs-number">784599</span>,<span class="hljs-number">205281</span>,<span class="hljs-number">564353</span>,<span class="hljs-number">304103</span>,<span class="hljs-number">911800</span>,<span class="hljs-number">14379,103541</span>,<span class="hljs-number">268223,201288</span>,<span class="hljs-number">223634</span>,<span class="hljs-number">897312</span>,<span class="hljs-number">473758</span>,<span class="hljs-number">808976</span>,<span class="hljs-number">631077</span>,<span class="hljs-number">198368</span>,<span class="hljs-number">769606</span>,<span class="hljs-number">871598</span>,<span class="hljs-number">291803</span>,<span class="hljs-number">189929</span>,<span class="hljs-number">933955</span>,<span class="hljs-number">371574</span>,<span class="hljs-number">808637</span>,<span class="hljs-number">962549</span>,<span class="hljs-number">834215,720103</span>,<span class="hljs-number">240531</span>,<span class="hljs-number">721401</span>,<span class="hljs-number">306488</span>,<span class="hljs-number">905111,570253</span>,<span class="hljs-number">629427</span>,<span class="hljs-number">978236,17836</span>,<span class="hljs-number">432588</span>,<span class="hljs-number">795612</span>,<span class="hljs-number">549605</span>,<span class="hljs-number">823970</span>,<span class="hljs-number">926892</span>,<span class="hljs-number">260893</span>,<span class="hljs-number">945413</span>,<span class="hljs-number">798898</span>,<span class="hljs-number">745004</span>,<span class="hljs-number">519643</span>,<span class="hljs-number">516373</span>,<span class="hljs-number">572399</span>,<span class="hljs-number">219059</span>,<span class="hljs-number">660536</span>,<span class="hljs-number">562504</span>,<span class="hljs-number">485381</span>,<span class="hljs-number">251210,128740</span>,<span class="hljs-number">318431</span>,<span class="hljs-number">94649</span>,<span class="hljs-number">714422</span>,<span class="hljs-number">909326</span>,<span class="hljs-number">410842</span>,<span class="hljs-number">816915</span>,<span class="hljs-number">181586</span>,<span class="hljs-number">969990</span>,<span class="hljs-number">110322,62986</span>,<span class="hljs-number">22556</span>,<span class="hljs-number">902764</span>,<span class="hljs-number">198471</span>,<span class="hljs-number">365330</span>,<span class="hljs-number">593209</span>,<span class="hljs-number">588286</span>,<span class="hljs-number">108197</span>,<span class="hljs-number">422609</span>,<span class="hljs-number">849571</span>,<span class="hljs-number">670043</span>,<span class="hljs-number">729397</span>,<span class="hljs-number">796469</span>,<span class="hljs-number">489517</span>,<span class="hljs-number">940744</span>,<span class="hljs-number">17635,155201</span>,<span class="hljs-number">853020</span>,<span class="hljs-number">813964</span>,<span class="hljs-number">246587</span>,<span class="hljs-number">914715</span>,<span class="hljs-number">811323</span>,<span class="hljs-number">740059</span>,<span class="hljs-number">183915</span>,<span class="hljs-number">546084</span>,<span class="hljs-number">663166</span>,<span class="hljs-number">378422</span>,<span class="hljs-number">744806</span>,<span class="hljs-number">700376</span>,<span class="hljs-number">468030</span>,<span class="hljs-number">883271</span>,<span class="hljs-number">155835,649171</span>,<span class="hljs-number">80052,786152</span>,<span class="hljs-number">899322</span>,<span class="hljs-number">682703</span>,<span class="hljs-number">422353</span>,<span class="hljs-number">165132</span>,<span class="hljs-number">379514</span>,<span class="hljs-number">352078</span>,<span class="hljs-number">42599</span>,<span class="hljs-number">632263</span>,<span class="hljs-number">278621</span>,<span class="hljs-number">826083</span>,<span class="hljs-number">937617</span>,<span class="hljs-number">6166,205431</span>,<span class="hljs-number">166378,46042</span>,<span class="hljs-number">414058</span>,<span class="hljs-number">652480</span>,<span class="hljs-number">902245,20020</span>,<span class="hljs-number">788703</span>,<span class="hljs-number">380505</span>,<span class="hljs-number">922208</span>,<span class="hljs-number">531265</span>,<span class="hljs-number">991698</span>,<span class="hljs-number">639020</span>,<span class="hljs-number">945093</span>,<span class="hljs-number">68636</span>,<span class="hljs-number">343073</span>,<span class="hljs-number">601321</span>,<span class="hljs-number">493491</span>,<span class="hljs-number">356991</span>,<span class="hljs-number">530262</span>,<span class="hljs-number">62939,235121</span>,<span class="hljs-number">705728</span>,<span class="hljs-number">1546</span>,<span class="hljs-number">624508</span>,<span class="hljs-number">407058</span>,<span class="hljs-number">545526</span>,<span class="hljs-number">87302</span>,<span class="hljs-number">424984</span>,<span class="hljs-number">788323</span>,<span class="hljs-number">12673</span>,<span class="hljs-number">831050</span>,<span class="hljs-number">791392</span>,<span class="hljs-number">302842</span>,<span class="hljs-number">26785</span>,<span class="hljs-number">382536</span>,<span class="hljs-number">750381</span>,<span class="hljs-number">107865,275103</span>,<span class="hljs-number">351338</span>,<span class="hljs-number">207957</span>,<span class="hljs-number">719278</span>,<span class="hljs-number">747464</span>,<span class="hljs-number">675173</span>,<span class="hljs-number">392074</span>,<span class="hljs-number">541228</span>,<span class="hljs-number">892028</span>,<span class="hljs-number">602826</span>,<span class="hljs-number">154428</span>,<span class="hljs-number">501041</span>,<span class="hljs-number">406351</span>,<span class="hljs-number">713118</span>,<span class="hljs-number">298086</span>,<span class="hljs-number">655407</span>,<span class="hljs-number">326690</span>,<span class="hljs-number">561698</span>,<span class="hljs-number">805439</span>,<span class="hljs-number">415218</span>,<span class="hljs-number">474971</span>,<span class="hljs-number">909470</span>,<span class="hljs-number">605333</span>,<span class="hljs-number">862014</span>,<span class="hljs-number">249218,108790</span>,<span class="hljs-number">955575</span>,<span class="hljs-number">72761,91300</span>,<span class="hljs-number">54095</span>,<span class="hljs-number">645791</span>,<span class="hljs-number">329112</span>,<span class="hljs-number">953448</span>,<span class="hljs-number">929015</span>,<span class="hljs-number">320499</span>,<span class="hljs-number">815456</span>,<span class="hljs-number">193571</span>,<span class="hljs-number">313871</span>,<span class="hljs-number">412894</span>,<span class="hljs-number">401811</span>,<span class="hljs-number">312024</span>,<span class="hljs-number">194864,586134</span>,<span class="hljs-number">736655</span>,<span class="hljs-number">510475</span>,<span class="hljs-number">75562</span>,<span class="hljs-number">732257</span>,<span class="hljs-number">769024</span>,<span class="hljs-number">158856</span>,<span class="hljs-number">433349</span>,<span class="hljs-number">485527</span>,<span class="hljs-number">399289</span>,<span class="hljs-number">420208</span>,<span class="hljs-number">505469</span>,<span class="hljs-number">184613,25112</span>,<span class="hljs-number">706785</span>,<span class="hljs-number">185782</span>,<span class="hljs-number">447987</span>,<span class="hljs-number">391285</span>,<span class="hljs-number">384118</span>,<span class="hljs-number">433809</span>,<span class="hljs-number">755927</span>,<span class="hljs-number">836568</span>,<span class="hljs-number">917535</span>,<span class="hljs-number">369849</span>,<span class="hljs-number">880566</span>,<span class="hljs-number">717073</span>,<span class="hljs-number">827549</span>,<span class="hljs-number">67409,384137</span>,<span class="hljs-number">196978</span>,<span class="hljs-number">709279</span>,<span class="hljs-number">114915</span>,<span class="hljs-number">967803</span>,<span class="hljs-number">637040</span>,<span class="hljs-number">843745</span>,<span class="hljs-number">154744,238211</span>,<span class="hljs-number">411814</span>,<span class="hljs-number">577567</span>,<span class="hljs-number">763365</span>,<span class="hljs-number">437306</span>,<span class="hljs-number">167924</span>,<span class="hljs-number">288316</span>,<span class="hljs-number">264832</span>,<span class="hljs-number">396326</span>,<span class="hljs-number">725898</span>,<span class="hljs-number">693120</span>,<span class="hljs-number">318501</span>,<span class="hljs-number">855808</span>,<span class="hljs-number">560418</span>,<span class="hljs-number">910749</span>,<span class="hljs-number">853761</span>,<span class="hljs-number">386756</span>,<span class="hljs-number">285524</span>,<span class="hljs-number">292342</span>,<span class="hljs-number">831484</span>,<span class="hljs-number">391753</span>,<span class="hljs-number">727256</span>,<span class="hljs-number">818474</span>,<span class="hljs-number">566232</span>,<span class="hljs-number">284399</span>,<span class="hljs-number">170385</span>,<span class="hljs-number">440634</span>,<span class="hljs-number">888638</span>,<span class="hljs-number">965014</span>,<span class="hljs-number">899145</span>,<span class="hljs-number">609563</span>,<span class="hljs-number">598566</span>,<span class="hljs-number">789338</span>,<span class="hljs-number">856958</span>,<span class="hljs-number">407503</span>,<span class="hljs-number">117639,482168</span>,<span class="hljs-number">165695</span>,<span class="hljs-number">447903</span>,<span class="hljs-number">639292</span>,<span class="hljs-number">307357</span>,<span class="hljs-number">371676</span>,<span class="hljs-number">270300</span>,<span class="hljs-number">461465</span>,<span class="hljs-number">594982</span>,<span class="hljs-number">895040</span>,<span class="hljs-number">448533</span>,<span class="hljs-number">349218,709184</span>,<span class="hljs-number">902326</span>,<span class="hljs-number">813133</span>,<span class="hljs-number">368908</span>,<span class="hljs-number">690132,33188</span>,<span class="hljs-number">243537,206332</span>,<span class="hljs-number">503919</span>,<span class="hljs-number">350269</span>,<span class="hljs-number">535985</span>,<span class="hljs-number">230061</span>,<span class="hljs-number">712436</span>,<span class="hljs-number">365930</span>,<span class="hljs-number">923812</span>,<span class="hljs-number">734110</span>,<span class="hljs-number">914338</span>,<span class="hljs-number">256933</span>,<span class="hljs-number">852377</span>,<span class="hljs-number">767033</span>,<span class="hljs-number">582216</span>,<span class="hljs-number">666071</span>,<span class="hljs-number">20480,159065</span>,<span class="hljs-number">639456</span>,<span class="hljs-number">600987</span>,<span class="hljs-number">852562</span>,<span class="hljs-number">735136,215408</span>,<span class="hljs-number">638588</span>,<span class="hljs-number">382150</span>,<span class="hljs-number">932597</span>,<span class="hljs-number">629856</span>,<span class="hljs-number">160066,77216</span>,<span class="hljs-number">512954</span>,<span class="hljs-number">84181,151660</span>,<span class="hljs-number">199809,942244</span>,<span class="hljs-number">678014</span>,<span class="hljs-number">696538</span>,<span class="hljs-number">444088</span>,<span class="hljs-number">44926</span>,<span class="hljs-number">271289</span>,<span class="hljs-number">212273</span>,<span class="hljs-number">675975</span>,<span class="hljs-number">225578</span>,<span class="hljs-number">449264</span>,<span class="hljs-number">683257</span>,<span class="hljs-number">73467,312201</span>,<span class="hljs-number">469325</span>,<span class="hljs-number">661982</span>,<span class="hljs-number">71632,220028</span>,<span class="hljs-number">601855</span>,<span class="hljs-number">982401</span>,<span class="hljs-number">357747</span>,<span class="hljs-number">117622</span>,<span class="hljs-number">907071</span>,<span class="hljs-number">663497</span>,<span class="hljs-number">786748</span>,<span class="hljs-number">922462</span>,<span class="hljs-number">294102</span>,<span class="hljs-number">352463</span>,<span class="hljs-number">313023</span>,<span class="hljs-number">602019</span>,<span class="hljs-number">815965</span>,<span class="hljs-number">640263</span>,<span class="hljs-number">916056</span>,<span class="hljs-number">582339</span>,<span class="hljs-number">242224</span>,<span class="hljs-number">971903</span>,<span class="hljs-number">512787</span>,<span class="hljs-number">749190,179451</span>,<span class="hljs-number">903379</span>,<span class="hljs-number">848994</span>,<span class="hljs-number">916966</span>,<span class="hljs-number">56456</span>,<span class="hljs-number">672695</span>,<span class="hljs-number">562805</span>,<span class="hljs-number">146559</span>,<span class="hljs-number">269372</span>,<span class="hljs-number">558417</span>,<span class="hljs-number">285613</span>,<span class="hljs-number">548323</span>,<span class="hljs-number">421977</span>,<span class="hljs-number">837201</span>,<span class="hljs-number">804054</span>,<span class="hljs-number">79191,233379</span>,<span class="hljs-number">136949</span>,<span class="hljs-number">940655</span>,<span class="hljs-number">647622</span>,<span class="hljs-number">234754,105080</span>,<span class="hljs-number">898559</span>,<span class="hljs-number">657017</span>,<span class="hljs-number">577917</span>,<span class="hljs-number">534901</span>,<span class="hljs-number">541736</span>,<span class="hljs-number">122750,590121</span>,<span class="hljs-number">815464</span>,<span class="hljs-number">997697</span>,<span class="hljs-number">458812</span>,<span class="hljs-number">651651</span>,<span class="hljs-number">345436</span>,<span class="hljs-number">660601</span>,<span class="hljs-number">302620</span>,<span class="hljs-number">895067</span>,<span class="hljs-number">261647</span>,<span class="hljs-number">949436</span>,<span class="hljs-number">45734</span>,<span class="hljs-number">589531</span>,<span class="hljs-number">281288</span>,<span class="hljs-number">750334</span>,<span class="hljs-number">61308,202832</span>,<span class="hljs-number">686250</span>,<span class="hljs-number">579045</span>,<span class="hljs-number">741101,93184</span>,<span class="hljs-number">730471</span>,<span class="hljs-number">744503</span>,<span class="hljs-number">990779</span>,<span class="hljs-number">21570</span>,<span class="hljs-number">877676</span>,<span class="hljs-number">457823</span>,<span class="hljs-number">733905</span>,<span class="hljs-number">867607</span>,<span class="hljs-number">329138</span>,<span class="hljs-number">305829</span>,<span class="hljs-number">81383</span>,<span class="hljs-number">720358</span>,<span class="hljs-number">556636</span>,<span class="hljs-number">23023</span>,<span class="hljs-number">782004</span>,<span class="hljs-number">362246,10466</span>,<span class="hljs-number">618972</span>,<span class="hljs-number">368285</span>,<span class="hljs-number">367651</span>,<span class="hljs-number">202231,532221</span>,<span class="hljs-number">167216</span>,<span class="hljs-number">904944</span>,<span class="hljs-number">65046,653247</span>,<span class="hljs-number">808615</span>,<span class="hljs-number">371229</span>,<span class="hljs-number">987717</span>,<span class="hljs-number">556747</span>,<span class="hljs-number">777728</span>,<span class="hljs-number">421897</span>,<span class="hljs-number">473145</span>,<span class="hljs-number">739559</span>,<span class="hljs-number">141486,162078</span>,<span class="hljs-number">721616</span>,<span class="hljs-number">61030</span>,<span class="hljs-number">425370</span>,<span class="hljs-number">764079</span>,<span class="hljs-number">718100</span>,<span class="hljs-number">257968</span>,<span class="hljs-number">44718,91388</span>,<span class="hljs-number">726180</span>,<span class="hljs-number">764778</span>,<span class="hljs-number">950182</span>,<span class="hljs-number">576569</span>,<span class="hljs-number">84786</span>,<span class="hljs-number">851331</span>,<span class="hljs-number">870751</span>,<span class="hljs-number">447017</span>,<span class="hljs-number">363608</span>,<span class="hljs-number">35983</span>,<span class="hljs-number">832388</span>,<span class="hljs-number">345986</span>,<span class="hljs-number">474672</span>,<span class="hljs-number">642737</span>,<span class="hljs-number">589049</span>,<span class="hljs-number">658096</span>,<span class="hljs-number">830858</span>,<span class="hljs-number">830888</span>,<span class="hljs-number">422586</span>,<span class="hljs-number">405467</span>,<span class="hljs-number">895020</span>,<span class="hljs-number">448390</span>,<span class="hljs-number">72397</span>,<span class="hljs-number">326306</span>,<span class="hljs-number">534204</span>,<span class="hljs-number">994323</span>,<span class="hljs-number">760431</span>,<span class="hljs-number">824255</span>,<span class="hljs-number">682040</span>,<span class="hljs-number">166579</span>,<span class="hljs-number">456033</span>,<span class="hljs-number">182836,20096</span>,<span class="hljs-number">408134,233611</span>,<span class="hljs-number">628424</span>,<span class="hljs-number">949124</span>,<span class="hljs-number">974349</span>,<span class="hljs-number">803003</span>,<span class="hljs-number">219266</span>,<span class="hljs-number">960769</span>,<span class="hljs-number">617752</span>,<span class="hljs-number">38400</span>,<span class="hljs-number">400669</span>,<span class="hljs-number">852688</span>,<span class="hljs-number">218819</span>,<span class="hljs-number">771767</span>,<span class="hljs-number">454988</span>,<span class="hljs-number">991400</span>,<span class="hljs-number">953161</span>,<span class="hljs-number">601677</span>,<span class="hljs-number">522764</span>,<span class="hljs-number">548917</span>,<span class="hljs-number">184345</span>,<span class="hljs-number">946714</span>,<span class="hljs-number">544494</span>,<span class="hljs-number">173142,152139</span>,<span class="hljs-number">299637</span>,<span class="hljs-number">587182,752247</span>,<span class="hljs-number">922146,7874</span>,<span class="hljs-number">516714</span>,<span class="hljs-number">137544</span>,<span class="hljs-number">576829</span>,<span class="hljs-number">170858</span>,<span class="hljs-number">959892</span>,<span class="hljs-number">142605</span>,<span class="hljs-number">335351</span>,<span class="hljs-number">812694</span>,<span class="hljs-number">829675</span>,<span class="hljs-number">347968</span>,<span class="hljs-number">756170</span>,<span class="hljs-number">500064</span>,<span class="hljs-number">838339</span>,<span class="hljs-number">552778</span>,<span class="hljs-number">655769</span>,<span class="hljs-number">974321</span>,<span class="hljs-number">770053</span>,<span class="hljs-number">409285</span>,<span class="hljs-number">424835</span>,<span class="hljs-number">158410</span>,<span class="hljs-number">916945</span>,<span class="hljs-number">764047</span>,<span class="hljs-number">897660</span>,<span class="hljs-number">905450</span>,<span class="hljs-number">278577</span>,<span class="hljs-number">607137,223197</span>,<span class="hljs-number">141772</span>,<span class="hljs-number">729719</span>,<span class="hljs-number">969119</span>,<span class="hljs-number">766310</span>,<span class="hljs-number">508786</span>,<span class="hljs-number">411302</span>,<span class="hljs-number">346625</span>,<span class="hljs-number">190333,9803</span>,<span class="hljs-number">733169,23938</span>,<span class="hljs-number">674291</span>,<span class="hljs-number">262804</span>,<span class="hljs-number">411565</span>,<span class="hljs-number">933688</span>,<span class="hljs-number">789625</span>,<span class="hljs-number">102342</span>,<span class="hljs-number">789484</span>,<span class="hljs-number">93591</span>,<span class="hljs-number">529385</span>,<span class="hljs-number">118668,95741</span>,<span class="hljs-number">622456</span>,<span class="hljs-number">542768</span>,<span class="hljs-number">490591</span>,<span class="hljs-number">818566</span>,<span class="hljs-number">658289</span>,<span class="hljs-number">569156</span>,<span class="hljs-number">299279</span>,<span class="hljs-number">89926,115430</span>,<span class="hljs-number">366098</span>,<span class="hljs-number">88972</span>,<span class="hljs-number">366721</span>,<span class="hljs-number">467143</span>,<span class="hljs-number">514676</span>,<span class="hljs-number">768373</span>,<span class="hljs-number">340434</span>,<span class="hljs-number">348701</span>,<span class="hljs-number">379556</span>,<span class="hljs-number">720810</span>,<span class="hljs-number">998616</span>,<span class="hljs-number">500239</span>,<span class="hljs-number">751770</span>,<span class="hljs-number">961767</span>,<span class="hljs-number">387360</span>,<span class="hljs-number">228234</span>,<span class="hljs-number">702794</span>,<span class="hljs-number">938884</span>,<span class="hljs-number">795656</span>,<span class="hljs-number">558370</span>,<span class="hljs-number">757675</span>,<span class="hljs-number">655779</span>,<span class="hljs-number">611399</span>,<span class="hljs-number">21940</span>,<span class="hljs-number">520463</span>,<span class="hljs-number">135218</span>,<span class="hljs-number">813714</span>,<span class="hljs-number">292796</span>,<span class="hljs-number">681197,124355</span>,<span class="hljs-number">938025</span>,<span class="hljs-number">258933</span>,<span class="hljs-number">939964</span>,<span class="hljs-number">84458</span>,<span class="hljs-number">649542</span>,<span class="hljs-number">588420</span>,<span class="hljs-number">332204</span>,<span class="hljs-number">679518</span>,<span class="hljs-number">100385</span>,<span class="hljs-number">914282</span>,<span class="hljs-number">34369</span>,<span class="hljs-number">823610</span>,<span class="hljs-number">349299</span>,<span class="hljs-number">842590</span>,<span class="hljs-number">492722</span>,<span class="hljs-number">199824,813208</span>,<span class="hljs-number">829553</span>,<span class="hljs-number">868225,47732</span>,<span class="hljs-number">19858</span>,<span class="hljs-number">640522</span>,<span class="hljs-number">426789</span>,<span class="hljs-number">80472</span>,<span class="hljs-number">886560</span>,<span class="hljs-number">604914</span>,<span class="hljs-number">973310</span>,<span class="hljs-number">328378</span>,<span class="hljs-number">733757</span>,<span class="hljs-number">375246</span>,<span class="hljs-number">503426</span>,<span class="hljs-number">802413</span>,<span class="hljs-number">67283</span>,<span class="hljs-number">302847</span>,<span class="hljs-number">372181</span>,<span class="hljs-number">609333</span>,<span class="hljs-number">316702</span>,<span class="hljs-number">300474</span>,<span class="hljs-number">23712</span>,<span class="hljs-number">993040</span>,<span class="hljs-number">225316</span>,<span class="hljs-number">487568</span>,<span class="hljs-number">335965</span>,<span class="hljs-number">876579</span>,<span class="hljs-number">599948</span>,<span class="hljs-number">326092</span>,<span class="hljs-number">957354</span>,<span class="hljs-number">485737</span>,<span class="hljs-number">207190</span>,<span class="hljs-number">434860</span>,<span class="hljs-number">767128</span>,<span class="hljs-number">547460</span>,<span class="hljs-number">836959</span>,<span class="hljs-number">248344</span>,<span class="hljs-number">268302</span>,<span class="hljs-number">869425</span>,<span class="hljs-number">692754</span>,<span class="hljs-number">74719</span>,<span class="hljs-number">460079</span>,<span class="hljs-number">28580</span>,<span class="hljs-number">599305</span>,<span class="hljs-number">807778</span>,<span class="hljs-number">441976</span>,<span class="hljs-number">278912</span>,<span class="hljs-number">558144,499165</span>,<span class="hljs-number">337287</span>,<span class="hljs-number">780875</span>,<span class="hljs-number">757923</span>,<span class="hljs-number">848360</span>,<span class="hljs-number">862028</span>,<span class="hljs-number">748330</span>,<span class="hljs-number">396456</span>,<span class="hljs-number">759199</span>,<span class="hljs-number">750050</span>,<span class="hljs-number">647043</span>,<span class="hljs-number">408224</span>,<span class="hljs-number">462354</span>,<span class="hljs-number">358875</span>,<span class="hljs-number">639622</span>,<span class="hljs-number">178621</span>,<span class="hljs-number">821413</span>,<span class="hljs-number">815549</span>,<span class="hljs-number">968292</span>,<span class="hljs-number">825319</span>,<span class="hljs-number">860528</span>,<span class="hljs-number">488688</span>,<span class="hljs-number">960740</span>,<span class="hljs-number">139451,840160</span>,<span class="hljs-number">300899</span>,<span class="hljs-number">715985</span>,<span class="hljs-number">638012</span>,<span class="hljs-number">585892</span>,<span class="hljs-number">378434</span>,<span class="hljs-number">365401</span>,<span class="hljs-number">210046,782114</span>,<span class="hljs-number">21634</span>,<span class="hljs-number">431518</span>,<span class="hljs-number">842295</span>,<span class="hljs-number">774385</span>,<span class="hljs-number">446613</span>,<span class="hljs-number">615367</span>,<span class="hljs-number">701773</span>,<span class="hljs-number">817888</span>,<span class="hljs-number">393179,239771</span>,<span class="hljs-number">902782</span>,<span class="hljs-number">225502</span>,<span class="hljs-number">344768</span>,<span class="hljs-number">742372</span>,<span class="hljs-number">879121</span>,<span class="hljs-number">709939</span>,<span class="hljs-number">235049</span>,<span class="hljs-number">504892</span>,<span class="hljs-number">208493</span>,<span class="hljs-number">525930</span>,<span class="hljs-number">661339</span>,<span class="hljs-number">32699</span>,<span class="hljs-number">613745</span>,<span class="hljs-number">87462</span>,<span class="hljs-number">969620</span>,<span class="hljs-number">79155</span>,<span class="hljs-number">639278</span>,<span class="hljs-number">400022</span>,<span class="hljs-number">836865</span>,<span class="hljs-number">400002</span>,<span class="hljs-number">1082</span>,<span class="hljs-number">901309</span>,<span class="hljs-number">522147,158551</span>,<span class="hljs-number">304121</span>,<span class="hljs-number">429808</span>,<span class="hljs-number">627902</span>,<span class="hljs-number">235493,44466</span>,<span class="hljs-number">736541</span>,<span class="hljs-number">401971</span>,<span class="hljs-number">14579</span>,<span class="hljs-number">825774</span>,<span class="hljs-number">130919</span>,<span class="hljs-number">386974</span>,<span class="hljs-number">159506,200132</span>,<span class="hljs-number">714277</span>,<span class="hljs-number">43766,221265</span>,<span class="hljs-number">414289</span>,<span class="hljs-number">817648</span>,<span class="hljs-number">990292</span>,<span class="hljs-number">195853</span>,<span class="hljs-number">410964</span>,<span class="hljs-number">977386</span>,<span class="hljs-number">958879</span>,<span class="hljs-number">267601</span>,<span class="hljs-number">732797</span>,<span class="hljs-number">540274</span>,<span class="hljs-number">55719</span>,<span class="hljs-number">277452</span>,<span class="hljs-number">973104</span>,<span class="hljs-number">332909</span>,<span class="hljs-number">318372</span>,<span class="hljs-number">938821</span>,<span class="hljs-number">653069</span>,<span class="hljs-number">124714</span>,<span class="hljs-number">383792</span>,<span class="hljs-number">485641</span>,<span class="hljs-number">107227,202311</span>,<span class="hljs-number">676326</span>,<span class="hljs-number">220913,120962</span>,<span class="hljs-number">94893</span>,<span class="hljs-number">506750</span>,<span class="hljs-number">291845</span>,<span class="hljs-number">339031</span>,<span class="hljs-number">823384</span>,<span class="hljs-number">442511</span>,<span class="hljs-number">885502</span>,<span class="hljs-number">853427</span>,<span class="hljs-number">83503,405202</span>,<span class="hljs-number">7721</span>,<span class="hljs-number">494838</span>,<span class="hljs-number">341714</span>,<span class="hljs-number">498591</span>,<span class="hljs-number">279969</span>,<span class="hljs-number">734776</span>,<span class="hljs-number">425889</span>,<span class="hljs-number">358056</span>,<span class="hljs-number">543725</span>,<span class="hljs-number">603788</span>,<span class="hljs-number">466765</span>,<span class="hljs-number">53525</span>,<span class="hljs-number">275931</span>,<span class="hljs-number">777023</span>,<span class="hljs-number">887093</span>,<span class="hljs-number">569767</span>,<span class="hljs-number">492892</span>,<span class="hljs-number">638549</span>,<span class="hljs-number">309807</span>,<span class="hljs-number">864796</span>,<span class="hljs-number">517424</span>,<span class="hljs-number">745352</span>,<span class="hljs-number">371875</span>,<span class="hljs-number">384108</span>,<span class="hljs-number">886378</span>,<span class="hljs-number">763284</span>,<span class="hljs-number">112261,77334</span>,<span class="hljs-number">353345</span>,<span class="hljs-number">73648</span>,<span class="hljs-number">268003</span>,<span class="hljs-number">528277</span>,<span class="hljs-number">536833</span>,<span class="hljs-number">502893</span>,<span class="hljs-number">721750</span>,<span class="hljs-number">278716</span>,<span class="hljs-number">506147,69028</span>,<span class="hljs-number">453572</span>,<span class="hljs-number">788613</span>,<span class="hljs-number">388026</span>,<span class="hljs-number">573767</span>,<span class="hljs-number">263308</span>,<span class="hljs-number">839284</span>,<span class="hljs-number">58211</span>,<span class="hljs-number">856684</span>,<span class="hljs-number">245646,162300</span>,<span class="hljs-number">343604</span>,<span class="hljs-number">782200</span>,<span class="hljs-number">611547</span>,<span class="hljs-number">757262</span>,<span class="hljs-number">325120</span>,<span class="hljs-number">425614</span>,<span class="hljs-number">408558</span>,<span class="hljs-number">991186,914154</span>,<span class="hljs-number">483506</span>,<span class="hljs-number">97089</span>,<span class="hljs-number">481775</span>,<span class="hljs-number">923355</span>,<span class="hljs-number">276954</span>,<span class="hljs-number">851239,85088</span>,<span class="hljs-number">538443</span>,<span class="hljs-number">503136</span>,<span class="hljs-number">453350</span>,<span class="hljs-number">594942</span>,<span class="hljs-number">415515</span>,<span class="hljs-number">418141,97260</span>,<span class="hljs-number">326786</span>,<span class="hljs-number">839124,420208</span>,<span class="hljs-number">755955</span>,<span class="hljs-number">102164,246899</span>,<span class="hljs-number">215873,16945</span>,<span class="hljs-number">773932</span>,<span class="hljs-number">711558</span>,<span class="hljs-number">356253</span>,<span class="hljs-number">393258</span>,<span class="hljs-number">534114,590227</span>,<span class="hljs-number">646500</span>,<span class="hljs-number">871223</span>,<span class="hljs-number">409977</span>,<span class="hljs-number">504313</span>,<span class="hljs-number">212772</span>,<span class="hljs-number">387096</span>,<span class="hljs-number">981921</span>,<span class="hljs-number">802771</span>,<span class="hljs-number">952464</span>,<span class="hljs-number">62725</span>,<span class="hljs-number">736839</span>,<span class="hljs-number">704237,121794</span>,<span class="hljs-number">974158</span>,<span class="hljs-number">308820</span>,<span class="hljs-number">963871</span>,<span class="hljs-number">188247</span>,<span class="hljs-number">532960</span>,<span class="hljs-number">524685</span>,<span class="hljs-number">668645</span>,<span class="hljs-number">433792</span>,<span class="hljs-number">826010</span>,<span class="hljs-number">245600</span>,<span class="hljs-number">638375</span>,<span class="hljs-number">211060,102338</span>,<span class="hljs-number">386566</span>,<span class="hljs-number">116648,934248</span>,<span class="hljs-number">188395</span>,<span class="hljs-number">439294</span>,<span class="hljs-number">568117,248482</span>,<span class="hljs-number">350668</span>,<span class="hljs-number">452233</span>,<span class="hljs-number">365610</span>,<span class="hljs-number">145126</span>,<span class="hljs-number">532589</span>,<span class="hljs-number">997126,170592</span>,<span class="hljs-number">701231,781210</span>,<span class="hljs-number">703912</span>,<span class="hljs-number">789952</span>,<span class="hljs-number">475314</span>,<span class="hljs-number">853001</span>,<span class="hljs-number">797322</span>,<span class="hljs-number">546244</span>,<span class="hljs-number">949052</span>,<span class="hljs-number">537927</span>,<span class="hljs-number">139042,9955</span>,<span class="hljs-number">323568</span>,<span class="hljs-number">302201</span>,<span class="hljs-number">458948</span>,<span class="hljs-number">411444</span>,<span class="hljs-number">540761</span>,<span class="hljs-number">692584</span>,<span class="hljs-number">136009</span>,<span class="hljs-number">610095</span>,<span class="hljs-number">443761</span>,<span class="hljs-number">688261</span>,<span class="hljs-number">4483</span>,<span class="hljs-number">555278</span>,<span class="hljs-number">594477</span>,<span class="hljs-number">335885</span>,<span class="hljs-number">430021</span>,<span class="hljs-number">14370</span>,<span class="hljs-number">445618</span>,<span class="hljs-number">487976</span>,<span class="hljs-number">336215</span>,<span class="hljs-number">556545</span>,<span class="hljs-number">948949</span>,<span class="hljs-number">607668</span>,<span class="hljs-number">178240,692103</span>,<span class="hljs-number">72131</span>,<span class="hljs-number">810027</span>,<span class="hljs-number">641793</span>,<span class="hljs-number">597120</span>,<span class="hljs-number">881598</span>,<span class="hljs-number">274182</span>,<span class="hljs-number">827462</span>,<span class="hljs-number">476676</span>,<span class="hljs-number">671513</span>,<span class="hljs-number">806808</span>,<span class="hljs-number">84511</span>,<span class="hljs-number">746600</span>,<span class="hljs-number">881443</span>,<span class="hljs-number">612701</span>,<span class="hljs-number">960743</span>,<span class="hljs-number">88992,585116</span>,<span class="hljs-number">444615</span>,<span class="hljs-number">902621</span>,<span class="hljs-number">686968</span>,<span class="hljs-number">614713</span>,<span class="hljs-number">346615</span>,<span class="hljs-number">114119</span>,<span class="hljs-number">841380</span>,<span class="hljs-number">898122</span>,<span class="hljs-number">856540</span>,<span class="hljs-number">550162</span>,<span class="hljs-number">350828</span>,<span class="hljs-number">523021</span>,<span class="hljs-number">786645</span>,<span class="hljs-number">649779</span>,<span class="hljs-number">728343</span>,<span class="hljs-number">194849,571190</span>,<span class="hljs-number">332378</span>,<span class="hljs-number">367394</span>,<span class="hljs-number">13143,258144</span>,<span class="hljs-number">978583</span>,<span class="hljs-number">446007</span>,<span class="hljs-number">834702</span>,<span class="hljs-number">539138</span>,<span class="hljs-number">764971</span>,<span class="hljs-number">643142</span>,<span class="hljs-number">838262</span>,<span class="hljs-number">21579</span>,<span class="hljs-number">484070</span>,<span class="hljs-number">146331,702118</span>,<span class="hljs-number">869967</span>,<span class="hljs-number">385885</span>,<span class="hljs-number">546446</span>,<span class="hljs-number">726708</span>,<span class="hljs-number">997962</span>,<span class="hljs-number">600342</span>,<span class="hljs-number">454934</span>,<span class="hljs-number">75150</span>,<span class="hljs-number">683502</span>,<span class="hljs-number">921019</span>,<span class="hljs-number">914954</span>,<span class="hljs-number">172164</span>,<span class="hljs-number">474056</span>,<span class="hljs-number">372082</span>,<span class="hljs-number">191963,421167</span>,<span class="hljs-number">177708</span>,<span class="hljs-number">816520</span>,<span class="hljs-number">325813</span>,<span class="hljs-number">957432</span>,<span class="hljs-number">211448,182005</span>,<span class="hljs-number">911316</span>,<span class="hljs-number">180905</span>,<span class="hljs-number">560332</span>,<span class="hljs-number">811871</span>,<span class="hljs-number">286923</span>,<span class="hljs-number">640612</span>,<span class="hljs-number">982891</span>,<span class="hljs-number">273979</span>,<span class="hljs-number">269397</span>,<span class="hljs-number">373820</span>,<span class="hljs-number">70292,252064</span>,<span class="hljs-number">917218</span>,<span class="hljs-number">678557</span>,<span class="hljs-number">114038</span>,<span class="hljs-number">282969</span>,<span class="hljs-number">62803</span>,<span class="hljs-number">723336</span>,<span class="hljs-number">84560,319149</span>,<span class="hljs-number">596114</span>,<span class="hljs-number">503048</span>,<span class="hljs-number">169304</span>,<span class="hljs-number">818986</span>,<span class="hljs-number">729291</span>,<span class="hljs-number">439334</span>,<span class="hljs-number">541669</span>,<span class="hljs-number">483151</span>,<span class="hljs-number">457896</span>,<span class="hljs-number">900678</span>,<span class="hljs-number">167616</span>,<span class="hljs-number">963773</span>,<span class="hljs-number">188151,131917</span>,<span class="hljs-number">162339,27996</span>,<span class="hljs-number">939212</span>,<span class="hljs-number">906560</span>,<span class="hljs-number">813717</span>,<span class="hljs-number">406199,149780</span>,<span class="hljs-number">305484</span>,<span class="hljs-number">903753</span>,<span class="hljs-number">239375</span>,<span class="hljs-number">563428</span>,<span class="hljs-number">136292</span>,<span class="hljs-number">639358</span>,<span class="hljs-number">464990</span>,<span class="hljs-number">108451</span>,<span class="hljs-number">715816</span>,<span class="hljs-number">666367</span>,<span class="hljs-number">814610</span>,<span class="hljs-number">946236</span>,<span class="hljs-number">883588</span>,<span class="hljs-number">733864</span>,<span class="hljs-number">485421</span>,<span class="hljs-number">910943</span>,<span class="hljs-number">328816</span>,<span class="hljs-number">821809</span>,<span class="hljs-number">644893</span>,<span class="hljs-number">817467</span>,<span class="hljs-number">796246</span>,<span class="hljs-number">707763</span>,<span class="hljs-number">322017</span>,<span class="hljs-number">120479</span>,<span class="hljs-number">700098</span>,<span class="hljs-number">932913</span>,<span class="hljs-number">672081</span>,<span class="hljs-number">717850</span>,<span class="hljs-number">468130</span>,<span class="hljs-number">842473</span>,<span class="hljs-number">948808</span>,<span class="hljs-number">440264</span>,<span class="hljs-number">51450</span>,<span class="hljs-number">269685</span>,<span class="hljs-number">170580</span>,<span class="hljs-number">495655</span>,<span class="hljs-number">110574,79911</span>,<span class="hljs-number">542538</span>,<span class="hljs-number">595553</span>,<span class="hljs-number">142518,101195</span>,<span class="hljs-number">388625</span>,<span class="hljs-number">612920</span>,<span class="hljs-number">298826</span>,<span class="hljs-number">954895</span>,<span class="hljs-number">96976</span>,<span class="hljs-number">649951</span>,<span class="hljs-number">592359</span>,<span class="hljs-number">330134</span>,<span class="hljs-number">431383</span>,<span class="hljs-number">310366</span>,<span class="hljs-number">85123</span>,<span class="hljs-number">737777</span>,<span class="hljs-number">976381</span>,<span class="hljs-number">884845</span>,<span class="hljs-number">511016</span>,<span class="hljs-number">257201</span>,<span class="hljs-number">305417</span>,<span class="hljs-number">939081</span>,<span class="hljs-number">965641</span>,<span class="hljs-number">773207</span>,<span class="hljs-number">943968</span>,<span class="hljs-number">809740</span>,<span class="hljs-number">463768</span>,<span class="hljs-number">116118</span>,<span class="hljs-number">655989</span>,<span class="hljs-number">115893</span>,<span class="hljs-number">788588</span>,<span class="hljs-number">918231</span>,<span class="hljs-number">890839</span>,<span class="hljs-number">538863</span>,<span class="hljs-number">101980,569229</span>,<span class="hljs-number">146018,216845</span>,<span class="hljs-number">118433,162547</span>,<span class="hljs-number">647884</span>,<span class="hljs-number">574259</span>,<span class="hljs-number">820983</span>,<span class="hljs-number">465636</span>,<span class="hljs-number">821568</span>,<span class="hljs-number">59412</span>,<span class="hljs-number">461758</span>,<span class="hljs-number">758993</span>,<span class="hljs-number">548799</span>,<span class="hljs-number">124604</span>,<span class="hljs-number">887367</span>,<span class="hljs-number">73540</span>,<span class="hljs-number">294921</span>,<span class="hljs-number">385611</span>,<span class="hljs-number">237643</span>,<span class="hljs-number">266789</span>,<span class="hljs-number">38119,65383</span>,<span class="hljs-number">476282</span>,<span class="hljs-number">91463</span>,<span class="hljs-number">914387</span>,<span class="hljs-number">642746</span>,<span class="hljs-number">167051,210762</span>,<span class="hljs-number">25007,95217</span>,<span class="hljs-number">313820</span>,<span class="hljs-number">426980</span>,<span class="hljs-number">852153,158663</span>,<span class="hljs-number">68524</span>,<span class="hljs-number">635516</span>,<span class="hljs-number">640372</span>,<span class="hljs-number">69140</span>,<span class="hljs-number">556010</span>,<span class="hljs-number">425614</span>,<span class="hljs-number">19737,244557</span>,<span class="hljs-number">91895</span>,<span class="hljs-number">935288</span>,<span class="hljs-number">405372</span>,<span class="hljs-number">725397</span>,<span class="hljs-number">717482</span>,<span class="hljs-number">802799</span>,<span class="hljs-number">627419</span>,<span class="hljs-number">584433</span>,<span class="hljs-number">208948</span>,<span class="hljs-number">800291</span>,<span class="hljs-number">176846</span>,<span class="hljs-number">465984</span>,<span class="hljs-number">6927</span>,<span class="hljs-number">418985</span>,<span class="hljs-number">437159</span>,<span class="hljs-number">295786</span>,<span class="hljs-number">583612</span>,<span class="hljs-number">994804</span>,<span class="hljs-number">670769</span>,<span class="hljs-number">588409</span>,<span class="hljs-number">191089,59045</span>,<span class="hljs-number">306471</span>,<span class="hljs-number">738189,191002</span>,<span class="hljs-number">160987</span>,<span class="hljs-number">988888</span>,<span class="hljs-number">471522</span>,<span class="hljs-number">110974,985230</span>,<span class="hljs-number">505630</span>,<span class="hljs-number">579552</span>,<span class="hljs-number">96269</span>,<span class="hljs-number">644920</span>,<span class="hljs-number">638346</span>,<span class="hljs-number">70318</span>,<span class="hljs-number">526487</span>,<span class="hljs-number">350842</span>,<span class="hljs-number">637981</span>,<span class="hljs-number">683975</span>,<span class="hljs-number">47394</span>,<span class="hljs-number">982510</span>,<span class="hljs-number">422089</span>,<span class="hljs-number">837330</span>,<span class="hljs-number">420665</span>,<span class="hljs-number">490341</span>,<span class="hljs-number">756551</span>,<span class="hljs-number">604239</span>,<span class="hljs-number">888795</span>,<span class="hljs-number">529168,165656</span>,<span class="hljs-number">798275</span>,<span class="hljs-number">166980</span>,<span class="hljs-number">742306</span>,<span class="hljs-number">978607</span>,<span class="hljs-number">461446</span>,<span class="hljs-number">923121</span>,<span class="hljs-number">846362</span>,<span class="hljs-number">282423</span>,<span class="hljs-number">789836</span>,<span class="hljs-number">334467</span>,<span class="hljs-number">427937</span>,<span class="hljs-number">734826</span>,<span class="hljs-number">544249</span>,<span class="hljs-number">262708</span>,<span class="hljs-number">909832</span>,<span class="hljs-number">517903</span>,<span class="hljs-number">368261</span>,<span class="hljs-number">287994</span>,<span class="hljs-number">77680</span>,<span class="hljs-number">545911</span>,<span class="hljs-number">371297</span>,<span class="hljs-number">483976</span>,<span class="hljs-number">407920</span>,<span class="hljs-number">36886</span>,<span class="hljs-number">466334</span>,<span class="hljs-number">697307</span>,<span class="hljs-number">318637</span>,<span class="hljs-number">593659</span>,<span class="hljs-number">977179,54461</span>,<span class="hljs-number">457263</span>,<span class="hljs-number">287652</span>,<span class="hljs-number">441938</span>,<span class="hljs-number">659643</span>,<span class="hljs-number">160968,156089</span>,<span class="hljs-number">355639</span>,<span class="hljs-number">496394</span>,<span class="hljs-number">215737</span>,<span class="hljs-number">882573</span>,<span class="hljs-number">267390</span>,<span class="hljs-number">310547</span>,<span class="hljs-number">317914</span>,<span class="hljs-number">921132</span>,<span class="hljs-number">863453</span>,<span class="hljs-number">656893</span>,<span class="hljs-number">858302</span>,<span class="hljs-number">337110</span>,<span class="hljs-number">497815</span>,<span class="hljs-number">228937</span>,<span class="hljs-number">692806</span>,<span class="hljs-number">803529</span>,<span class="hljs-number">876663</span>,<span class="hljs-number">599079</span>,<span class="hljs-number">848408</span>,<span class="hljs-number">203886</span>,<span class="hljs-number">850813</span>,<span class="hljs-number">596601</span>,<span class="hljs-number">624895</span>,<span class="hljs-number">643384</span>,<span class="hljs-number">865162</span>,<span class="hljs-number">259609</span>,<span class="hljs-number">159086</span>,<span class="hljs-number">810064</span>,<span class="hljs-number">627510</span>,<span class="hljs-number">815693</span>,<span class="hljs-number">815436</span>,<span class="hljs-number">747613</span>,<span class="hljs-number">559247</span>,<span class="hljs-number">595960</span>,<span class="hljs-number">715048</span>,<span class="hljs-number">900412</span>,<span class="hljs-number">396208</span>,<span class="hljs-number">682582</span>,<span class="hljs-number">103662</span>,<span class="hljs-number">502325</span>,<span class="hljs-number">92550</span>,<span class="hljs-number">801478</span>,<span class="hljs-number">39558</span>,<span class="hljs-number">481483</span>,<span class="hljs-number">39153</span>,<span class="hljs-number">616830</span>,<span class="hljs-number">87473,854107</span>,<span class="hljs-number">666555</span>,<span class="hljs-number">416796</span>,<span class="hljs-number">382442</span>,<span class="hljs-number">756119</span>,<span class="hljs-number">325335</span>,<span class="hljs-number">45674,222481</span>,<span class="hljs-number">66464</span>,<span class="hljs-number">770722</span>,<span class="hljs-number">95059,255526</span>,<span class="hljs-number">170038,154410</span>,<span class="hljs-number">587186</span>,<span class="hljs-number">323979</span>,<span class="hljs-number">990960</span>,<span class="hljs-number">938789</span>,<span class="hljs-number">719761</span>,<span class="hljs-number">747441</span>,<span class="hljs-number">517925</span>,<span class="hljs-number">787198,148360</span>,<span class="hljs-number">170062,157236</span>,<span class="hljs-number">778282</span>,<span class="hljs-number">808772</span>,<span class="hljs-number">446618</span>,<span class="hljs-number">413123</span>,<span class="hljs-number">331942</span>,<span class="hljs-number">803917</span>,<span class="hljs-number">583478</span>,<span class="hljs-number">11757,148562</span>,<span class="hljs-number">667222,193973</span>,<span class="hljs-number">772529</span>,<span class="hljs-number">858403</span>,<span class="hljs-number">770962</span>,<span class="hljs-number">134637,204967</span>,<span class="hljs-number">190967</span>,<span class="hljs-number">930856</span>,<span class="hljs-number">786568</span>,<span class="hljs-number">769149</span>,<span class="hljs-number">677766</span>,<span class="hljs-number">266933</span>,<span class="hljs-number">571789</span>,<span class="hljs-number">236453</span>,<span class="hljs-number">351468</span>,<span class="hljs-number">213504</span>,<span class="hljs-number">803284</span>,<span class="hljs-number">365470</span>,<span class="hljs-number">247537</span>,<span class="hljs-number">551334</span>,<span class="hljs-number">725513</span>,<span class="hljs-number">573273</span>,<span class="hljs-number">544334</span>,<span class="hljs-number">852824</span>,<span class="hljs-number">426046</span>,<span class="hljs-number">552360</span>,<span class="hljs-number">130462</span>,<span class="hljs-number">841667</span>,<span class="hljs-number">582601</span>,<span class="hljs-number">700233,906249</span>,<span class="hljs-number">929252,152772</span>,<span class="hljs-number">995953</span>,<span class="hljs-number">979986</span>,<span class="hljs-number">238889,326224</span>,<span class="hljs-number">342239</span>,<span class="hljs-number">374962</span>,<span class="hljs-number">115224</span>,<span class="hljs-number">804671</span>,<span class="hljs-number">649080</span>,<span class="hljs-number">644116</span>,<span class="hljs-number">405040</span>,<span class="hljs-number">569021</span>,<span class="hljs-number">599009</span>,<span class="hljs-number">882340</span>,<span class="hljs-number">789652</span>,<span class="hljs-number">392734</span>,<span class="hljs-number">328450</span>,<span class="hljs-number">639773</span>,<span class="hljs-number">222086,65237</span>,<span class="hljs-number">814555</span>,<span class="hljs-number">162530</span>,<span class="hljs-number">744442</span>,<span class="hljs-number">897212</span>,<span class="hljs-number">939559</span>,<span class="hljs-number">309541</span>,<span class="hljs-number">613328</span>,<span class="hljs-number">396916</span>,<span class="hljs-number">606483</span>,<span class="hljs-number">835662</span>,<span class="hljs-number">900249</span>,<span class="hljs-number">911050</span>,<span class="hljs-number">842113</span>,<span class="hljs-number">862268</span>,<span class="hljs-number">780996</span>,<span class="hljs-number">995972</span>,<span class="hljs-number">496929</span>,<span class="hljs-number">88221,516246</span>,<span class="hljs-number">619711</span>,<span class="hljs-number">314996</span>,<span class="hljs-number">725500</span>,<span class="hljs-number">754071</span>,<span class="hljs-number">367112,249277</span>,<span class="hljs-number">967438</span>,<span class="hljs-number">264036</span>,<span class="hljs-number">72791</span>,<span class="hljs-number">288600</span>,<span class="hljs-number">569123,88540</span>,<span class="hljs-number">742326</span>,<span class="hljs-number">111759,250038</span>,<span class="hljs-number">590565</span>,<span class="hljs-number">479965</span>,<span class="hljs-number">787016</span>,<span class="hljs-number">146444</span>,<span class="hljs-number">636497</span>,<span class="hljs-number">245910</span>,<span class="hljs-number">346583</span>,<span class="hljs-number">587116,112567</span>,<span class="hljs-number">957318</span>,<span class="hljs-number">830622</span>,<span class="hljs-number">35170</span>,<span class="hljs-number">676661</span>,<span class="hljs-number">72749</span>,<span class="hljs-number">669044</span>,<span class="hljs-number">858807</span>,<span class="hljs-number">99569,42907</span>,<span class="hljs-number">170294</span>,<span class="hljs-number">797814</span>,<span class="hljs-number">794128</span>,<span class="hljs-number">728067</span>,<span class="hljs-number">682993</span>,<span class="hljs-number">389828</span>,<span class="hljs-number">993468</span>,<span class="hljs-number">297354</span>,<span class="hljs-number">256432</span>,<span class="hljs-number">991000</span>,<span class="hljs-number">153739</span>,<span class="hljs-number">920084</span>,<span class="hljs-number">119499,6007</span>,<span class="hljs-number">227425</span>,<span class="hljs-number">864892</span>,<span class="hljs-number">725237</span>,<span class="hljs-number">769890</span>,<span class="hljs-number">842754</span>,<span class="hljs-number">155999</span>,<span class="hljs-number">271529</span>,<span class="hljs-number">673598</span>,<span class="hljs-number">238038</span>,<span class="hljs-number">499056</span>,<span class="hljs-number">302316</span>,<span class="hljs-number">285765</span>,<span class="hljs-number">295304</span>,<span class="hljs-number">892807</span>,<span class="hljs-number">891457</span>,<span class="hljs-number">789214</span>,<span class="hljs-number">490291</span>,<span class="hljs-number">492908</span>,<span class="hljs-number">34846,653224</span>,<span class="hljs-number">598122</span>,<span class="hljs-number">729723</span>,<span class="hljs-number">956436</span>,<span class="hljs-number">639495</span>,<span class="hljs-number">591013</span>,<span class="hljs-number">187869,210159</span>,<span class="hljs-number">139755</span>,<span class="hljs-number">885491</span>,<span class="hljs-number">634215,234470</span>,<span class="hljs-number">732707</span>,<span class="hljs-number">24154,608226</span>,<span class="hljs-number">547460</span>,<span class="hljs-number">481404</span>,<span class="hljs-number">457012</span>,<span class="hljs-number">278613</span>,<span class="hljs-number">353345</span>,<span class="hljs-number">976114,965206</span>,<span class="hljs-number">452435</span>,<span class="hljs-number">833972</span>,<span class="hljs-number">659095</span>,<span class="hljs-number">715782</span>,<span class="hljs-number">238793</span>,<span class="hljs-number">506488</span>,<span class="hljs-number">903661</span>,<span class="hljs-number">672156</span>,<span class="hljs-number">741740</span>,<span class="hljs-number">228148</span>,<span class="hljs-number">661439</span>,<span class="hljs-number">759483</span>,<span class="hljs-number">636433</span>,<span class="hljs-number">965678</span>,<span class="hljs-number">437407</span>,<span class="hljs-number">158071,764205</span>,<span class="hljs-number">670458</span>,<span class="hljs-number">46547</span>,<span class="hljs-number">650799</span>,<span class="hljs-number">168982</span>,<span class="hljs-number">646530</span>,<span class="hljs-number">260164,177800</span>,<span class="hljs-number">98006</span>,<span class="hljs-number">701591</span>,<span class="hljs-number">609167,86284</span>,<span class="hljs-number">801120</span>,<span class="hljs-number">570982</span>,<span class="hljs-number">494511</span>,<span class="hljs-number">341384</span>,<span class="hljs-number">746522</span>,<span class="hljs-number">513011</span>,<span class="hljs-number">450983</span>,<span class="hljs-number">917848</span>,<span class="hljs-number">352586</span>,<span class="hljs-number">458711</span>,<span class="hljs-number">259069</span>,<span class="hljs-number">55534</span>,<span class="hljs-number">814829</span>,<span class="hljs-number">870060</span>,<span class="hljs-number">881544</span>]<br>&#x27; +<br>  &#x27;<span class="hljs-number">25000000</span><br></code></pre></div></td></tr></table></figure><p>最后一个超级长的案例过不去…(绝)<br>使用二分查找.</p><h3 id="使用二分查找的go实现"><a href="#使用二分查找的go实现" class="headerlink" title="使用二分查找的go实现"></a>使用二分查找的go实现</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">smallestDistancePair</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>, k <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>sort.Ints(nums)<br>l,r := <span class="hljs-number">0</span>, nums[<span class="hljs-built_in">len</span>(nums)<span class="hljs-number">-1</span>] - nums[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">var</span> count_ngt <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(mid <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span> <br>count_ngt = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(mid <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span> &#123;<br>slow, ans := <span class="hljs-number">0</span>,<span class="hljs-number">0</span> <br><span class="hljs-keyword">for</span> fast:=<span class="hljs-number">0</span>; fast &lt; <span class="hljs-built_in">len</span>(nums); fast++ &#123;<br>fmt.Println(slow, fast,mid)<br><span class="hljs-keyword">for</span> nums[fast] - nums[slow] &gt; mid &#123;<br>slow += <span class="hljs-number">1</span><br>&#125;<br>ans += fast - slow<br>&#125;<br>fmt.Println(ans)<br><span class="hljs-keyword">return</span> ans<br>&#125;<br><span class="hljs-keyword">for</span> l &lt;= r&#123;<br>midNum := (l+r)/<span class="hljs-number">2</span><br>fmt.Println(l,r)<br><span class="hljs-keyword">if</span> count_ngt(midNum) &gt;= k &#123;<br>r = midNum - <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>l = midNum + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> l<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="使用二分查找的python实现"><a href="#使用二分查找的python实现" class="headerlink" title="使用二分查找的python实现"></a>使用二分查找的python实现</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">smallestDistancePair</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        nums.sort()<br>        l,r = <span class="hljs-number">0</span>, nums[-<span class="hljs-number">1</span>]-nums[<span class="hljs-number">0</span>]<br><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count_ngt</span>(<span class="hljs-params">mid</span>):</span><br>            slow = <span class="hljs-number">0</span><br>            ans = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> fast <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>                <span class="hljs-built_in">print</span>(slow,fast)<br>                <span class="hljs-keyword">while</span> nums[fast] - nums[slow] &gt; mid :<br>                    slow += <span class="hljs-number">1</span><br>                ans += fast - slow<br>            <span class="hljs-built_in">print</span>(ans)<br>            <span class="hljs-keyword">return</span> ans<br>        <br>        <span class="hljs-keyword">while</span> l &lt;= r:<br>            mid = (l+r) // <span class="hljs-number">2</span><br>            <span class="hljs-built_in">print</span>(l,r)<br>            <span class="hljs-keyword">if</span> count_ngt(mid) &gt;= k:<br>                r = mid - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                l = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> l <br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>堆</tag>
      
      <tag>二分查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0632.最小区间</title>
    <link href="/lc-0632-%E6%9C%80%E5%B0%8F%E5%8C%BA%E9%97%B4"/>
    <url>/lc-0632-%E6%9C%80%E5%B0%8F%E5%8C%BA%E9%97%B4</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>你有 k 个 非递减排列 的整数列表。找到一个 最小 区间，使得 k 个列表中的每个列表至少有一个数包含在其中。</p><p>我们定义如果 b-a &lt; d-c 或者在 b-a == d-c 时 a &lt; c，则区间 [a,b] 比 [c,d] 小。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[<span class="hljs-comment">[4,10,15,24,26]</span>, <span class="hljs-comment">[0,9,12,20]</span>, <span class="hljs-comment">[5,18,22,30]</span>]</span><br>输出：<span class="hljs-comment">[20,24]</span><br>解释： <br>列表 1：<span class="hljs-comment">[4, 10, 15, 24, 26]</span>，24 在区间 <span class="hljs-comment">[20,24]</span> 中。<br>列表 2：<span class="hljs-comment">[0, 9, 12, 20]</span>，20 在区间 <span class="hljs-comment">[20,24]</span> 中。<br>列表 3：<span class="hljs-comment">[5, 18, 22, 30]</span>，22 在区间 <span class="hljs-comment">[20,24]</span> 中。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[<span class="hljs-comment">[1,2,3]</span>,<span class="hljs-comment">[1,2,3]</span>,<span class="hljs-comment">[1,2,3]</span>]</span><br>输出：<span class="hljs-comment">[1,1]</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">输入：nums = <span class="hljs-string">[[10,10],[11,11]]</span><br>输出：[<span class="hljs-number">10</span>,<span class="hljs-number">11</span>]<br></code></pre></div></td></tr></table></figure><p>eg4:</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">输入：nums = <span class="hljs-string">[[10],[11]]</span><br>输出：[<span class="hljs-number">10</span>,<span class="hljs-number">11</span>]<br></code></pre></div></td></tr></table></figure><p>eg5:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[<span class="hljs-comment">[1]</span>,<span class="hljs-comment">[2]</span>,<span class="hljs-comment">[3]</span>,<span class="hljs-comment">[4]</span>,<span class="hljs-comment">[5]</span>,<span class="hljs-comment">[6]</span>,<span class="hljs-comment">[7]</span>]</span><br>输出：<span class="hljs-comment">[1,7]</span><br></code></pre></div></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>有 k 个单调递增的整数列表，要找一个<strong>最小的区间</strong>满足题目要求 – 每个列表至少有一个数在这个区间。</p><p>使用多路归并思路 – 对于 k 个一维数组，创建k个指针从k个单调递增的数组的头开始遍历。取得一个包含每个列表一个值的数组（heap），取该区间的最小值和最大值即可组成一个区间满足题目要求。但是这个区间不一定是最小。</p><p>保证最小通过移动小顶堆的堆顶，使得 diff （heap中，最大值-最小值）变小。</p><p>当k个数组中有一个数组走到结尾时，即在整体二维数组中找到满足条件的值，返回即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="小顶堆多路归并的python实现"><a href="#小顶堆多路归并的python实现" class="headerlink" title="小顶堆多路归并的python实现"></a>小顶堆多路归并的python实现</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">smallestRange</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:</span><br>        l,r = -<span class="hljs-number">10</span>**<span class="hljs-number">9</span>, <span class="hljs-number">10</span>**<span class="hljs-number">9</span><br>        h = [(row[<span class="hljs-number">0</span>],i,<span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> i, row <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums)]<br>        heapq.heapify(h)<br><br>        max_v = <span class="hljs-built_in">max</span>(row[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> nums)<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            min_v, row, col = heapq.heappop(h)<br>            <span class="hljs-keyword">if</span> max_v - min_v &lt; r - l:<br>                l,r = min_v, max_v<br>            <span class="hljs-keyword">if</span> col == <span class="hljs-built_in">len</span>(nums[row]) - <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> [l,r]<br>            heapq.heappush(h, (nums[row][col+<span class="hljs-number">1</span>], row, col + <span class="hljs-number">1</span>))<br>            max_v = <span class="hljs-built_in">max</span>(max_v, nums[row][col+<span class="hljs-number">1</span>])<br></code></pre></div></td></tr></table></figure><h2 id="小顶堆多路归并的go实现"><a href="#小顶堆多路归并的go实现" class="headerlink" title="小顶堆多路归并的go实现"></a>小顶堆多路归并的go实现</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">smallestRange</span><span class="hljs-params">(nums [][]<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// num[i][j] 的范围为 -10^5 &lt;= num[i][j] &lt;= 10^5</span><br>l,r := <span class="hljs-keyword">int</span>(-math.Pow(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>)),<span class="hljs-keyword">int</span>(math.Pow(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>))<br>h := &amp;mhs&#123;&#125;<br>heap.Init(h)<br><br>max_v := <span class="hljs-number">0</span><br><span class="hljs-comment">// 入栈 &amp; 找到该数组中的最大值</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">len</span>(nums); i++ &#123;<br>heap.Push(h, minNode&#123;min_v:nums[i][<span class="hljs-number">0</span>], row:i,col:<span class="hljs-number">0</span>&#125;)<br><span class="hljs-keyword">if</span> max_v &lt; nums[i][<span class="hljs-number">0</span>] &#123;<br>max_v = nums[i][<span class="hljs-number">0</span>]<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>hp := heap.Pop(h).(minNode)<br><span class="hljs-keyword">if</span> max_v - hp.min_v &lt; r-l &#123;<br>l,r = hp.min_v, max_v<br>&#125;<br><span class="hljs-keyword">if</span> hp.col == <span class="hljs-built_in">len</span>(nums[hp.row]) <span class="hljs-number">-1</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;l,r&#125;<br>&#125;<br>heap.Push(h, minNode&#123;min_v:nums[hp.row][hp.col+<span class="hljs-number">1</span>],row:hp.row, col:hp.col+<span class="hljs-number">1</span>&#125;)<br><span class="hljs-keyword">if</span> max_v &lt; nums[hp.row][hp.col+<span class="hljs-number">1</span>] &#123;<br>max_v = nums[hp.row][hp.col+<span class="hljs-number">1</span>]<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;l,r&#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> minNode <span class="hljs-keyword">struct</span> &#123;<br>min_v, row, col <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> mhs []minNode<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h mhs)</span> <span class="hljs-title">Len</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(h)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h mhs)</span> <span class="hljs-title">Swap</span><span class="hljs-params">(i,j <span class="hljs-keyword">int</span>)</span></span> &#123;<br>h[i],h[j] = h[j],h[i]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h mhs)</span> <span class="hljs-title">Less</span><span class="hljs-params">(i,j <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> h[i].min_v &lt; h[j].min_v<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *mhs)</span> <span class="hljs-title">Push</span><span class="hljs-params">(v <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>*h = <span class="hljs-built_in">append</span>(*h, v.(minNode))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *mhs)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br>e := (*h)[h.Len() - <span class="hljs-number">1</span>]<br>*h = (*h)[:h.Len() - <span class="hljs-number">1</span>]<br><span class="hljs-keyword">return</span> e<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>堆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0513.找树左下角的值</title>
    <link href="/lc-0513-%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC"/>
    <url>/lc-0513-%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。</p><p>假设二叉树中至少有一个节点。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs makefile"><span class="hljs-section">输入: root = [2,1,3]</span><br><span class="hljs-section">输出: 1</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">输入: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">7</span>]<br>输出: <span class="hljs-number">7</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findBottomLeftValue</span><span class="hljs-params">(root *TreeNode)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 层序遍历， 取最后一层第一个</span><br><span class="hljs-comment">// 队列</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br>queue := []*TreeNode&#123;root&#125;<br>ans := []<span class="hljs-keyword">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span> &#123;<br>l := <span class="hljs-built_in">len</span>(queue)<br><span class="hljs-comment">// golang 清空数组</span><br>ans = ans[:<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i&lt;l; i++&#123;<br><span class="hljs-keyword">if</span> queue[i].Left != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, queue[i].Left)<br>&#125;<br><span class="hljs-keyword">if</span> queue[i].Right != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, queue[i].Right)<br>&#125;<br>ans = <span class="hljs-built_in">append</span>(ans, queue[i].Val)<br>&#125;<br>queue = queue[l:]<br>&#125;<br><span class="hljs-keyword">return</span> ans[<span class="hljs-number">0</span>]<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>层序遍历二叉树，找到最后一层的第一个元素即可。</p><h3 id="golang实现"><a href="#golang实现" class="headerlink" title="golang实现"></a>golang实现</h3><blockquote><p>golang 删除数组中所有元素， <code>ans = ans[:0]</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findBottomLeftValue</span><span class="hljs-params">(root *TreeNode)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 层序遍历， 取最后一层第一个</span><br><span class="hljs-comment">// 队列</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br>queue := []*TreeNode&#123;root&#125;<br>ans := []<span class="hljs-keyword">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span> &#123;<br>l := <span class="hljs-built_in">len</span>(queue)<br><span class="hljs-comment">// golang 清空数组</span><br>ans = ans[:<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i&lt;l; i++&#123;<br><span class="hljs-keyword">if</span> queue[i].Left != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, queue[i].Left)<br>&#125;<br><span class="hljs-keyword">if</span> queue[i].Right != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, queue[i].Right)<br>&#125;<br>ans = <span class="hljs-built_in">append</span>(ans, queue[i].Val)<br>&#125;<br>queue = queue[l:]<br>&#125;<br><span class="hljs-keyword">return</span> ans[<span class="hljs-number">0</span>]<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findBottomLeftValue</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-comment">// 层序遍历</span><br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 阻塞队列 与 非阻塞队列</span><br>        <span class="hljs-comment">// 阻塞队列：如果队列为空或满的情况下，从队列中取值或放值时会阻塞相应操作。</span><br>        <span class="hljs-comment">// 非阻塞队列：对于队列的个数等信息维护有限。</span><br>        <span class="hljs-comment">// ConcurrentLinkedQueue 链表结构，非阻塞队列</span><br>        <span class="hljs-comment">// peek() 获取队列头部元素</span><br>        <span class="hljs-comment">// poll() 移除并返回头部元素</span><br>        <span class="hljs-comment">// add(e) 在队尾添加元素</span><br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();<br>        queue.add(root);<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>            <span class="hljs-keyword">int</span> l = queue.size();<br>            ans = queue.peek().val;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;l; i++)&#123;<br>                TreeNode node = queue.poll();<br>                <span class="hljs-keyword">if</span> (node.left != <span class="hljs-keyword">null</span>)&#123;<br>                    queue.add(node.left);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (node.right != <span class="hljs-keyword">null</span>)&#123;<br>                    queue.add(node.right);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="python3实现"><a href="#python3实现" class="headerlink" title="python3实现"></a>python3实现</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findBottomLeftValue</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        queue = collections.deque([root])<br>        ans = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> queue:<br>            <span class="hljs-comment"># 当前层 需要遍历的节点数</span><br>            size = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size):<br>                ans = node = queue.popleft()<br>                <span class="hljs-keyword">if</span> node.right:<br>                    queue.append(node.right)<br>                <span class="hljs-keyword">if</span> node.left:<br>                    queue.append(node.left)<br>        <span class="hljs-keyword">return</span> ans.val<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0000.xxxx</title>
    <link href="/lc-0000-xxxx"/>
    <url>/lc-0000-xxxx</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p><p>例如，</p><p>[2,3,4] 的中位数是 3</p><p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p><p>设计一个支持以下两种操作的数据结构：</p><ul><li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li><li>double findMedian() - 返回目前所有元素的中位数。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">addNum</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">addNum</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">findMedian</span><span class="hljs-params">()</span></span> -&gt; <span class="hljs-number">1.5</span><br><span class="hljs-function"><span class="hljs-title">addNum</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span> <br><span class="hljs-function"><span class="hljs-title">findMedian</span><span class="hljs-params">()</span></span> -&gt; <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>建立两个堆：<ul><li>大顶堆元素都比小顶堆小，即大顶堆的堆顶元素比小顶堆堆顶元素小。 – 每次add元素时候，小顶堆元素都是从大顶堆出栈的</li><li>大顶堆元素个数不小于小顶堆，且最多比小顶堆多一个元素 – 判断两个堆的size，如果 maxHeap.size() &lt; minHeap.size()，则将小顶堆的一个元素放到大顶堆中。</li></ul></li><li>判断中位数：<ul><li>如果两个堆数量相等（本质总数为偶数），中位数为两个堆顶元素的平均数</li><li>如果两个堆数量不等（本质总数为奇数），中位数为大顶堆的堆顶元素</li></ul></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MedianFinder</span> </span>&#123;<br>    PriorityQueue&lt;Integer&gt; maxHeap;<br>    PriorityQueue&lt;Integer&gt; minHeap;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MedianFinder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.maxHeap = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;((a,b) -&gt; b - a);<br>        <span class="hljs-keyword">this</span>.minHeap = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;((a,b) -&gt; a - b);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-comment">// 保证第一个条件</span><br>        <span class="hljs-keyword">this</span>.maxHeap.add(num);<br>        <span class="hljs-keyword">this</span>.minHeap.add(<span class="hljs-keyword">this</span>.maxHeap.poll());<br>        <span class="hljs-comment">// 保证第二个条件</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.maxHeap.size() &lt; <span class="hljs-keyword">this</span>.minHeap.size())&#123;<br>            <span class="hljs-keyword">this</span>.maxHeap.add(<span class="hljs-keyword">this</span>.minHeap.poll());<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">findMedian</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 比较两个堆的元素个数，判断总数是奇数还是偶数</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.maxHeap.size() == <span class="hljs-keyword">this</span>.minHeap.size())&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.maxHeap.peek() + <span class="hljs-keyword">this</span>.minHeap.peek()) / <span class="hljs-number">2.0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.maxHeap.peek();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MedianFinder <span class="hljs-keyword">struct</span> &#123;<br>    minHeap, maxHeap hp<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">()</span> <span class="hljs-title">MedianFinder</span></span> &#123;<br>    <span class="hljs-keyword">return</span> MedianFinder&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MedianFinder)</span> <span class="hljs-title">AddNum</span><span class="hljs-params">(num <span class="hljs-keyword">int</span>)</span></span>  &#123;<br>    minQ, maxQ := &amp;this.minHeap, &amp;this.maxHeap<br>    <br>    heap.Push(maxQ, num)<br>    heap.Push(minQ, -heap.Pop(maxQ).(<span class="hljs-keyword">int</span>))<br><br>    <span class="hljs-keyword">if</span> maxQ.Len() &lt; minQ.Len() &#123;<br>        heap.Push(maxQ, -heap.Pop(minQ).(<span class="hljs-keyword">int</span>))<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MedianFinder)</span> <span class="hljs-title">FindMedian</span><span class="hljs-params">()</span> <span class="hljs-title">float64</span></span> &#123;<br>    minQ, maxQ := this.minHeap, this.maxHeap<br>    <span class="hljs-keyword">if</span> minQ.Len() &lt; maxQ.Len() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">float64</span>(maxQ.IntSlice[<span class="hljs-number">0</span>])<br>    &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">float64</span>(maxQ.IntSlice[<span class="hljs-number">0</span>] - minQ.IntSlice[<span class="hljs-number">0</span>])/<span class="hljs-number">2</span><br>&#125;<br><br><span class="hljs-keyword">type</span> hp <span class="hljs-keyword">struct</span> &#123;sort.IntSlice&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *hp)</span> <span class="hljs-title">Push</span><span class="hljs-params">(v <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span>&#123;h.IntSlice = <span class="hljs-built_in">append</span>(h.IntSlice, v.(<span class="hljs-keyword">int</span>))&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *hp)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;a := h.IntSlice;v := a[<span class="hljs-built_in">len</span>(a)<span class="hljs-number">-1</span>];h.IntSlice = a[:<span class="hljs-built_in">len</span>(a)<span class="hljs-number">-1</span>];<span class="hljs-keyword">return</span> v&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MedianFinder</span> </span>&#123;<br>    PriorityQueue&lt;Integer&gt; maxHeap;<br>    PriorityQueue&lt;Integer&gt; minHeap;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MedianFinder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 构建最大堆</span><br>        <span class="hljs-keyword">this</span>.maxHeap = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;((a,b) -&gt; b - a);<br>        <span class="hljs-keyword">this</span>.minHeap = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;((a,b) -&gt; a - b);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-comment">// 保证第一个条件</span><br>        <span class="hljs-comment">// minHeap 的元素个数都来自于 maxHeap 的堆顶元素</span><br>        <span class="hljs-keyword">this</span>.maxHeap.add(num);<br>        <span class="hljs-keyword">this</span>.minHeap.add(<span class="hljs-keyword">this</span>.maxHeap.poll());<br><br>        <span class="hljs-comment">// 保证第二个条件。maxHeap元素个数 大于或等于 minHeap 元素个数</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.maxHeap.size() &lt; <span class="hljs-keyword">this</span>.minHeap.size())&#123;<br>            <span class="hljs-keyword">this</span>.maxHeap.add(<span class="hljs-keyword">this</span>.minHeap.poll());<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">findMedian</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 比较两个堆的元素个数，判断总数是奇数还是偶数</span><br>        <span class="hljs-comment">// 如果 maxHeap 的元素个数等于 minHeap 的元素个数，取两个堆顶元素的平均数。</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.maxHeap.size() == <span class="hljs-keyword">this</span>.minHeap.size())&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.maxHeap.peek() + <span class="hljs-keyword">this</span>.minHeap.peek()) / <span class="hljs-number">2.0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.maxHeap.peek();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MedianFinder <span class="hljs-keyword">struct</span> &#123;<br>minHeap, maxHeap hp<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">()</span> <span class="hljs-title">MedianFinder</span></span> &#123;<br><span class="hljs-keyword">return</span> MedianFinder&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MedianFinder)</span> <span class="hljs-title">AddNum</span><span class="hljs-params">(num <span class="hljs-keyword">int</span>)</span></span>  &#123;<br><span class="hljs-comment">// 小顶堆堆顶minQ</span><br><span class="hljs-comment">// 大顶堆堆顶maxQ</span><br>minQ, maxQ := &amp;this.minHeap, &amp;this.maxHeap<br><span class="hljs-comment">// 保证第一个</span><br><span class="hljs-keyword">if</span> minQ.Len() == <span class="hljs-number">0</span> || num &lt;= -minQ.IntSlice[<span class="hljs-number">0</span>] &#123;<br>heap.Push(minQ, -num)<br><span class="hljs-keyword">if</span> maxQ.Len() + <span class="hljs-number">1</span> &lt; minQ.Len() &#123;<br>heap.Push(maxQ, -heap.Pop(minQ).(<span class="hljs-keyword">int</span>))<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>heap.Push(maxQ, num)<br><span class="hljs-keyword">if</span> maxQ.Len() &gt; minQ.Len() &#123;<br>heap.Push(minQ, -heap.Pop(maxQ).(<span class="hljs-keyword">int</span>))<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MedianFinder)</span> <span class="hljs-title">FindMedian</span><span class="hljs-params">()</span> <span class="hljs-title">float64</span></span> &#123;<br>minQ, maxQ := this.minHeap, this.maxHeap<br><span class="hljs-keyword">if</span> minQ.Len() &gt; maxQ.Len() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">float64</span>(-minQ.IntSlice[<span class="hljs-number">0</span>])<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">float64</span>(maxQ.IntSlice[<span class="hljs-number">0</span>] - minQ.IntSlice[<span class="hljs-number">0</span>])/<span class="hljs-number">2</span><br>&#125;<br><br><span class="hljs-keyword">type</span> hp <span class="hljs-keyword">struct</span>&#123;sort.IntSlice&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *hp)</span> <span class="hljs-title">Push</span><span class="hljs-params">(v <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>h.IntSlice = <span class="hljs-built_in">append</span>(h.IntSlice, v.(<span class="hljs-keyword">int</span>))<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *hp)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123; <br>a:=h.IntSlice; <br>v:=a[<span class="hljs-built_in">len</span>(a)<span class="hljs-number">-1</span>]; <br>h.IntSlice = a[:<span class="hljs-built_in">len</span>(a)<span class="hljs-number">-1</span>]; <br><span class="hljs-keyword">return</span> v<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <url>/2022/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="2-3-4-树"><a href="#2-3-4-树" class="headerlink" title="2-3-4 树"></a>2-3-4 树</h2><ol><li>概念</li><li>生成过程</li><li>和红黑树的等价关系</li><li>转换为红黑树</li><li>推导红黑树的规则</li></ol><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>一、旋转操作</p><ol><li><p>左旋</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 示意图</span><br>    p             r<br>   / \           / \<br>  l   r   ==&gt;  p  rr<br>     / \       / \<br>    rl rr     l  rl<br>        <br><span class="hljs-comment">// 分析</span><br><span class="hljs-number">1.</span> p-l 和 r-rr 没有变化<br>   r-rl =&gt; p-rl<br><span class="hljs-number">2.</span> 判断 p 是否存在父节点<br>否：<br>        root=r<br>    有：<br>        r.parent = p.parent<br>        p.parent的左/右子树 = r<br><span class="hljs-number">3.</span> p-r =&gt; r-p<br></code></pre></div></td></tr></table></figure><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">leftRotate</span><span class="hljs-params">(RBNode p)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        RBNode pr = p.right;<br>        <span class="hljs-comment">// 1. pr-rl =&gt; p-pl</span><br>        p.left = pr.left;<br>        pr.left.parent = p;<br>        <span class="hljs-comment">// 2.判断p是否有父节点</span><br>        pr.parent = p.parent;<br>        RBNode pparent = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> ((pparent = p.parent) == <span class="hljs-keyword">null</span>) &#123;<br>            root = pr;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pparent.left == p) &#123;<br>            pparent.left = pr;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pparent.right == p) &#123;<br>            pparent.right = pr;<br>        &#125;<br>        <span class="hljs-comment">// 3. p-pr 为 pr-p</span><br>        pr.left = p;<br>        p.parent = pr;<br>    &#125;<br></code></pre></div></td></tr></table></figure><hr><hr><ol start="2"><li>右旋</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 示意图</span><br>    p          l<br>   / \        / \<br>  l   r  =&gt;  lr  p<br> / \            / \<br>lr ll          ll  r<br>        <br><span class="hljs-comment">// 分析</span><br><span class="hljs-number">1.</span> p-r 和 l-lr 没有变化<br>   l-ll =&gt; p-ll<br><span class="hljs-number">2.</span> 判断 p 是否存在父节点<br>否：<br>        root=l<br>    有：<br>        l.parent = p.parent<br>        p.parent的左/右子树 = l<br><span class="hljs-number">3.</span> p-l =&gt; l-p<br></code></pre></div></td></tr></table></figure><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rightRotate</span><span class="hljs-params">(RBNode p)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        RBNode pl = p.left;<br>        <span class="hljs-comment">// 1. pl-lr =&gt; p-lr</span><br>        p.left = pl.right;<br>        pl.right.parent = p;<br>        <span class="hljs-comment">// 2.判断p是否有父节点</span><br>        pl.parent = p.parent;<br>        RBNode pparent = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> ((pparent = p.parent) == <span class="hljs-keyword">null</span>) &#123;<br>            root = pl;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pparent.left == p) &#123;<br>            pparent.left = pl;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pparent.right == p) &#123;<br>            pparent.right = pl;<br>        &#125;<br>        <span class="hljs-comment">// 3. p-pl =&gt; pl-p</span><br>        pl.right = p;<br>        p.parent = pl;<br>    &#125;<br></code></pre></div></td></tr></table></figure></li></ol><p>二、新增节点</p><ol><li>示例</li><li>代码实现</li></ol><p>三、插入节点</p><ol start="3"><li>删除节点</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/leetcode-%E4%BA%8C%E5%88%86%E4%B8%93%E9%A2%98-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/leetcode-%E4%BA%8C%E5%88%86%E4%B8%93%E9%A2%98-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="二分专题"><a href="#二分专题" class="headerlink" title="二分专题"></a>二分专题</h2><h3 id="二分简介"><a href="#二分简介" class="headerlink" title="二分简介"></a>二分简介</h3><p>二分法 – 在满足一定条件和判断下，可以舍弃一半未知解。缩小求解的范围。<br>二分法的核心在于：<strong>什么条件</strong>和<strong>舍弃哪部分</strong>。（重难点）</p><p>从战术上分，有两种：<strong>最左插入二分</strong>和<strong>最右插入二分</strong>。</p><p>从应用上分，有四种：<strong>能力检测二分</strong>、<strong>前缀二分</strong>、<strong>插入排序二分</strong>和<strong>计数二分</strong>。</p><p>两种类型（最左/最右插入二分）主要解决：<strong>解空间已经明确出来了，如何用代码找出具体的解</strong>。</p><p>四种应用主要解决：<strong>如何构造解空间</strong>。 – 即，如何构建有序序列。</p><blockquote><p>看完后结合<a href="https://leetcode-cn.com/leetbook/read/binary-search">LeetCode Book 二分查找</a>练习一下。</p></blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>必须掌握<strong>解空间</strong>，<strong>序列有序</strong>，<strong>极值</strong>,<strong>折半查找</strong>。</p><h4 id="1-解空间"><a href="#1-解空间" class="headerlink" title="1. 解空间"></a>1. 解空间</h4><p>解空间指的是题目<strong>所有可能的解构成的集合</strong>。</p><p>比如一个题目所有解的可能是 1,2,3,4,5，但具体在某一种情况只能是其中某一个数（即可能是 1，2，3，4，5 中的一个数）。那么这里的解空间就是 1,2,3,4,5 构成的集合。在某一个具体的情况下可能是其中任意一个值，我们的目标就是在某个具体的情况判断其具体是哪个。如果<em>线性枚举所有的可能</em>，就枚举这部分来说时间复杂度就是 <code>O(n)</code>。</p><p>举个例子：</p><p><code>如果让你在一个数组 nums 中查找 target，如果存在则返回对应索引，如果不存在则返回 -1。</code><br>那么对于这道题来说其解空间是什么？很明显解空间是区间 [-1, n-1]，其中 n 为 nums 的长度。</p><p>需要注意：上面题目的解空间是指区间 [-1, n-1]之间的<strong>整数</strong>。– 这是大部分二分的情况。但是如果解空间包含<strong>小数</strong>，会涉及<strong>精度问题</strong>。</p><p>比如让你求一个数 x 的平方根，答案误差在 $10^-6$ 次方都认为正确。这里容易知道其解空间大小可定义为 [1,x]（当然可以定义地更精确，之后我们再讨论这个问题），其中解空间应该包括所有区间的实数，不仅仅是整数而已。这个时候解题思路和代码都没有太大变化，唯二需要变化的是：</p><ol><li><code>更新答案的步长</code>。之前的更新是 l = mid + 1。现在不能直接简单+1，因为正确解可能是区间[mid,mid+1]内的某一个小数。</li><li><code>判断条件需要考虑误差</code>。由于精度问题，判断结束条件需要编程<strong>与答案的误差在某一范围内</strong>。</li></ol><p>要点：</p><ol><li>对于搜索类题目，解空间一定是有限的，不然问题不可解。</li><li>定义解空间的时候的一个原则是： 可以大但不可以小。</li></ol><h4 id="2-序列有序"><a href="#2-序列有序" class="headerlink" title="2. 序列有序"></a>2. 序列有序</h4><p>二分查找中的序列，并不特指数组 or 链表。也可以指其他数据结构 – 比如二叉树、队列等。<br>另外，题目中的“有序”不一定会直接提出，而是隐藏在字里行间。比如题目给了数组nums,并没有说nums有序，但是限定了nums为非负。这样如果给 nums 做<code>前缀和</code>或者<code>前缀或</code>（位运算或），就可以得到一个有序的序列。</p><p>二分法不意味着序列有序，但是大部分二分题目都有<code>有序</code>的特征。只是：</p><ul><li>有的题目直接限定了有序。</li><li>有的题目需要自己构造有序序列。 – 难度不低，需要一定的观察能力。</li></ul><p>举个例子：<a href="https://binarysearch.com/problems/Triple-Inversion">Triple Inversion</a><br>这道题并没有限定数组 nums 是有序的，但是我们可以构造一个有序序列 d，进而在 d 上做二分。具体题解查看</p><h4 id="3-极值"><a href="#3-极值" class="headerlink" title="3. 极值"></a>3. 极值</h4><p>类似于<code>堆专题</code>中提到的极值，不过此处的极值是静态的，不是动态的。二分中的极值通常是指<strong>求第k大（或者第k小）的数</strong>。<br>堆的一种很重要的用法是求第 k 大的数，而二分法也可以求第 k 大的数，只不过二者的思路完全不同。使用堆求第 k 大的思路可以在<code>堆专题</code>中了解。而二分求极值可以通过 <a href="https://binarysearch.com/problems/Kth-Pair-Distance">Kth Pair Distance</a> 例子理解一下。</p><p>简单来说，题目就是给的一个数组 nums，让你求 nums <code> 第 k 大的任意两个数的差的绝对值</code>。<br>可以用堆来实现，但是堆的时间复杂度很高，导致测试用例过不去。使用二分查找可以进行降维打击。</p><p>该题目的解空间是：从 0 到数组 nums 中最大最小值的差，用区间表示为 [0, max(nums)-min(nums)]。<br>明确解空间之后，对解空间进行二分。对于此题，可以选当前解空间的中间值 mid，然后计算小于等于这个中间值的<strong>任意两个数的差的绝对值</strong>有x个，分情况讨论。</p><ol><li>如果 x 大于 k，那么解空间中大于等于 mid 的数都不可能是答案。</li><li>如果 x 小于 k，那么解空间中小于等于 mid 的数都不可能是答案。</li><li>如果 x 等于 k，那么 mid 就是答案。</li></ol><h4 id="4-折半查找"><a href="#4-折半查找" class="headerlink" title="4. 折半查找"></a>4. 折半查找</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>po-006.从尾到头打印链表</title>
    <link href="/po-006.%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8"/>
    <url>/po-006.%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1,3,2]</span><br>输出：<span class="hljs-comment">[2,3,1]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reversePrint</span><span class="hljs-params">(head *ListNode)</span> []<span class="hljs-title">int</span></span> &#123;<br>    <br>    point := head<br>    cnt := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> point != <span class="hljs-literal">nil</span> &#123;<br>        cnt++<br>        point = point.Next<br>    &#125;<br>    res := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, cnt)<br>    <br>    point = head<br>    <span class="hljs-keyword">for</span> point != <span class="hljs-literal">nil</span> &#123;<br>        cnt --<br>        res[cnt] = point.Val<br>        point = point.Next<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>只能遍历两次</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reversePrint</span><span class="hljs-params">(head *ListNode)</span> []<span class="hljs-title">int</span></span> &#123;<br>    <br>    point := head<br>    cnt := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> point != <span class="hljs-literal">nil</span> &#123;<br>        cnt++<br>        point = point.Next<br>    &#125;<br>    res := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, cnt)<br>    <br>    point = head<br>    <span class="hljs-keyword">for</span> point != <span class="hljs-literal">nil</span> &#123;<br>        cnt --<br>        res[cnt] = point.Val<br>        point = point.Next<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>po-0051.数组中的逆序对</title>
    <link href="/po-0051-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9"/>
    <url>/po-0051-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs makefile"><span class="hljs-section">输入: [7,5,6,4]</span><br><span class="hljs-section">输出: 5</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reversePairs</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">return</span> mergeSort(nums, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums)<span class="hljs-number">-1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(nums[]<span class="hljs-keyword">int</span>, start,end <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">if</span> start &gt;= end &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125;<br>    mid := start + (end - start) / <span class="hljs-number">2</span><br>    cnt := mergeSort(nums,start,mid) + mergeSort(nums, mid+<span class="hljs-number">1</span>, end)<br>    tmp := []<span class="hljs-keyword">int</span>&#123;&#125;<br>    i,j := start,mid+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i&lt;=mid &amp;&amp; j&lt;=end&#123;<br>        <span class="hljs-keyword">if</span> nums[i] &lt;= nums[j] &#123;<br>            tmp = <span class="hljs-built_in">append</span>(tmp,nums[i])<br>            cnt += j-(mid + <span class="hljs-number">1</span>)<br>            i++<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tmp = <span class="hljs-built_in">append</span>(tmp, nums[j])<br>            j++<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> ; i&lt;=mid; i++ &#123;<br>        tmp = <span class="hljs-built_in">append</span>(tmp,nums[i])<br>        cnt += end - (mid + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> ; j&lt;=end; j++ &#123;<br>        tmp = <span class="hljs-built_in">append</span>(tmp,nums[j])<br>    &#125;<br>    <span class="hljs-keyword">for</span> i:=start; i&lt;=end; i++&#123;<br>        nums[i] = tmp[i - start]<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>归并排序，通过 </p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reversePairs</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">return</span> mergeSort(nums, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums)<span class="hljs-number">-1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(nums[]<span class="hljs-keyword">int</span>, start,end <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">if</span> start &gt;= end &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125;<br>    mid := start + (end - start) / <span class="hljs-number">2</span><br>    cnt := mergeSort(nums,start,mid) + mergeSort(nums, mid+<span class="hljs-number">1</span>, end)<br>    tmp := []<span class="hljs-keyword">int</span>&#123;&#125;<br>    i,j := start,mid+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i&lt;=mid &amp;&amp; j&lt;=end&#123;<br>        <span class="hljs-keyword">if</span> nums[i] &lt;= nums[j] &#123;<br>            tmp = <span class="hljs-built_in">append</span>(tmp,nums[i])<br>            cnt += j-(mid + <span class="hljs-number">1</span>)<br>            i++<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tmp = <span class="hljs-built_in">append</span>(tmp, nums[j])<br>            j++<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> ; i&lt;=mid; i++ &#123;<br>        tmp = <span class="hljs-built_in">append</span>(tmp,nums[i])<br>        cnt += end - (mid + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> ; j&lt;=end; j++ &#123;<br>        tmp = <span class="hljs-built_in">append</span>(tmp,nums[j])<br>    &#125;<br>    <span class="hljs-keyword">for</span> i:=start; i&lt;=end; i++&#123;<br>        nums[i] = tmp[i - start]<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-1616-部分排序</title>
    <link href="/lc-1616-%E9%83%A8%E5%88%86%E6%8E%92%E5%BA%8F"/>
    <url>/lc-1616-%E9%83%A8%E5%88%86%E6%8E%92%E5%BA%8F</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个整数数组，编写一个函数，找出索引m和n，只要将索引区间[m,n]的元素排好序，整个数组就是有序的。注意：n-m尽量最小，也就是说，找出符合条件的最短序列。函数返回值为[m,n]，若不存在这样的m和n（例如整个数组是有序的），请返回[-1,-1]。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">输入： [<span class="hljs-number">1,2,4,7</span>,<span class="hljs-number">10,11,7,12</span>,<span class="hljs-number">6,7,16,18</span>,<span class="hljs-number">19</span>]<br>输出： [<span class="hljs-number">3</span>,<span class="hljs-number">9</span>]<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>两次遍历。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">subSort</span><span class="hljs-params">(array []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">if</span> array == <span class="hljs-literal">nil</span> || <span class="hljs-built_in">len</span>(array) &lt;= <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;<br>    &#125;<br>    tmp := array[<span class="hljs-built_in">len</span>(array)<span class="hljs-number">-1</span>]<br>    l,r := <span class="hljs-number">-1</span>,<span class="hljs-number">-1</span><br>    <span class="hljs-comment">// 寻找逆序的最左边界</span><br>    <span class="hljs-keyword">for</span> i:= <span class="hljs-built_in">len</span>(array) - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span> ; i--&#123;<br>        cur := array[i]<br>        <span class="hljs-keyword">if</span> cur &lt;= tmp &#123;<br>            tmp = cur<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            l = i<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 寻找逆序的最右边界</span><br>    <span class="hljs-keyword">for</span> i:= <span class="hljs-number">1</span>; i&lt;<span class="hljs-built_in">len</span>(array); i++ &#123;<br>        cur := array[i]<br>        <span class="hljs-keyword">if</span> cur &gt;= tmp&#123;<br>            tmp = cur<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            r = i<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;l,r&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">subSort</span><span class="hljs-params">(array []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">if</span> array == <span class="hljs-literal">nil</span> || <span class="hljs-built_in">len</span>(array) &lt;= <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;<br>    &#125;<br>    tmp := array[<span class="hljs-built_in">len</span>(array)<span class="hljs-number">-1</span>]<br>    l,r := <span class="hljs-number">-1</span>,<span class="hljs-number">-1</span><br>    <span class="hljs-comment">// 从左到右</span><br>    <span class="hljs-keyword">for</span> i:= <span class="hljs-built_in">len</span>(array) - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span> ; i--&#123;<br>        cur := array[i]<br>        <span class="hljs-keyword">if</span> cur &lt;= tmp &#123;<br>            tmp = cur<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            l = i<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> i:= <span class="hljs-number">1</span>; i&lt;<span class="hljs-built_in">len</span>(array); i++ &#123;<br>        cur := array[i]<br>        <span class="hljs-keyword">if</span> cur &gt;= tmp&#123;<br>            tmp = cur<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            r = i<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;l,r&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0000.xxxx</title>
    <link href="/lc-0000-xxxx"/>
    <url>/lc-0000-xxxx</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一棵树的前序遍历 preorder 与中序遍历  inorder。请构造二叉树并返回其根节点。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">Input: <span class="hljs-attr">preorder</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>], <span class="hljs-attr">inorder</span> = [<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">20</span>,<span class="hljs-number">7</span>]<br>Output: [<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">Input: preorder = <span class="hljs-comment">[-1]</span>, inorder = <span class="hljs-comment">[-1]</span><br>Output: <span class="hljs-comment">[-1]</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">Input: preorder = <span class="hljs-comment">[]</span>, inorder = <span class="hljs-comment">[]</span><br>Output: <span class="hljs-comment">[]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol><li>递归实现<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">buildTree</span><span class="hljs-params">(preorder []<span class="hljs-keyword">int</span>, inorder []<span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">TreeNode</span></span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(preorder) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>root := &amp;TreeNode&#123;Val:preorder[<span class="hljs-number">0</span>],Left:<span class="hljs-literal">nil</span>,Right:<span class="hljs-literal">nil</span>&#125;<br><br>i := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> ; i&lt;<span class="hljs-built_in">len</span>(inorder); i++ &#123;<br><span class="hljs-keyword">if</span> inorder[i] == preorder[<span class="hljs-number">0</span>] &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><br>root.Left = buildTree(preorder[<span class="hljs-number">1</span>:<span class="hljs-built_in">len</span>(preorder[:i])+<span class="hljs-number">1</span>], inorder[:i])<br>root.Right = buildTree(preorder[<span class="hljs-built_in">len</span>(preorder[:i])+<span class="hljs-number">1</span>:], inorder[i+<span class="hljs-number">1</span>:])<br><span class="hljs-keyword">return</span> root<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><ol><li>递归实现<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">buildTree</span><span class="hljs-params">(preorder []<span class="hljs-keyword">int</span>, inorder []<span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">TreeNode</span></span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(preorder) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>    <span class="hljs-comment">// 构建树的根节点</span><br>root := &amp;TreeNode&#123;Val:preorder[<span class="hljs-number">0</span>],Left:<span class="hljs-literal">nil</span>,Right:<span class="hljs-literal">nil</span>&#125;<br><br>    <span class="hljs-comment">// 通过中序遍历找到，由左右子树切割的区间</span><br>i := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> ; i&lt;<span class="hljs-built_in">len</span>(inorder); i++ &#123;<br><span class="hljs-keyword">if</span> inorder[i] == preorder[<span class="hljs-number">0</span>] &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><br>    <span class="hljs-comment">// 递归构造树的左子树和右子树</span><br>root.Left = buildTree(preorder[<span class="hljs-number">1</span>:<span class="hljs-built_in">len</span>(preorder[:i])+<span class="hljs-number">1</span>], inorder[:i])<br>root.Right = buildTree(preorder[<span class="hljs-built_in">len</span>(preorder[:i])+<span class="hljs-number">1</span>:], inorder[i+<span class="hljs-number">1</span>:])<br><span class="hljs-keyword">return</span> root<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0000.xxxx</title>
    <link href="/lc-0000-xxxx"/>
    <url>/lc-0000-xxxx</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一棵以 root 为根的二叉树和一个整数 target ，请你删除所有值为 target 的 叶子节点 。</p><p>注意，一旦删除值为 target 的叶子节点，它的父节点就可能变成叶子节点；如果新叶子节点的值恰好也是 target ，那么这个节点也应该被删除。</p><p>也就是说，你需要重复此过程直到不能继续删除。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight aspectj"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs aspectj">输入：root = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">null</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>], <span class="hljs-keyword">target</span> = <span class="hljs-number">2</span><br>输出：[<span class="hljs-number">1</span>,<span class="hljs-keyword">null</span>,<span class="hljs-number">3</span>,<span class="hljs-keyword">null</span>,<span class="hljs-number">4</span>]<br>解释：<br>上面左边的图中，绿色节点为叶子节点，且它们的值与 <span class="hljs-keyword">target</span> 相同（同为 <span class="hljs-number">2</span> ），它们会被删除，得到中间的图。<br>有一个新的节点变成了叶子节点且它的值与 <span class="hljs-keyword">target</span> 相同，所以将再次进行删除，从而得到最右边的图。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>], <span class="hljs-attr">target</span> = <span class="hljs-number">3</span><br>输出：[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>]<br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>], <span class="hljs-attr">target</span> = <span class="hljs-number">2</span><br>输出：[<span class="hljs-number">1</span>]<br>解释：每一步都删除一个绿色的叶子节点（值为 <span class="hljs-number">2</span>）。<br></code></pre></div></td></tr></table></figure><p>eg4:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1,1,1]</span>, target = 1<br>输出：<span class="hljs-comment">[]</span><br></code></pre></div></td></tr></table></figure><p>eg5:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1,2,3]</span>, target = 1<br>输出：<span class="hljs-comment">[1,2,3]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeLeafNodes</span><span class="hljs-params">(root *TreeNode, target <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">TreeNode</span></span> &#123;<br><span class="hljs-keyword">var</span> dfs <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(root,parent *TreeNode, is_Left <span class="hljs-keyword">bool</span>)</span></span><br>dfs = <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(root, parent *TreeNode, is_Left <span class="hljs-keyword">bool</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>dfs(root.Left, root, <span class="hljs-literal">true</span>)<br>dfs(root.Right, root, <span class="hljs-literal">false</span>)<br><span class="hljs-keyword">if</span> root.Val == target &amp;&amp; parent != <span class="hljs-literal">nil</span> &amp;&amp; root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> is_Left &#123;<br>parent.Left = <span class="hljs-literal">nil</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>parent.Right = <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br>&#125;<br>ans := &amp;TreeNode&#123;<span class="hljs-number">-1</span>, root, <span class="hljs-literal">nil</span>&#125;<br>dfs(ans.Left, ans, <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">return</span> ans.Left<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>由于题目说明了<strong>一旦删除值为  target  的叶子节点，它的父节点就可能变成叶子节点；如果新叶子节点的值恰好也是  target ，那么这个节点也应该被删除。</strong>也就是说，你需要重复此过程直到不能继续删除。 因此这里使用后序遍历会比较容易，因为形象地看上面的描述过程你会发现这是一个自底向上的过程，而自底向上通常用后序遍历。</p><p>而树的删除和链表删除类似，<strong>树的删除需要父节点</strong>，因此这里的技巧和链表类似，记录一下当前节点的父节点即可，并通过<strong>参数扩展</strong>向下传递。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeLeafNodes</span><span class="hljs-params">(root *TreeNode, target <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">TreeNode</span></span> &#123;<br><span class="hljs-comment">// 内部函数</span><br><span class="hljs-keyword">var</span> dfs <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(root,parent *TreeNode, is_Left <span class="hljs-keyword">bool</span>)</span></span><br><span class="hljs-comment">// 可以直接调用外部函数中的变量 target</span><br>dfs = <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(root, parent *TreeNode, is_Left <span class="hljs-keyword">bool</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>dfs(root.Left, root, <span class="hljs-literal">true</span>)<br>dfs(root.Right, root, <span class="hljs-literal">false</span>)<br><span class="hljs-comment">// 主要逻辑：</span><br><span class="hljs-comment">// 如果该节点的值为target，父节点不为空，且为叶子节点</span><br><span class="hljs-comment">// 则移除其父节点的叶子节点。</span><br><span class="hljs-keyword">if</span> root.Val == target &amp;&amp; parent != <span class="hljs-literal">nil</span> &amp;&amp; root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> is_Left &#123;<br>parent.Left = <span class="hljs-literal">nil</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>parent.Right = <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 虚拟头节点</span><br>ans := &amp;TreeNode&#123;<span class="hljs-number">-1</span>, root, <span class="hljs-literal">nil</span>&#125;<br>dfs(ans.Left, ans, <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">return</span> ans.Left<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-1530.好叶子节点对的数量</title>
    <link href="/lc-1530-%E5%A5%BD%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%95%B0%E9%87%8F"/>
    <url>/lc-1530-%E5%A5%BD%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%95%B0%E9%87%8F</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你二叉树的根节点 root 和一个整数 distance 。</p><p>如果二叉树中两个 叶 节点之间的 最短路径长度 小于或者等于 distance ，那它们就可以构成一组 好叶子节点对 。</p><p>返回树中 好叶子节点对的数量 。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">4</span>], <span class="hljs-attr">distance</span> = <span class="hljs-number">3</span><br>输出：<span class="hljs-number">1</span><br>解释：树的叶节点是 <span class="hljs-number">3</span> 和 <span class="hljs-number">4</span> ，它们之间的最短路径的长度是 <span class="hljs-number">3</span> 。这是唯一的好叶子节点对。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1,2,3,4,5,6,7]</span>, distance = 3<br>输出：2<br>解释：好叶子节点对为 <span class="hljs-comment">[4,5]</span> 和 <span class="hljs-comment">[6,7]</span> ，最短路径长度都是 2 。但是叶子节点对 <span class="hljs-comment">[4,6]</span> 不满足要求，因为它们之间的最短路径长度为 4 。<br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>], <span class="hljs-attr">distance</span> = <span class="hljs-number">3</span><br>输出：<span class="hljs-number">1</span><br>解释：唯一的好叶子节点对是 [<span class="hljs-number">2</span>,<span class="hljs-number">5</span>] 。<br></code></pre></div></td></tr></table></figure><p>eg4:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">100</span>], <span class="hljs-attr">distance</span> = <span class="hljs-number">1</span><br>输出：<span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>eg5:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>], <span class="hljs-attr">distance</span> = <span class="hljs-number">2</span><br>输出：<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">countPairs</span><span class="hljs-params">(root *TreeNode, distance <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>ans := <span class="hljs-number">0</span><br><span class="hljs-keyword">var</span> dfs <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span><br>dfs = <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">0</span>&#125;<br>&#125;<br>ls ,rs:= []<span class="hljs-keyword">int</span>&#123;&#125;, []<span class="hljs-keyword">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> _,l := <span class="hljs-keyword">range</span> dfs(root.Left) &#123;<br>ls = <span class="hljs-built_in">append</span>(ls, l+<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">for</span> _,r := <span class="hljs-keyword">range</span> dfs(root.Right)&#123;<br>rs = <span class="hljs-built_in">append</span>(rs, r+<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">for</span> _,l := <span class="hljs-keyword">range</span> ls&#123;<br><span class="hljs-keyword">for</span> _,r := <span class="hljs-keyword">range</span> rs &#123;<br><span class="hljs-keyword">if</span> l+r &lt;= distance &#123;<br>ans += <span class="hljs-number">1</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(ls, rs...)<br>&#125;<br>dfs(root)<br><span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">countPairs</span><span class="hljs-params">(root *TreeNode, distance <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>ans := <span class="hljs-number">0</span><br><span class="hljs-keyword">var</span> dfs <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span><br>dfs = <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">0</span>&#125;<br>&#125;<br>ls ,rs:= []<span class="hljs-keyword">int</span>&#123;&#125;, []<span class="hljs-keyword">int</span>&#123;&#125;<br><span class="hljs-comment">// for i,v := range [1,2,3,4] -- 需要的是v不是i</span><br><span class="hljs-keyword">for</span> _,l := <span class="hljs-keyword">range</span> dfs(root.Left) &#123;<br>ls = <span class="hljs-built_in">append</span>(ls, l+<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">for</span> _,r := <span class="hljs-keyword">range</span> dfs(root.Right)&#123;<br>rs = <span class="hljs-built_in">append</span>(rs, r+<span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-comment">// 笛卡尔积</span><br><span class="hljs-keyword">for</span> _,l := <span class="hljs-keyword">range</span> ls&#123;<br><span class="hljs-keyword">for</span> _,r := <span class="hljs-keyword">range</span> rs &#123;<br><span class="hljs-keyword">if</span> l+r &lt;= distance &#123;<br>ans += <span class="hljs-number">1</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(ls, rs...)<br>&#125;<br>dfs(root)<br><span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-1008.前序遍历构造二叉搜索树</title>
    <link href="/lc-1008-%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91"/>
    <url>/lc-1008-%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>返回与给定前序遍历 preorder 相匹配的二叉搜索树（binary search tree）的根结点。</p><p>(回想一下，二叉搜索树是二叉树的一种，其每个节点都满足以下规则，对于 node.left 的任何后代，值总 &lt; node.val，而 node.right 的任何后代，值总 &gt; node.val。此外，前序遍历首先显示节点 node 的值，然后遍历 node.left，接着遍历 node.right。）</p><p>题目保证，对于给定的测试用例，总能找到满足要求的二叉搜索树。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog">输入：<span class="hljs-string">[8,5,1,7,10,12]</span><br>输出：<span class="hljs-string">[8,5,10,1,7,null,12]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bstFromPreorder</span><span class="hljs-params">(preorder []<span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">TreeNode</span></span> &#123;<br><span class="hljs-keyword">var</span> dfs <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(start, end <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">TreeNode</span></span><br>dfs = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(start, end <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">TreeNode</span></span> &#123;<br><span class="hljs-keyword">if</span> start &gt; end &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">if</span> start == end &#123;<br><span class="hljs-keyword">return</span> &amp;TreeNode&#123;Val:preorder[start]&#125;<br>&#125;<br>root := &amp;TreeNode&#123;Val:preorder[start]&#125;<br>mid := <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i:=start+<span class="hljs-number">1</span>; i&lt;end+<span class="hljs-number">1</span>; i++&#123;<br><span class="hljs-keyword">if</span> preorder[i] &gt; preorder[start] &#123;<br>mid = i<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> mid == <span class="hljs-number">-1</span> &#123;<br>root.Left = dfs(start+<span class="hljs-number">1</span>, end)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>root.Left = dfs(start+<span class="hljs-number">1</span>, mid<span class="hljs-number">-1</span>)<br>root.Right =dfs(mid, end)<br>&#125;<br><span class="hljs-keyword">return</span> root<br>&#125;<br><span class="hljs-keyword">return</span> dfs(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(preorder)<span class="hljs-number">-1</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bstFromPreorder</span><span class="hljs-params">(preorder []<span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">TreeNode</span></span> &#123;<br><span class="hljs-comment">// 根据前序遍历建立二叉搜索树</span><br><span class="hljs-comment">// 前序遍历: 根 [左子树] [右子树]  --- 关键在于找到mid,然后不断递归</span><br><span class="hljs-keyword">var</span> dfs <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(start, end <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">TreeNode</span></span><br>dfs = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(start, end <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">TreeNode</span></span> &#123;<br><span class="hljs-keyword">if</span> start &gt; end &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">if</span> start == end &#123;<br><span class="hljs-keyword">return</span> &amp;TreeNode&#123;Val:preorder[start]&#125;<br>&#125;<br>root := &amp;TreeNode&#123;Val:preorder[start]&#125;<br><span class="hljs-comment">// 找到 左子树和右子树 之间的mid</span><br>mid := <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i:=start+<span class="hljs-number">1</span>; i&lt;end+<span class="hljs-number">1</span>; i++&#123;<br><span class="hljs-comment">// 找到第一个比根节点大的值所在索引.</span><br><span class="hljs-keyword">if</span> preorder[i] &gt; preorder[start] &#123;<br>mid = i<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> mid == <span class="hljs-number">-1</span> &#123;<br><span class="hljs-comment">// 所有节点都比根节点小,构造左子树</span><br>root.Left = dfs(start+<span class="hljs-number">1</span>, end)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>root.Left = dfs(start+<span class="hljs-number">1</span>, mid<span class="hljs-number">-1</span>)<br>root.Right =dfs(mid, end)<br>&#125;<br><span class="hljs-keyword">return</span> root<br>&#125;<br><span class="hljs-keyword">return</span> dfs(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(preorder)<span class="hljs-number">-1</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0103.二叉树的锯齿形层序遍历</title>
    <link href="/lc-0103-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86"/>
    <url>/lc-0103-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">给定二叉树 [<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>],<br>      <span class="hljs-number">3</span><br>    /  \<br>   <span class="hljs-number">9</span>    <span class="hljs-number">20</span><br>  / \   / \<br> <span class="hljs-number">4</span>  <span class="hljs-number">8</span>  <span class="hljs-number">15</span>  <span class="hljs-number">7</span><br>   / \<br>  <span class="hljs-number">10</span> <span class="hljs-number">12</span><br>返回锯齿形层序遍历如下：<br><span class="hljs-string">[</span><br><span class="hljs-string">  [3]</span>,<br><span class="hljs-string">  [20,9]</span>,<br><span class="hljs-string">  [4,8,15,7]</span>,<br><span class="hljs-string">  [12,10]</span><br>]<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">zigzagLevelOrder</span><span class="hljs-params">(root *TreeNode)</span> [][]<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> [][]<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br>queue := []*TreeNode&#123;root&#125;<br>ans := <span class="hljs-built_in">make</span>([][]<span class="hljs-keyword">int</span>,<span class="hljs-number">0</span>)<br><span class="hljs-comment">// 记录第几层，如果是偶数层则进行翻转</span><br>steps := <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span> &#123;<br>l := <span class="hljs-built_in">len</span>(queue)<br>tmp := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>, l)<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i&lt;l; i++ &#123;<br><span class="hljs-keyword">if</span> queue[i].Left != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, queue[i].Left)<br>&#125;<br><span class="hljs-keyword">if</span> queue[i].Right != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, queue[i].Right)<br>&#125;<br>tmp = <span class="hljs-built_in">append</span>(tmp, queue[i].Val)<br>&#125;<br><span class="hljs-comment">// a&amp;1   = 0 偶数</span><br><span class="hljs-comment">// a&amp;1   = 1 奇数</span><br><span class="hljs-keyword">if</span> steps&amp;<span class="hljs-number">1</span> == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// 偶数层进行翻转</span><br>tmp = reverse(tmp)<br>&#125; <br>ans = <span class="hljs-built_in">append</span>(ans, tmp)<br>steps++<br>queue = queue[l:]<br>&#125;<br><span class="hljs-keyword">return</span> ans<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(arr []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span>&#123;<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">len</span>(arr)/<span class="hljs-number">2</span>; i++ &#123;<br>arr[i], arr[<span class="hljs-built_in">len</span>(arr)<span class="hljs-number">-1</span>-i] = arr[<span class="hljs-built_in">len</span>(arr)<span class="hljs-number">-1</span>-i], arr[i]<br>&#125;<br><span class="hljs-keyword">return</span> arr<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 翻转函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(arr []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span>&#123;<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">len</span>(arr)/<span class="hljs-number">2</span>; i++ &#123;<br>arr[i], arr[<span class="hljs-built_in">len</span>(arr)<span class="hljs-number">-1</span>-i] = arr[<span class="hljs-built_in">len</span>(arr)<span class="hljs-number">-1</span>-i], arr[i]<br>&#125;<br><span class="hljs-keyword">return</span> arr<br>&#125;<br><span class="hljs-comment">// 层序遍历，遇到偶数层时翻转结果数组</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">zigzagLevelOrder</span><span class="hljs-params">(root *TreeNode)</span> [][]<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> [][]<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br>queue := []*TreeNode&#123;root&#125;<br>ans := <span class="hljs-built_in">make</span>([][]<span class="hljs-keyword">int</span>,<span class="hljs-number">0</span>)<br><span class="hljs-comment">// 记录第几层，如果是偶数层则进行翻转</span><br>steps := <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span> &#123;<br>l := <span class="hljs-built_in">len</span>(queue)<br>tmp := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>, l)<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i&lt;l; i++ &#123;<br><span class="hljs-keyword">if</span> queue[i].Left != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, queue[i].Left)<br>&#125;<br><span class="hljs-keyword">if</span> queue[i].Right != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, queue[i].Right)<br>&#125;<br>tmp = <span class="hljs-built_in">append</span>(tmp, queue[i].Val)<br>&#125;<br><span class="hljs-comment">// a&amp;1   = 0 偶数</span><br><span class="hljs-comment">// a&amp;1   = 1 奇数</span><br><span class="hljs-keyword">if</span> steps&amp;<span class="hljs-number">1</span> == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// 偶数层进行翻转</span><br>tmp = reverse(tmp)<br>&#125; <br>ans = <span class="hljs-built_in">append</span>(ans, tmp)<br>steps++<br>queue = queue[l:]<br>&#125;<br><span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0946.验证栈序列</title>
    <link href="/lc-0946-%E9%AA%8C%E8%AF%81%E6%A0%88%E5%BA%8F%E5%88%97"/>
    <url>/lc-0946-%E9%AA%8C%E8%AF%81%E6%A0%88%E5%BA%8F%E5%88%97</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定 pushed 和 popped 两个序列，每个序列中的 值都不重复，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 true；否则，返回 false 。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript">输入：pushed = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>], popped = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-literal">true</span><br>解释：我们可以按以下顺序执行：<br>push<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">1</span>)</span>, <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span>, <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span>, <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span>, <span class="hljs-title">pop</span><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-number">4</span>,<br>push<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">5</span>)</span>, <span class="hljs-title">pop</span><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-number">5</span>, pop<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-number">3</span>, pop<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-number">2</span>, pop<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">pushed</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>], <span class="hljs-attr">popped</span> = [<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>输出：<span class="hljs-literal">false</span><br>解释：<span class="hljs-number">1</span> 不能在 <span class="hljs-number">2</span> 之前弹出。<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">validateStackSequences</span><span class="hljs-params">(pushed []<span class="hljs-keyword">int</span>, popped []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>stack,j,N := []<span class="hljs-keyword">int</span>&#123;&#125;, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(pushed)<br><span class="hljs-keyword">for</span> _,x := <span class="hljs-keyword">range</span> pushed &#123;<br>stack = <span class="hljs-built_in">append</span>(stack,x)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(stack) != <span class="hljs-number">0</span> &amp;&amp; j &lt; N &amp;&amp; stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] == popped[j] &#123;<br>stack = stack[<span class="hljs-number">0</span>:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>j++<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> j == N<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>要点：</p><ol><li>每次都需要入栈</li><li>出栈时，需要判断栈是否为空，以及栈顶元素是否为poped对应序列值<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">validateStackSequences</span><span class="hljs-params">(pushed []<span class="hljs-keyword">int</span>, popped []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>stack,j,N := []<span class="hljs-keyword">int</span>&#123;&#125;, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(pushed)<br><span class="hljs-keyword">for</span> _,x := <span class="hljs-keyword">range</span> pushed &#123;<br>stack = <span class="hljs-built_in">append</span>(stack,x)<br><span class="hljs-comment">// 每次入栈都需要判断是否需要出栈</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(stack) != <span class="hljs-number">0</span> &amp;&amp; j &lt; N &amp;&amp; stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] == popped[j] &#123;<br>stack = stack[<span class="hljs-number">0</span>:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>j++<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> j == N<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0977-有序数组的平方</title>
    <link href="/lc-0977-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9"/>
    <url>/lc-0977-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">输入：nums = [-<span class="hljs-number">4</span>,-<span class="hljs-number">1,0,3,10</span>]<br>输出：[<span class="hljs-number">0,1,9,16</span>,<span class="hljs-number">100</span>]<br>解释：平方后，数组变为 [<span class="hljs-number">16,1,0,9</span>,<span class="hljs-number">100</span>]<br>排序后，数组变为 [<span class="hljs-number">0,1,9,16</span>,<span class="hljs-number">100</span>]<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">输入：nums = [-<span class="hljs-number">7</span>,-<span class="hljs-number">3,2,3,11</span>]<br>输出：[<span class="hljs-number">4,9,9,49</span>,<span class="hljs-number">121</span>]<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>双指针碰撞，遍历一次。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sortedSquares</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>res := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(nums))<br><span class="hljs-keyword">for</span> i,j,k := <span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(nums)<span class="hljs-number">-1</span>,<span class="hljs-built_in">len</span>(nums)<span class="hljs-number">-1</span>; i &lt;= j; &#123;<br><span class="hljs-keyword">if</span> abs(nums[i]) &gt; abs(nums[j]) &#123;<br>res[k] = nums[i]*nums[i]<br>i++<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>res[k] = nums[j]*nums[j]<br>j--<br>&#125;<br>k--<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">abs</span><span class="hljs-params">(a <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> a &lt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> -a<br> &#125;<br> <span class="hljs-keyword">return</span> a<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>注意：<br>    每次是要将平方之后大的值放在结果尾部。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sortedSquares</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    res := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(nums))<br>    <span class="hljs-comment">// 注意，每次是要将平方之后大的值放在结果尾部。</span><br><span class="hljs-keyword">for</span> i,j,k := <span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(nums)<span class="hljs-number">-1</span>,<span class="hljs-built_in">len</span>(nums)<span class="hljs-number">-1</span>; i &lt;= j; &#123;<br><span class="hljs-keyword">if</span> abs(nums[i]) &gt; abs(nums[j]) &#123;<br>res[k] = nums[i]*nums[i]<br>i++<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>res[k] = nums[j]*nums[j]<br>j--<br>&#125;<br>k--<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">abs</span><span class="hljs-params">(a <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> a &lt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> -a<br> &#125;<br> <span class="hljs-keyword">return</span> a<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0865.具有所有最深节点的最小子树</title>
    <link href="/lc-0865-%E5%85%B7%E6%9C%89%E6%89%80%E6%9C%89%E6%9C%80%E6%B7%B1%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%90%E6%A0%91"/>
    <url>/lc-0865-%E5%85%B7%E6%9C%89%E6%89%80%E6%9C%89%E6%9C%80%E6%B7%B1%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%90%E6%A0%91</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个根为 root 的二叉树，每个节点的深度是 该节点到根的最短距离 。</p><p>如果一个节点在 整个树 的任意节点之间具有最大的深度，则该节点是 最深的 。</p><p>一个节点的 子树 是该节点加上它的所有后代的集合。</p><p>返回能满足 以该节点为根的子树中包含所有最深的节点 这一条件的具有最大深度的节点。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>]<br>输出：[<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>]<br>解释：<br>我们返回值为 <span class="hljs-number">2</span> 的节点，在图中用黄色标记。<br>在图中用蓝色标记的是树的最深的节点。<br>注意，节点 <span class="hljs-number">5</span>、<span class="hljs-number">3</span> 和 <span class="hljs-number">2</span> 包含树中最深的节点，但节点 <span class="hljs-number">2</span> 的子树最小，因此我们返回它。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1]</span><br>输出：<span class="hljs-comment">[1]</span><br>解释：根节点是树中最深的节点。<br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">输入：root = [0,1,3,null,2]<br>输出：[2]<br>解释：树中最深的节点为<span class="hljs-number"> 2 </span>，有效子树为节点 2、1 和<span class="hljs-number"> 0 </span>的子树，但节点<span class="hljs-number"> 2 </span>的子树最小。<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">subtreeWithAllDeepest</span><span class="hljs-params">(root *TreeNode)</span> *<span class="hljs-title">TreeNode</span></span> &#123;<br>ans,_ := dfs(root,<span class="hljs-number">-1</span>)<br><span class="hljs-keyword">return</span> ans<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dfs</span><span class="hljs-params">(root *TreeNode, depth <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(*TreeNode, <span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> root, depth<br>&#125;<br>l, l_d := dfs(root.Left, depth+<span class="hljs-number">1</span>)<br>r, r_d := dfs(root.Right, depth+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> l_d == r_d &#123;<br><span class="hljs-keyword">return</span> root, l_d<br>&#125; <br><span class="hljs-keyword">if</span> l_d &gt; r_d &#123;<br><span class="hljs-keyword">return</span> l, l_d<br>&#125;<br><span class="hljs-keyword">return</span> r, r_d<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>除了返回深度，也要把节点给返回。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">subtreeWithAllDeepest</span><span class="hljs-params">(root *TreeNode)</span> *<span class="hljs-title">TreeNode</span></span> &#123;<br>ans,_ := dfs(root,<span class="hljs-number">-1</span>)<br><span class="hljs-keyword">return</span> ans<br>&#125;<br><span class="hljs-comment">// dfs 返回 root 节点以及最深路径</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dfs</span><span class="hljs-params">(root *TreeNode, depth <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(*TreeNode, <span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> root, depth<br>&#125;<br>l, l_d := dfs(root.Left, depth+<span class="hljs-number">1</span>)<br>r, r_d := dfs(root.Right, depth+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> l_d == r_d &#123;<br><span class="hljs-keyword">return</span> root, l_d<br>&#125; <br><span class="hljs-keyword">if</span> l_d &gt; r_d &#123;<br><span class="hljs-keyword">return</span> l, l_d<br>&#125;<br><span class="hljs-keyword">return</span> r, r_d<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0860.柠檬水找零</title>
    <link href="/lc-0860-%E6%9F%A0%E6%AA%AC%E6%B0%B4%E6%89%BE%E9%9B%B6"/>
    <url>/lc-0860-%E6%9F%A0%E6%AA%AC%E6%B0%B4%E6%89%BE%E9%9B%B6</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。</p><p>每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。</p><p>注意，一开始你手头没有任何零钱。</p><p>给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">输入：bills = [5,5,5,10,20]<br>输出：true<br>解释：<br>前<span class="hljs-number"> 3 </span>位顾客那里，我们按顺序收取<span class="hljs-number"> 3 </span>张<span class="hljs-number"> 5 </span>美元的钞票。<br>第<span class="hljs-number"> 4 </span>位顾客那里，我们收取一张<span class="hljs-number"> 10 </span>美元的钞票，并返还<span class="hljs-number"> 5 </span>美元。<br>第<span class="hljs-number"> 5 </span>位顾客那里，我们找还一张<span class="hljs-number"> 10 </span>美元的钞票和一张<span class="hljs-number"> 5 </span>美元的钞票。<br>由于所有客户都得到了正确的找零，所以我们输出 true。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">输入：bills = [5,5,10,10,20]<br>输出：false<br>解释：<br>前<span class="hljs-number"> 2 </span>位顾客那里，我们按顺序收取<span class="hljs-number"> 2 </span>张<span class="hljs-number"> 5 </span>美元的钞票。<br>对于接下来的<span class="hljs-number"> 2 </span>位顾客，我们收取一张<span class="hljs-number"> 10 </span>美元的钞票，然后返还<span class="hljs-number"> 5 </span>美元。<br>对于最后一位顾客，我们无法退回<span class="hljs-number"> 15 </span>美元，因为我们现在只有两张<span class="hljs-number"> 10 </span>美元的钞票。<br>由于不是每位顾客都得到了正确的找零，所以答案是 false。<br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">bills</span> = [<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>]<br>输出：<span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>eg4:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">bills</span> = [<span class="hljs-number">10</span>,<span class="hljs-number">10</span>]<br>输出：<span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lemonadeChange</span><span class="hljs-params">(bills []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>five,ten := <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> bills &#123;<br><span class="hljs-keyword">if</span> v == <span class="hljs-number">5</span> &#123;<br>five++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> v == <span class="hljs-number">10</span> &#123;<br><span class="hljs-keyword">if</span> five &gt; <span class="hljs-number">0</span> &#123;<br>five--<br>ten++<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> ten &gt; <span class="hljs-number">0</span> &amp;&amp; five &gt; <span class="hljs-number">0</span> &#123;<br>ten--<br>five--<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> five &gt;= <span class="hljs-number">3</span> &#123;<br>five = five <span class="hljs-number">-3</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lemonadeChange</span><span class="hljs-params">(bills []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>    <span class="hljs-comment">// 记录手上 5 美元 和 10 美元的个数（能够用来找零的数量）</span><br>five,ten := <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-comment">// 循环顾客</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> bills &#123;<br><span class="hljs-keyword">if</span> v == <span class="hljs-number">5</span> &#123; <span class="hljs-comment">// 收到 5 美元</span><br>five++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> v == <span class="hljs-number">10</span> &#123; <span class="hljs-comment">// 收到 10 美元</span><br><span class="hljs-keyword">if</span> five &gt; <span class="hljs-number">0</span> &#123;<br>five--<br>ten++<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 收到 20 美元</span><br>            <span class="hljs-comment">// 如果手上存在 10 美元，优先把 10 美元找出去。</span><br><span class="hljs-keyword">if</span> ten &gt; <span class="hljs-number">0</span> &amp;&amp; five &gt; <span class="hljs-number">0</span> &#123;<br>ten--<br>five--<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> five &gt;= <span class="hljs-number">3</span> &#123; <span class="hljs-comment">// 手上有 3 张 5 美元，能够找零</span><br>five = five <span class="hljs-number">-3</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>贪心算法：优先考虑特殊情况。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0814.二叉树剪枝</title>
    <link href="/lc-0814-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D"/>
    <url>/lc-0814-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你二叉树的根结点 root ，此外树的每个结点的值要么是 0 ，要么是 1 。</p><p>返回移除了所有不包含 1 的子树的原二叉树。</p><p>节点 node 的子树为 node 本身加上所有 node 的后代。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211123102301.png" alt="image-20211123102252658"></p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>输出：[<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>]<br>解释：<br>只有红色节点满足条件“所有不包含 <span class="hljs-number">1</span> 的子树”。 右图为返回的答案。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211123102309.png" alt="image-20211123102307884"></p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>输出：[<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>]<br></code></pre></div></td></tr></table></figure><p>eg3:</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211123102328.png" alt="image-20211123102326943"></p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">输入：root = [<span class="hljs-number">1,1,0,1</span>,<span class="hljs-number">1,0,1,0</span>]<br>输出：[<span class="hljs-number">1,1,0,1</span>,<span class="hljs-number">1</span>,null,<span class="hljs-number">1</span>]<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pruneTree</span><span class="hljs-params">(root *TreeNode)</span> *<span class="hljs-title">TreeNode</span></span> &#123;<br>ans := &amp;TreeNode&#123;<span class="hljs-number">-1</span>, root, <span class="hljs-literal">nil</span>&#125;<br>dfs(ans)<br><span class="hljs-keyword">return</span> ans.Left<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dfs</span><span class="hljs-params">(root *TreeNode)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>l := dfs(root.Left)<br>r := dfs(root.Right)<br><span class="hljs-keyword">if</span> l == <span class="hljs-number">0</span> &#123;<br>root.Left = <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">if</span> r == <span class="hljs-number">0</span> &#123;<br>root.Right = <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> root.Val + l + r<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pruneTree</span><span class="hljs-params">(root *TreeNode)</span> *<span class="hljs-title">TreeNode</span></span> &#123;<br><span class="hljs-comment">// 虚拟头节点</span><br>ans := &amp;TreeNode&#123;<span class="hljs-number">-1</span>, root, <span class="hljs-literal">nil</span>&#125;<br>dfs(ans)<br><span class="hljs-keyword">return</span> ans.Left<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dfs</span><span class="hljs-params">(root *TreeNode)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>l := dfs(root.Left)<br>r := dfs(root.Right)<br>    <span class="hljs-comment">// 后序遍历子树。如果子树结果为0，进行剪枝。</span><br><span class="hljs-keyword">if</span> l == <span class="hljs-number">0</span> &#123;<br>root.Left = <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">if</span> r == <span class="hljs-number">0</span> &#123;<br>root.Right = <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> root.Val + l + r<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0328.奇偶链表</title>
    <link href="/lc-0328-%E5%A5%87%E5%81%B6%E9%93%BE%E8%A1%A8"/>
    <url>/lc-0328-%E5%A5%87%E5%81%B6%E9%93%BE%E8%A1%A8</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</p><p>请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clean">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;NULL<br>输出: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">5</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">4</span>-&gt;NULL<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clean">输入: <span class="hljs-number">2</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">5</span>-&gt;<span class="hljs-number">6</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">7</span>-&gt;NULL <br>输出: <span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">6</span>-&gt;<span class="hljs-number">7</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">5</span>-&gt;<span class="hljs-number">4</span>-&gt;NULL<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>方法一：原地排序，遍历链表一次，额外空间为常数；</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">oddEvenList</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><br><span class="hljs-comment">// 穿针引线</span><br>dummy := &amp;ListNode&#123;Next:head&#125;<br><span class="hljs-keyword">if</span> dummy.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br><br>pre := head<br>    cur := pre.Next<br>    tmp := cur.Next<br><span class="hljs-keyword">for</span> cur != <span class="hljs-literal">nil</span> &amp;&amp; cur.Next != <span class="hljs-literal">nil</span> &#123;<br>tmp = cur.Next<br>cur.Next = tmp.Next<br>tmp.Next = pre.Next<br>pre.Next = tmp<br><br><span class="hljs-comment">// 移动 pre 和 cur，每次pre和cur都往前移动一格</span><br>pre = tmp<br>cur = cur.Next<br>&#125;<br><br><span class="hljs-keyword">return</span> dummy.Next<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>方法二：<br>分离链表再合并</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">oddEvenList</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><br><span class="hljs-comment">// 分离奇数和偶数链表</span><br>oddHead := &amp;ListNode&#123;Val: <span class="hljs-number">0</span>, Next:<span class="hljs-literal">nil</span>&#125;<br>odd := oddHead<br>evenHead := &amp;ListNode&#123;Val:<span class="hljs-number">0</span>, Next:<span class="hljs-literal">nil</span>&#125;<br>even := evenHead<br><br><br>cnt := <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> head != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> cnt % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>&#123;<br>odd.Next = head<br>odd = odd.Next<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>even.Next = head<br>even = even.Next<br>&#125;<br>head = head.Next<br>cnt++<br>&#125;<br><br>even.Next = <span class="hljs-literal">nil</span><br>odd.Next = evenHead.Next<br><span class="hljs-keyword">return</span> oddHead.Next<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>方法一：原地排序，遍历链表一次，额外空间为常数；</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">oddEvenList</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><br><span class="hljs-comment">// 穿针引线</span><br>dummy := &amp;ListNode&#123;Next:head&#125;<br><span class="hljs-keyword">if</span> dummy.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br><br>pre := head<br>    cur := pre.Next<br>    tmp := cur.Next<br><span class="hljs-keyword">for</span> cur != <span class="hljs-literal">nil</span> &amp;&amp; cur.Next != <span class="hljs-literal">nil</span> &#123;<br>tmp = cur.Next<br>cur.Next = tmp.Next<br>tmp.Next = pre.Next<br>pre.Next = tmp<br><br><span class="hljs-comment">// 移动 pre 和 cur，每次pre和cur都往前移动一格</span><br>pre = tmp<br>cur = cur.Next<br>&#125;<br><br><span class="hljs-keyword">return</span> dummy.Next<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>方法二：<br>分离链表再合并</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">oddEvenList</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><br><span class="hljs-comment">// 分离奇数和偶数链表</span><br>oddHead := &amp;ListNode&#123;Val: <span class="hljs-number">0</span>, Next:<span class="hljs-literal">nil</span>&#125;<br>odd := oddHead<br>evenHead := &amp;ListNode&#123;Val:<span class="hljs-number">0</span>, Next:<span class="hljs-literal">nil</span>&#125;<br>even := evenHead<br><br><br>cnt := <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> head != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> cnt % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>&#123;<br>odd.Next = head<br>odd = odd.Next<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>even.Next = head<br>even = even.Next<br>&#125;<br>head = head.Next<br>cnt++<br>&#125;<br><br>even.Next = <span class="hljs-literal">nil</span><br>odd.Next = evenHead.Next<br><span class="hljs-keyword">return</span> oddHead.Next<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0455.分发饼干</title>
    <link href="/lc-0455-%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2"/>
    <url>/lc-0455-%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><p>对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs makefile"><span class="hljs-section">输入: g = [1,2,3], s = [1,1]</span><br><span class="hljs-section">输出: 1</span><br><span class="hljs-section">解释: </span><br>你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。<br>虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。<br>所以你应该输出1。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs makefile"><span class="hljs-section">输入: g = [1,2], s = [1,2,3]</span><br><span class="hljs-section">输出: 2</span><br><span class="hljs-section">解释: </span><br>你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。<br>你拥有的饼干数量和尺寸都足以让所有孩子满足。<br>所以你应该输出2.<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findContentChildren</span><span class="hljs-params">(g []<span class="hljs-keyword">int</span>, s []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 对两个数组进行排序</span><br>sort.Ints(g)<br>sort.Ints(s)<br><br>child,cookie := <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> cookie &lt; <span class="hljs-built_in">len</span>(s) &amp;&amp; child &lt; <span class="hljs-built_in">len</span>(g) &#123;<br><span class="hljs-keyword">if</span> s[cookie] &gt;= g[child] &#123;<br>child++<br>&#125;<br>cookie++<br>&#125;<br><span class="hljs-keyword">return</span> child<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findContentChildren</span><span class="hljs-params">(g []<span class="hljs-keyword">int</span>, s []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 对两个数组进行排序</span><br>sort.Ints(g)<br>sort.Ints(s)<br><span class="hljs-comment">// 2. 记录满足的孩子数量</span><br>child,cookie := <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <br>    <span class="hljs-comment">// 3. 当还有饼干数量 且 还有孩子时 遍历饼干数组</span><br><span class="hljs-keyword">for</span> cookie &lt; <span class="hljs-built_in">len</span>(s) &amp;&amp; child &lt; <span class="hljs-built_in">len</span>(g) &#123;<br><span class="hljs-keyword">if</span> s[cookie] &gt;= g[child] &#123;<br>child++<br>&#125;<br>cookie++<br>&#125;<br><span class="hljs-keyword">return</span> child<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0641.设计循环双端队列</title>
    <link href="/lc-0641-%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97"/>
    <url>/lc-0641-%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>设计实现双端队列。<br>你的实现需要支持以下操作：</p><ul><li>MyCircularDeque(k)：构造函数,双端队列的大小为k。</li><li>insertFront()：将一个元素添加到双端队列头部。 如果操作成功返回 true。</li><li>insertLast()：将一个元素添加到双端队列尾部。如果操作成功返回 true。</li><li>deleteFront()：从双端队列头部删除一个元素。 如果操作成功返回 true。</li><li>deleteLast()：从双端队列尾部删除一个元素。如果操作成功返回 true。</li><li>getFront()：从双端队列头部获得一个元素。如果双端队列为空，返回 -1。</li><li>getRear()：获得双端队列的最后一个元素。 如果双端队列为空，返回 -1。</li><li>isEmpty()：检查双端队列是否为空。</li><li>isFull()：检查双端队列是否满了。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">MyCircularDeque circularDeque = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MycircularDeque(3)</span>; <span class="hljs-comment">// 设置容量大小为3</span><br>circularDeque.insert<span class="hljs-constructor">Last(1)</span>;        <span class="hljs-comment">// 返回 true</span><br>circularDeque.insert<span class="hljs-constructor">Last(2)</span>;        <span class="hljs-comment">// 返回 true</span><br>circularDeque.insert<span class="hljs-constructor">Front(3)</span>;        <span class="hljs-comment">// 返回 true</span><br>circularDeque.insert<span class="hljs-constructor">Front(4)</span>;        <span class="hljs-comment">// 已经满了，返回 false</span><br>circularDeque.get<span class="hljs-constructor">Rear()</span>;  <span class="hljs-comment">// 返回 2</span><br>circularDeque.is<span class="hljs-constructor">Full()</span>;        <span class="hljs-comment">// 返回 true</span><br>circularDeque.delete<span class="hljs-constructor">Last()</span>;        <span class="hljs-comment">// 返回 true</span><br>circularDeque.insert<span class="hljs-constructor">Front(4)</span>;        <span class="hljs-comment">// 返回 true</span><br>circularDeque.get<span class="hljs-constructor">Front()</span>;<span class="hljs-comment">// 返回 4</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 利用队列长度 求余 %</span><br><span class="hljs-keyword">type</span> MyCircularDeque <span class="hljs-keyword">struct</span> &#123;<br>Deque []<span class="hljs-keyword">int</span><br>head <span class="hljs-keyword">int</span> <span class="hljs-comment">// 队头&amp;队尾</span><br>tail <span class="hljs-keyword">int</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">(k <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">MyCircularDeque</span></span> &#123;<br><span class="hljs-keyword">return</span> MyCircularDeque&#123;Deque:<span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, k+<span class="hljs-number">1</span>),head:<span class="hljs-number">0</span>,tail:<span class="hljs-number">0</span>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">InsertFront</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsFull() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>this.head = (this.head<span class="hljs-number">-1</span> + <span class="hljs-built_in">len</span>(this.Deque)) % <span class="hljs-built_in">len</span>(this.Deque)<br>this.Deque[this.head] = value<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">InsertLast</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsFull() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>this.Deque[this.tail] = value<br>this.tail = (this.tail+<span class="hljs-number">1</span>) % <span class="hljs-built_in">len</span>(this.Deque)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">DeleteFront</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>this.head = (this.head + <span class="hljs-number">1</span>) %<span class="hljs-built_in">len</span>(this.Deque)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">DeleteLast</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>this.tail = (this.tail - <span class="hljs-number">1</span> + <span class="hljs-built_in">len</span>(this.Deque)) % <span class="hljs-built_in">len</span>(this.Deque)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">GetFront</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><span class="hljs-keyword">return</span> this.Deque[this.head]<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">GetRear</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br>n := (this.tail - <span class="hljs-number">1</span> +  <span class="hljs-built_in">len</span>(this.Deque)) % <span class="hljs-built_in">len</span>(this.Deque)<br><span class="hljs-keyword">return</span> this.Deque[n]<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> this.head == this.tail<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">IsFull</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> (this.tail + <span class="hljs-number">1</span>)%<span class="hljs-built_in">len</span>(this.Deque) == this.head<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><ol><li>循环双端队列：需要两个变量记录队头和队尾。<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">head <span class="hljs-keyword">int</span> <span class="hljs-comment">// 标记队头</span><br>tail <span class="hljs-keyword">int</span> <span class="hljs-comment">// 标记队尾的下一个位置</span><br></code></pre></div></td></tr></table></figure></li><li>循环：移动 head 和 tail。<br>移动方向不同：添加时：head是向前移动，tail向后移动<br>计算：<br>head为例子<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 向前移动</span><br>    this.head = (this.head<span class="hljs-number">-1</span> + <span class="hljs-built_in">len</span>(this.Deque)) % <span class="hljs-built_in">len</span>(this.Deque)<br><span class="hljs-comment">// 向后移动</span><br>this.head = (this.head + <span class="hljs-number">1</span>) %<span class="hljs-built_in">len</span>(this.Deque)<br></code></pre></div></td></tr></table></figure>完整代码:<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 利用队列长度 求余 %</span><br><span class="hljs-keyword">type</span> MyCircularDeque <span class="hljs-keyword">struct</span> &#123;<br>Deque []<span class="hljs-keyword">int</span><br>head <span class="hljs-keyword">int</span> <span class="hljs-comment">// 标记队头</span><br>tail <span class="hljs-keyword">int</span> <span class="hljs-comment">// 标记队尾的下一个位置</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">(k <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">MyCircularDeque</span></span> &#123;<br><span class="hljs-keyword">return</span> MyCircularDeque&#123;Deque:<span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, k+<span class="hljs-number">1</span>),head:<span class="hljs-number">0</span>,tail:<span class="hljs-number">0</span>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">InsertFront</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsFull() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>this.head = (this.head<span class="hljs-number">-1</span> + <span class="hljs-built_in">len</span>(this.Deque)) % <span class="hljs-built_in">len</span>(this.Deque)<br>this.Deque[this.head] = value<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">InsertLast</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsFull() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>this.Deque[this.tail] = value<br>this.tail = (this.tail+<span class="hljs-number">1</span>) % <span class="hljs-built_in">len</span>(this.Deque)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">DeleteFront</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>this.head = (this.head + <span class="hljs-number">1</span>) %<span class="hljs-built_in">len</span>(this.Deque)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">DeleteLast</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>this.tail = (this.tail - <span class="hljs-number">1</span> + <span class="hljs-built_in">len</span>(this.Deque)) % <span class="hljs-built_in">len</span>(this.Deque)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">GetFront</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><span class="hljs-keyword">return</span> this.Deque[this.head]<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">GetRear</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br>n := (this.tail - <span class="hljs-number">1</span> +  <span class="hljs-built_in">len</span>(this.Deque)) % <span class="hljs-built_in">len</span>(this.Deque)<br><span class="hljs-keyword">return</span> this.Deque[n]<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> this.head == this.tail<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">IsFull</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> (this.tail + <span class="hljs-number">1</span>)%<span class="hljs-built_in">len</span>(this.Deque) == this.head<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0662.二叉树剪枝</title>
    <link href="/lc-0662-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D"/>
    <url>/lc-0662-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与满二叉树（full binary tree）结构相同，但一些节点为空。</p><p>每一层的宽度被定义为两个端点（该层最左和最右的非空节点，两端点间的null节点也计入长度）之间的长度。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">输入: <br><br>           1<br>         /   \<br>       <span class="hljs-number"> 3 </span>    2<br>       / \     \  <br>     <span class="hljs-number"> 5 </span> <span class="hljs-number"> 3 </span>   <span class="hljs-number"> 9 </span><br><br>输出: 4<br>解释: 最大值出现在树的第<span class="hljs-number"> 3 </span>层，宽度为<span class="hljs-number"> 4 </span>(5,3,null,9)。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">输入: <br><br>          1<br>         /  <br>       <span class="hljs-number"> 3 </span>   <br>       / \       <br>     <span class="hljs-number"> 5 </span> <span class="hljs-number"> 3 </span>    <br><br>输出: 2<br>解释: 最大值出现在树的第<span class="hljs-number"> 3 </span>层，宽度为<span class="hljs-number"> 2 </span>(5,3)。<br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">输入: <br><br>          1<br>         / \<br>       <span class="hljs-number"> 3 </span> <span class="hljs-number"> 2 </span><br>       /        <br>     <span class="hljs-number"> 5 </span>     <br><br>输出: 2<br>解释: 最大值出现在树的第<span class="hljs-number"> 2 </span>层，宽度为<span class="hljs-number"> 2 </span>(3,2)。<br></code></pre></div></td></tr></table></figure><p>eg4:</p><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript">输入: <br><br>          <span class="hljs-number">1</span><br>         / <span class="hljs-string">\</span><br>        <span class="hljs-number">3</span>   <span class="hljs-number">2</span><br>       /     <span class="hljs-string">\</span>  <br>      <span class="hljs-number">5</span>       <span class="hljs-number">9</span> <br>     /         <span class="hljs-string">\</span><br>    <span class="hljs-number">6</span>           <span class="hljs-number">7</span><br>输出: <span class="hljs-number">8</span><br>解释: 最大值出现在树的第 <span class="hljs-number">4</span> 层，宽度为 <span class="hljs-number">8</span> (<span class="hljs-number">6</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">7</span>)。<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">widthOfBinaryTree</span><span class="hljs-params">(root *TreeNode)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-comment">// 带层的BFS</span><br>queue, res := []*TreeNode&#123;&#125;, <span class="hljs-number">0</span><br>queue = <span class="hljs-built_in">append</span>(queue, &amp;TreeNode&#123;<span class="hljs-number">0</span>, root.Left,root.Right&#125;)<br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queue) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">var</span> left, right *<span class="hljs-keyword">int</span> <br>qLen := <span class="hljs-built_in">len</span>(queue)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; qLen; i++ &#123;<br>node := queue[<span class="hljs-number">0</span>]<br>queue = queue[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">if</span> node.Left != <span class="hljs-literal">nil</span> &#123;<br>newVal := node.Val*<span class="hljs-number">2</span><br>queue = <span class="hljs-built_in">append</span>(queue, &amp;TreeNode&#123;newVal,node.Left.Left, node.Left.Right&#125;)<br><span class="hljs-keyword">if</span> left == <span class="hljs-literal">nil</span> || *left &gt; newVal &#123;<br>left = &amp;newVal<br>&#125;<br><span class="hljs-keyword">if</span> right == <span class="hljs-literal">nil</span> || *right &lt; newVal&#123;<br>right = &amp;newVal<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> node.Right != <span class="hljs-literal">nil</span> &#123;<br>newVal := node.Val * <span class="hljs-number">2</span>+<span class="hljs-number">1</span><br>queue = <span class="hljs-built_in">append</span>(queue, &amp;TreeNode&#123;newVal, node.Right.Left, node.Right.Right&#125;)<br><span class="hljs-keyword">if</span> left == <span class="hljs-literal">nil</span> || *left &gt; newVal&#123;<br>left = &amp;newVal<br>&#125;<br><span class="hljs-keyword">if</span> right == <span class="hljs-literal">nil</span> || *right &lt; newVal &#123;<br>right = &amp;newVal<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">switch</span>&#123;<br><span class="hljs-keyword">case</span> left != <span class="hljs-literal">nil</span> &amp;&amp; right == <span class="hljs-literal">nil</span>, left == <span class="hljs-literal">nil</span> &amp;&amp; right != <span class="hljs-literal">nil</span> :<br>res = max(res,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">case</span> left != <span class="hljs-literal">nil</span> &amp;&amp; right != <span class="hljs-literal">nil</span>:<br>res = max(res, *right - *left+<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(a,b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> a&gt;b &#123;<br><span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">widthOfBinaryTree</span><span class="hljs-params">(root *TreeNode)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-comment">// 带层的BFS</span><br>queue, res := []*TreeNode&#123;&#125;, <span class="hljs-number">0</span><br>queue = <span class="hljs-built_in">append</span>(queue, &amp;TreeNode&#123;<span class="hljs-number">0</span>, root.Left,root.Right&#125;)<br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queue) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">var</span> left, right *<span class="hljs-keyword">int</span> <br>qLen := <span class="hljs-built_in">len</span>(queue) <span class="hljs-comment">// 需要记录遍历层的结点个数，每次进行循环的时候 queue都有出队，不能简单的用 i&lt;len(queue) 来判断是否结束循环。</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; qLen; i++ &#123;<br>node := queue[<span class="hljs-number">0</span>]<br>queue = queue[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">if</span> node.Left != <span class="hljs-literal">nil</span> &#123;<br>newVal := node.Val*<span class="hljs-number">2</span><br>queue = <span class="hljs-built_in">append</span>(queue, &amp;TreeNode&#123;newVal,node.Left.Left, node.Left.Right&#125;)<br>                <span class="hljs-comment">// 每次遍历一个结点的时候，都需要判断是否更新 两个边界。</span><br><span class="hljs-keyword">if</span> left == <span class="hljs-literal">nil</span> || *left &gt; newVal &#123;<br>left = &amp;newVal<br>&#125;<br><span class="hljs-keyword">if</span> right == <span class="hljs-literal">nil</span> || *right &lt; newVal&#123;<br>right = &amp;newVal<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> node.Right != <span class="hljs-literal">nil</span> &#123;<br>newVal := node.Val * <span class="hljs-number">2</span>+<span class="hljs-number">1</span><br>queue = <span class="hljs-built_in">append</span>(queue, &amp;TreeNode&#123;newVal, node.Right.Left, node.Right.Right&#125;)<br><span class="hljs-keyword">if</span> left == <span class="hljs-literal">nil</span> || *left &gt; newVal&#123;<br>left = &amp;newVal<br>&#125;<br><span class="hljs-keyword">if</span> right == <span class="hljs-literal">nil</span> || *right &lt; newVal &#123;<br>right = &amp;newVal<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">switch</span>&#123;<br><span class="hljs-keyword">case</span> left != <span class="hljs-literal">nil</span> &amp;&amp; right == <span class="hljs-literal">nil</span>, left == <span class="hljs-literal">nil</span> &amp;&amp; right != <span class="hljs-literal">nil</span> :<br>res = max(res,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">case</span> left != <span class="hljs-literal">nil</span> &amp;&amp; right != <span class="hljs-literal">nil</span>:<br>res = max(res, *right - *left+<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(a,b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> a&gt;b &#123;<br><span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></div></td></tr></table></figure><p>py/js/rs有元组作为宽搜元素，go没有元组，得单独建立结构体作为宽搜元素。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 单独建立结构体作为宽搜元素</span><br> <span class="hljs-keyword">type</span> item <span class="hljs-keyword">struct</span> &#123;<br>    idx <span class="hljs-keyword">int</span><br>    *TreeNode<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">widthOfBinaryTree</span><span class="hljs-params">(root *TreeNode)</span> <span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125;<br><br>    ans, que := <span class="hljs-number">1</span>, []item&#123;&#123;<span class="hljs-number">0</span>, root&#125;&#125;<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(que) &gt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-comment">// 计算下一层队列中的宽度l, 如果 l &gt; ans，ans赋值为l</span><br>        <span class="hljs-keyword">if</span> l := que[<span class="hljs-built_in">len</span>(que) - <span class="hljs-number">1</span>].idx - que[<span class="hljs-number">0</span>].idx + <span class="hljs-number">1</span>; l &gt; ans &#123;<br>            ans = l<br>        &#125;<br>        <span class="hljs-comment">// 将下一队列的结点编号入队</span><br>        tmp := []item&#123;&#125;<br>        <span class="hljs-keyword">for</span> _, q := <span class="hljs-keyword">range</span> que &#123;<br>            <span class="hljs-keyword">if</span> q.Left != <span class="hljs-literal">nil</span> &#123;<br>                tmp = <span class="hljs-built_in">append</span>(tmp, item&#123;q.idx * <span class="hljs-number">2</span>, q.Left&#125;)<br>            &#125;<br>            <span class="hljs-keyword">if</span> q.Right != <span class="hljs-literal">nil</span> &#123;<br>                tmp = <span class="hljs-built_in">append</span>(tmp, item&#123;q.idx * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, q.Right&#125;)<br>            &#125;<br>        &#125;<br>        que = tmp<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0739.每日温度</title>
    <link href="/lc-0739-%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6"/>
    <url>/lc-0739-%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>请根据每日 气温 列表 temperatures ，请计算在每一天需要等几天才会有更高的温度。如果气温在这之后都不会升高，请在该位置用 0 来代替。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">输入: temperatures = [<span class="hljs-number">73,74,75,71</span>,<span class="hljs-number">69,72,76,73</span>]<br>输出: [<span class="hljs-number">1,1,4,2</span>,<span class="hljs-number">1,1,0,0</span>]<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">输入: temperatures = [<span class="hljs-number">30,40,50,60</span>]<br>输出: [<span class="hljs-number">1,1,1,0</span>]<br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入: temperatures = <span class="hljs-comment">[30,60,90]</span><br>输出: <span class="hljs-comment">[1,1,0]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>解法一：两层for循环</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dailyTemperatures</span><span class="hljs-params">(temperatures []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>res,j := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(temperatures)),<span class="hljs-number">0</span><br><span class="hljs-comment">// 由于当前的日期需要跟后面所有日期进行比较，可以使用两层for循环，找到第一个比当前日期温度高的日期</span><br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(temperatures); i++ &#123;<br><span class="hljs-keyword">for</span> j=i+<span class="hljs-number">1</span>; j &lt; <span class="hljs-built_in">len</span>(temperatures); j++&#123;<br><span class="hljs-keyword">if</span> temperatures[j] &gt; temperatures[i] &#123;<br>res[i] = j - i<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure><p>解法二：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dailyTemperatures</span><span class="hljs-params">(temperatures []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>res := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(temperatures))<br><span class="hljs-keyword">var</span> toCheck []<span class="hljs-keyword">int</span><br><span class="hljs-keyword">for</span> i, t := <span class="hljs-keyword">range</span> temperatures &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(toCheck) &gt; <span class="hljs-number">0</span> &amp;&amp; temperatures[toCheck[<span class="hljs-built_in">len</span>(toCheck)<span class="hljs-number">-1</span>]] &lt; t &#123;<br>idx := toCheck[<span class="hljs-built_in">len</span>(toCheck)<span class="hljs-number">-1</span>]<br>res[idx] = i - idx<br>toCheck = toCheck[:<span class="hljs-built_in">len</span>(toCheck)<span class="hljs-number">-1</span>]<br>&#125; <br>toCheck = <span class="hljs-built_in">append</span>(toCheck,i)<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>解法一：两层for循环<br>找到第一个比当前日期温度高的日期，break出内层循环。比较下一个日期</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dailyTemperatures</span><span class="hljs-params">(temperatures []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>res,j := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(temperatures)),<span class="hljs-number">0</span><br><span class="hljs-comment">// 由于当前的日期需要跟后面所有日期进行比较，可以使用两层for循环，找到第一个比当前日期温度高的日期</span><br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(temperatures); i++ &#123;<br><span class="hljs-keyword">for</span> j=i+<span class="hljs-number">1</span>; j &lt; <span class="hljs-built_in">len</span>(temperatures); j++&#123;<br><span class="hljs-keyword">if</span> temperatures[j] &gt; temperatures[i] &#123;<br>res[i] = j - i<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure><p>解法二：单调栈：每次入栈的元素都需要比栈顶元素大。<br>单调栈压栈记录的是比栈顶元素温度高的日期索引。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dailyTemperatures</span><span class="hljs-params">(temperatures []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>res := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(temperatures))<br><span class="hljs-keyword">var</span> toCheck []<span class="hljs-keyword">int</span><br><span class="hljs-keyword">for</span> i, t := <span class="hljs-keyword">range</span> temperatures &#123;<br>        <span class="hljs-comment">// 如果栈不为空，且栈顶值小于当前日期的温度。则不断出栈判断栈中对应日期的温度值。</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(toCheck) &gt; <span class="hljs-number">0</span> &amp;&amp; temperatures[toCheck[<span class="hljs-built_in">len</span>(toCheck)<span class="hljs-number">-1</span>]] &lt; t &#123;<br>idx := toCheck[<span class="hljs-built_in">len</span>(toCheck)<span class="hljs-number">-1</span>]<br>res[idx] = i - idx<br>toCheck = toCheck[:<span class="hljs-built_in">len</span>(toCheck)<span class="hljs-number">-1</span>]<br>&#125; <br>toCheck = <span class="hljs-built_in">append</span>(toCheck,i)<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0224.基本计算器</title>
    <link href="/lc-0224-%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8"/>
    <url>/lc-0224-%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;1 + 1&quot;</span><br>输出：<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot; 2-1 + 2 &quot;</span><br>输出：<span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">输入：s = &quot;(1+(4<span class="hljs-string">+5</span><span class="hljs-string">+2</span>)<span class="hljs-string">-3</span>)+(6<span class="hljs-string">+8</span>)&quot;<br>输出：23<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">calculate</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>i,stack,result,sign := <span class="hljs-number">0</span>,list.New(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i &lt; <span class="hljs-built_in">len</span>(s) &#123;<br><span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27; &#x27;</span>&#123;<br>i++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> s[i] &lt;=<span class="hljs-string">&#x27;9&#x27;</span> &amp;&amp; s[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &#123;<br><span class="hljs-comment">// 获取一段数字</span><br>base,v := <span class="hljs-number">10</span>,<span class="hljs-keyword">int</span>(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-comment">// 判断下一个是否为数字。是的话进位</span><br><span class="hljs-keyword">for</span> i+<span class="hljs-number">1</span> &lt; <span class="hljs-built_in">len</span>(s) &amp;&amp; s[i+<span class="hljs-number">1</span>] &lt;= <span class="hljs-string">&#x27;9&#x27;</span> &amp;&amp; s[i+<span class="hljs-number">1</span>] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &#123;<br>v = v*base + <span class="hljs-keyword">int</span>(s[i+<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>)<br>i++<br>&#125;<br>result += v*sign<br>i++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;+&#x27;</span> &#123;<br>sign = <span class="hljs-number">1</span><br>i++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;-&#x27;</span> &#123;<br>sign = <span class="hljs-number">-1</span><br>i++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;(&#x27;</span> &#123;<br><span class="hljs-comment">// 存储计算结果</span><br>stack.PushBack(result)<br><span class="hljs-comment">// 存储加减状态</span><br>stack.PushBack(sign)<br>result = <span class="hljs-number">0</span><br>sign = <span class="hljs-number">1</span><br>i++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br>result = result*stack.Remove(stack.Back()).(<span class="hljs-keyword">int</span>) + stack.Remove(stack.Back()).(<span class="hljs-keyword">int</span>)<br>i++<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>思路：</p><ol><li>逐个读取字符串 s ,使用 i 计数。</li><li>当读取到数字的时候，需要下一个字符是否也是数字，如果是的话需要 乘十进位。</li><li>读到 + 或 =  要的时候，修改加减号标志 sign</li><li>读到右括号的时候，存储之前的结果 result 以及加减号标志 sign，并重置 result 和 sign</li><li>读到左括号的时候，取出加减号标志*新的计算结果，然后 + 右括号前的计算结果。<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">calculate</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>i,stack,result,sign := <span class="hljs-number">0</span>,list.New(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i &lt; <span class="hljs-built_in">len</span>(s) &#123;<br><span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27; &#x27;</span>&#123;<br>i++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> s[i] &lt;=<span class="hljs-string">&#x27;9&#x27;</span> &amp;&amp; s[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &#123;<br><span class="hljs-comment">// 获取一段数字</span><br>base,v := <span class="hljs-number">10</span>,<span class="hljs-keyword">int</span>(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-comment">// 判断下一个是否为数字。是的话进位</span><br><span class="hljs-keyword">for</span> i+<span class="hljs-number">1</span> &lt; <span class="hljs-built_in">len</span>(s) &amp;&amp; s[i+<span class="hljs-number">1</span>] &lt;= <span class="hljs-string">&#x27;9&#x27;</span> &amp;&amp; s[i+<span class="hljs-number">1</span>] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &#123;<br>v = v*base + <span class="hljs-keyword">int</span>(s[i+<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>)<br>i++<br>&#125;<br>result += v*sign<br>i++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;+&#x27;</span> &#123;<br>sign = <span class="hljs-number">1</span><br>i++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;-&#x27;</span> &#123;<br>sign = <span class="hljs-number">-1</span><br>i++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;(&#x27;</span> &#123;<br><span class="hljs-comment">// 存储右括号前的计算结果</span><br>stack.PushBack(result)<br><span class="hljs-comment">// 存储右括号前的加减状态</span><br>stack.PushBack(sign)<br>result = <span class="hljs-number">0</span><br>sign = <span class="hljs-number">1</span><br>i++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;)&#x27;</span> &#123; <br>            <span class="hljs-comment">// 当前结果 = 括号内的计算结果 * 右括号前的加减状态 + 右括号前的计算结果</span><br>result = result*stack.Remove(stack.Back()).(<span class="hljs-keyword">int</span>) + stack.Remove(stack.Back()).(<span class="hljs-keyword">int</span>)<br>i++<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0232.用栈实现队列</title>
    <link href="/lc-0232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97"/>
    <url>/lc-0232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）：</p><p>实现 MyQueue 类：</p><p>void push(int x) 将元素 x 推到队列的末尾<br>int pop() 从队列的开头移除并返回元素<br>int peek() 返回队列开头的元素<br>boolean empty() 如果队列为空，返回 true ；否则，返回 false</p><p>说明：</p><p>你只能使用标准的栈操作 —— 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。<br>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</p><p>进阶：</p><p>你能否实现每个操作均摊时间复杂度为 O(1) 的队列？换句话说，执行 n 个操作的总时间复杂度为 O(n) ，即使其中一个操作可能花费较长时间。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">输入：<br>[<span class="hljs-string">&quot;MyQueue&quot;</span>, <span class="hljs-string">&quot;push&quot;</span>, <span class="hljs-string">&quot;push&quot;</span>, <span class="hljs-string">&quot;peek&quot;</span>, <span class="hljs-string">&quot;pop&quot;</span>, <span class="hljs-string">&quot;empty&quot;</span>]<br>[[], [<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>], [], [], []]<br>输出：<br>[<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">false</span>]<br><br>解释：<br>MyQueue myQueue = <span class="hljs-keyword">new</span> MyQueue();<br>myQueue.<span class="hljs-keyword">push</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// queue is: [1]</span><br>myQueue.<span class="hljs-keyword">push</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// queue is: [1, 2] (leftmost is front of the queue)</span><br>myQueue.peek(); <span class="hljs-comment">// return 1</span><br>myQueue.<span class="hljs-keyword">pop</span>(); <span class="hljs-comment">// return 1, queue is [2]</span><br>myQueue.empty(); <span class="hljs-comment">// return false</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MyQueue <span class="hljs-keyword">struct</span> &#123;<br>Stack *[]<span class="hljs-keyword">int</span><br>Queue *[]<span class="hljs-keyword">int</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">()</span> <span class="hljs-title">MyQueue</span></span> &#123;<br>tmp1,tmp2 := []<span class="hljs-keyword">int</span>&#123;&#125;,[]<span class="hljs-keyword">int</span>&#123;&#125;<br><span class="hljs-keyword">return</span> MyQueue&#123;Stack:&amp;tmp1,Queue:&amp;tmp2&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyQueue)</span> <span class="hljs-title">Push</span><span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span></span>  &#123;<br>*this.Stack = <span class="hljs-built_in">append</span>(*this.Stack,x)<br>&#125;<br><br><span class="hljs-comment">// 从Queue中取出队头元素</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyQueue)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 判断出队栈是否为空，如果为空，将入队栈的东西放到出队栈中，并取出队头元素。</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(*this.Queue) == <span class="hljs-number">0</span> &#123;<br>this.fromStackToQueue(this.Stack,this.Queue)<br>&#125;<br><br>poped := (*this.Queue)[<span class="hljs-built_in">len</span>(*this.Queue)<span class="hljs-number">-1</span>]<br>*this.Queue = (*this.Queue)[:<span class="hljs-built_in">len</span>(*this.Queue)<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">return</span> poped<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyQueue)</span> <span class="hljs-title">Peek</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(*this.Queue) == <span class="hljs-number">0</span> &#123;<br>this.fromStackToQueue(this.Stack,this.Queue)<br>&#125;<br><br><span class="hljs-keyword">return</span> (*this.Queue)[<span class="hljs-built_in">len</span>(*this.Queue)<span class="hljs-number">-1</span>]<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyQueue)</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> (<span class="hljs-built_in">len</span>(*this.Queue)+<span class="hljs-built_in">len</span>(*this.Stack)) == <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyQueue)</span> <span class="hljs-title">fromStackToQueue</span><span class="hljs-params">(s,q *[]<span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(*s) &gt; <span class="hljs-number">0</span> &#123;<br>poped := (*s)[<span class="hljs-built_in">len</span>(*s)<span class="hljs-number">-1</span>]<br>*s = (*s)[:<span class="hljs-built_in">len</span>(*s)<span class="hljs-number">-1</span>]<br>*q = <span class="hljs-built_in">append</span>(*q,poped)<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MyQueue <span class="hljs-keyword">struct</span> &#123;<br>Stack *[]<span class="hljs-keyword">int</span><br>Queue *[]<span class="hljs-keyword">int</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">()</span> <span class="hljs-title">MyQueue</span></span> &#123;<br>tmp1,tmp2 := []<span class="hljs-keyword">int</span>&#123;&#125;,[]<span class="hljs-keyword">int</span>&#123;&#125;<br><span class="hljs-keyword">return</span> MyQueue&#123;Stack:&amp;tmp1,Queue:&amp;tmp2&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyQueue)</span> <span class="hljs-title">Push</span><span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span></span>  &#123;<br>*this.Stack = <span class="hljs-built_in">append</span>(*this.Stack,x)<br>&#125;<br><br><span class="hljs-comment">// 从Queue中取出队头元素</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyQueue)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 判断出队栈是否为空，如果为空，将入队栈的东西放到出队栈中，并取出队头元素。</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(*this.Queue) == <span class="hljs-number">0</span> &#123;<br>this.fromStackToQueue(this.Stack,this.Queue)<br>&#125;<br><br>poped := (*this.Queue)[<span class="hljs-built_in">len</span>(*this.Queue)<span class="hljs-number">-1</span>]<br>*this.Queue = (*this.Queue)[:<span class="hljs-built_in">len</span>(*this.Queue)<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">return</span> poped<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyQueue)</span> <span class="hljs-title">Peek</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(*this.Queue) == <span class="hljs-number">0</span> &#123;<br>this.fromStackToQueue(this.Stack,this.Queue)<br>&#125;<br><br><span class="hljs-keyword">return</span> (*this.Queue)[<span class="hljs-built_in">len</span>(*this.Queue)<span class="hljs-number">-1</span>]<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyQueue)</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> (<span class="hljs-built_in">len</span>(*this.Queue)+<span class="hljs-built_in">len</span>(*this.Stack)) == <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyQueue)</span> <span class="hljs-title">fromStackToQueue</span><span class="hljs-params">(s,q *[]<span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(*s) &gt; <span class="hljs-number">0</span> &#123;<br>poped := (*s)[<span class="hljs-built_in">len</span>(*s)<span class="hljs-number">-1</span>]<br>*s = (*s)[:<span class="hljs-built_in">len</span>(*s)<span class="hljs-number">-1</span>]<br>*q = <span class="hljs-built_in">append</span>(*q,poped)<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0239.滑动窗口最大值</title>
    <link href="/lc-0239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC"/>
    <url>/lc-0239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p><p>返回滑动窗口中的最大值。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">输入：nums = [1,3,<span class="hljs-string">-1</span>,<span class="hljs-string">-3</span>,5,3,6,7], k = 3<br>输出：[3,3,5,5,6,7]<br>解释：<br>滑动窗口的位置                最大值<br>---------------               -----<br>[1  3  <span class="hljs-string">-1</span>] <span class="hljs-string">-3</span>  5  3  6  7       3<br> 1 [3  <span class="hljs-string">-1</span>  <span class="hljs-string">-3</span>] 5  3  6  7       3<br> 1  3 [<span class="hljs-string">-1</span>  <span class="hljs-string">-3</span>  5] 3  6  7       5<br> 1  3  <span class="hljs-string">-1</span> [<span class="hljs-string">-3</span>  5  3] 6  7       5<br> 1  3  <span class="hljs-string">-1</span>  <span class="hljs-string">-3</span> [5  3  6] 7       6<br> 1  3  <span class="hljs-string">-1</span>  <span class="hljs-string">-3</span>  5 [3  6  7]      7<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[1]</span>, k = 1<br>输出：<span class="hljs-comment">[1]</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[1,-1]</span>, k = 1<br>输出：<span class="hljs-comment">[1,-1]</span><br></code></pre></div></td></tr></table></figure><p>eg4:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[9,11]</span>, k = 2<br>输出：<span class="hljs-comment">[11]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>, k <span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 双端队列，维护数组下标。排序值从大到小</span><br>windows := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, k)<br><br><span class="hljs-comment">// 先把窗口前移动到 k位置</span><br>push := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-keyword">int</span>)</span></span>&#123;<br><span class="hljs-comment">// 队列长度 &gt; 0 且 当前数值大于队尾值时，队尾出栈。</span><br><span class="hljs-comment">// 保证队列从头到尾有序</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(windows) &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] &gt;= nums[windows[<span class="hljs-built_in">len</span>(windows)<span class="hljs-number">-1</span>]] &#123;<br>windows = windows[:<span class="hljs-built_in">len</span>(windows)<span class="hljs-number">-1</span>]<br>&#125;<br>windows = <span class="hljs-built_in">append</span>(windows,i)<br>&#125;<br><br><span class="hljs-keyword">for</span> i:= <span class="hljs-number">0</span>; i &lt; k ; i++ &#123;<br>push(i)<br>&#125;<br><br>n := <span class="hljs-built_in">len</span>(nums)<br>ans := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">1</span>, n-k+<span class="hljs-number">1</span>)<br>ans[<span class="hljs-number">0</span>] = nums[windows[<span class="hljs-number">0</span>]]<br><span class="hljs-keyword">for</span> i:=k; i&lt;n; i++ &#123;<br>push(i)<br><span class="hljs-comment">// 判断队头元素是否有效，无效则将队头出栈。</span><br><span class="hljs-keyword">for</span> windows[<span class="hljs-number">0</span>] &lt;= i-k&#123;<br>windows = windows[<span class="hljs-number">1</span>:]<br>&#125; <br>ans = <span class="hljs-built_in">append</span>(ans, nums[windows[<span class="hljs-number">0</span>]])<br>&#125;<br><span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>, k <span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 双端队列，维护数组下标。排序值从大到小</span><br>windows := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, k)<br><br><span class="hljs-comment">// 先把窗口前移动到 k位置</span><br>push := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-keyword">int</span>)</span></span>&#123;<br><span class="hljs-comment">// 队列长度 &gt; 0 且 当前数值大于队尾值时，队尾出栈。</span><br><span class="hljs-comment">// 保证队列从头到尾有序</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(windows) &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] &gt;= nums[windows[<span class="hljs-built_in">len</span>(windows)<span class="hljs-number">-1</span>]] &#123;<br>windows = windows[:<span class="hljs-built_in">len</span>(windows)<span class="hljs-number">-1</span>]<br>&#125;<br>windows = <span class="hljs-built_in">append</span>(windows,i)<br>&#125;<br><br><span class="hljs-keyword">for</span> i:= <span class="hljs-number">0</span>; i &lt; k ; i++ &#123;<br>push(i)<br>&#125;<br><br>n := <span class="hljs-built_in">len</span>(nums)<br>ans := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">1</span>, n-k+<span class="hljs-number">1</span>)<br>ans[<span class="hljs-number">0</span>] = nums[windows[<span class="hljs-number">0</span>]]<br><span class="hljs-keyword">for</span> i:=k; i&lt;n; i++ &#123;<br>push(i)<br><span class="hljs-comment">// 判断队头元素是否有效，无效则将队头出栈。</span><br><span class="hljs-keyword">for</span> windows[<span class="hljs-number">0</span>] &lt;= i-k&#123;<br>windows = windows[<span class="hljs-number">1</span>:]<br>&#125; <br>ans = <span class="hljs-built_in">append</span>(ans, nums[windows[<span class="hljs-number">0</span>]])<br>&#125;<br><span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0206.反转链表</title>
    <link href="/lc-0206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8"/>
    <url>/lc-0206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。 </p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span><br>输出：<span class="hljs-string">[5,4,3,2,1]</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1,2]</span><br>输出：<span class="hljs-comment">[2,1]</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseList</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-comment">// 递归实现</span><br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br><br>cur := reverseList(head.Next)<br><br>head.Next.Next = head<br>head.Next = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> cur<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>对于每个节点，都需要将节点的下一个节点的指针反转指向自己（即：<code>head.Next.Next = head</code>)，并且将当前节点的指针置空（即：<code>head.Next = null</code>）<br>所以，使用递归比较方便；注意<strong>递归结束条件</strong>以及<strong>回溯返回条件</strong>即可。</p><p>递归结束条件 ： 当递归到最后一个节点的时候，就该回溯。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-keyword">return</span> head<br>&#125;<br></code></pre></div></td></tr></table></figure><p>回溯返回条件 ： 当前节点指针反转结束后，return 最后一个节点，而不是head节点。（保存头节点）</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">cur := reverseList(head.Next) <span class="hljs-comment">// 得到头节点</span><br><span class="hljs-comment">// ...执行链表反转</span><br><span class="hljs-keyword">return</span> cur<br></code></pre></div></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseList</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-comment">// 递归实现</span><br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br><br>cur := reverseList(head.Next)<br><br>head.Next.Next = head<br>head.Next = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> cur<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0203.移除链表元素</title>
    <link href="/lc-0203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0"/>
    <url>/lc-0203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,6,3,4,5,6]</span>, val = <span class="hljs-number">6</span><br>输出：<span class="hljs-string">[1,2,3,4,5]</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[]</span>, val = 1<br>输出：<span class="hljs-comment">[]</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[7,7,7,7]</span>, val = 7<br>输出：<span class="hljs-comment">[]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>方法：递归。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeElements</span><span class="hljs-params">(head *ListNode, val <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br>head.Next = removeElements(head.Next,val)<br><span class="hljs-keyword">if</span> head.Val == val &#123;<br><span class="hljs-keyword">return</span> head.Next<br>&#125; <br><span class="hljs-keyword">return</span> head<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>要点：</p><ol><li><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeElements</span><span class="hljs-params">(head *ListNode, val <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>    &#125;<br>    <span class="hljs-comment">// 递归判断下一个元素是否需要移除。</span><br>head.Next = removeElements(head.Next,val)<br><span class="hljs-keyword">if</span> head.Val == val &#123;<br><span class="hljs-keyword">return</span> head.Next<br>&#125; <br><span class="hljs-keyword">return</span> head<br><br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0199.二叉树的右视图</title>
    <link href="/lc-0199-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE"/>
    <url>/lc-0199-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个二叉树的 根节点 root，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211124144916.png" alt="image-20211124144907948"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">输入: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">5</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">4</span>]<br>输出: [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入: <span class="hljs-comment">[1,null,3]</span><br>输出: <span class="hljs-comment">[1,3]</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入: <span class="hljs-comment">[]</span><br>输出: <span class="hljs-comment">[]</span><br></code></pre></div></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对二叉树进行层序遍历，取每层遍历的最后一个节点的值。</p><p>层序遍历实现思路：</p><ol><li>初始化队列（队列中包含根节点）</li><li>记录队列长度，将对应长度的节点依次出队，出队时判断是否存在左右孩子，存在则入队（用于队列保存下一个层的节点。），否则<code>出队(统一出队)</code>访问节点内容。</li><li>遍历完该长度的队列后，将该层的所有节点出栈。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">rightSideView</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 每个层序遍历的最右节点</span><br><span class="hljs-comment">// 队列进行层序遍历</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br>queue := []*TreeNode&#123;root&#125;<br>ans := []<span class="hljs-keyword">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span> &#123;<br>l := <span class="hljs-built_in">len</span>(queue)<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i&lt;l; i++&#123;<br><span class="hljs-keyword">if</span> queue[i].Left != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, queue[i].Left)<br>&#125;<br><span class="hljs-keyword">if</span> queue[i].Right != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, queue[i].Right)<br>&#125;<br>&#125;<br><span class="hljs-comment">// 只取每次层序遍历的最后一个值</span><br>ans = <span class="hljs-built_in">append</span>(ans, queue[l<span class="hljs-number">-1</span>].Val)<br>queue = queue[l:]<br>&#125;<br><span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">rightSideView</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 每个层序遍历的最右节点</span><br><span class="hljs-comment">// 队列进行层序遍历</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br>queue := []*TreeNode&#123;root&#125;<br>ans := []<span class="hljs-keyword">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span> &#123;<br>l := <span class="hljs-built_in">len</span>(queue)<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i&lt;l; i++&#123;<br><span class="hljs-keyword">if</span> queue[i].Left != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, queue[i].Left)<br>&#125;<br><span class="hljs-keyword">if</span> queue[i].Right != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue, queue[i].Right)<br>&#125;<br>&#125;<br><span class="hljs-comment">// 只取每次层序遍历的最后一个值</span><br>ans = <span class="hljs-built_in">append</span>(ans, queue[l<span class="hljs-number">-1</span>].Val)<br>queue = queue[l:]<br>&#125;<br><span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0160.相交链表</title>
    <link href="/lc-0160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8"/>
    <url>/lc-0160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。<br>图示两个链表在节点 c1 开始相交：</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211016194738.png" alt="image-20211016194737132"></p><p>题目数据 保证 整个链式结构中不存在环。</p><p>注意，函数返回结果后，链表必须 保持其原始结构 。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211016194814.png" alt="image-20211016194813346"></p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">输入：intersectVal = <span class="hljs-number">8</span>, listA = [<span class="hljs-number">4,1,8,4</span>,<span class="hljs-number">5</span>], listB = [<span class="hljs-number">5,0,1,8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>], skipA = <span class="hljs-number">2</span>, skipB = <span class="hljs-number">3</span><br>输出：Intersected at &#x27;<span class="hljs-number">8</span>&#x27;<br>解释：相交节点的值为 <span class="hljs-number">8</span> （注意，如果两个链表相交则不能为 <span class="hljs-number">0</span>）。<br>从各自的表头开始算起，链表 <span class="hljs-keyword">A</span> 为 [<span class="hljs-number">4,1,8,4</span>,<span class="hljs-number">5</span>]，链表 B 为 [<span class="hljs-number">5,0,1,8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]。<br>在 <span class="hljs-keyword">A</span> 中，相交节点前有 <span class="hljs-number">2</span> 个节点；在 B 中，相交节点前有 <span class="hljs-number">3</span> 个节点。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211016194833.png" alt="image-20211016194832293"></p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">intersectVal</span> = <span class="hljs-number">2</span>, <span class="hljs-attr">listA</span> = [<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>], <span class="hljs-attr">listB</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>], <span class="hljs-attr">skipA</span> = <span class="hljs-number">3</span>, <span class="hljs-attr">skipB</span> = <span class="hljs-number">1</span><br>输出：Intersected at &#x27;<span class="hljs-number">2</span>&#x27;<br>解释：相交节点的值为 <span class="hljs-number">2</span> （注意，如果两个链表相交则不能为 <span class="hljs-number">0</span>）。<br>从各自的表头开始算起，链表 A 为 [<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]，链表 B 为 [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]。<br>在 A 中，相交节点前有 <span class="hljs-number">3</span> 个节点；在 B 中，相交节点前有 <span class="hljs-number">1</span> 个节点。<br></code></pre></div></td></tr></table></figure><p>eg3:</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211016194847.png" alt="image-20211016194847053"></p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">intersectVal</span> = <span class="hljs-number">0</span>, <span class="hljs-attr">listA</span> = [<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>], <span class="hljs-attr">listB</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>], <span class="hljs-attr">skipA</span> = <span class="hljs-number">3</span>, <span class="hljs-attr">skipB</span> = <span class="hljs-number">2</span><br>输出：<span class="hljs-literal">null</span><br>解释：从各自的表头开始算起，链表 A 为 [<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>]，链表 B 为 [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>]。<br>由于这两个链表不相交，所以 intersectVal 必须为 <span class="hljs-number">0</span>，而 skipA 和 skipB 可以是任意值。<br>这两个链表不相交，因此返回 <span class="hljs-literal">null</span> 。<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>方法：双指针遍历。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(headA, headB *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>    pointA,pointB := headA,headB<br><span class="hljs-keyword">for</span> pointA != pointB &#123;<br><span class="hljs-keyword">if</span> pointA.Next == <span class="hljs-literal">nil</span> &#123;<br>pointA = headB<br>&#125;<br><span class="hljs-keyword">if</span> pointB.Next == <span class="hljs-literal">nil</span> &#123;<br>pointB = headA<br>&#125;<br>pointA = pointA.Next<br>pointB = pointB.Next<br>&#125;<br><span class="hljs-keyword">return</span> pointA<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>要点：</p><ol><li> 使用两个指针遍历分别遍历两个链表，当指针遍历到尾节点时，从另一个链表头开始遍历。</li><li>两个指针最长遍历的时 两个链表长度之和。<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(headA, headB *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>    pointA,pointB := headA,headB<br><span class="hljs-keyword">for</span> pointA != pointB &#123;<br><span class="hljs-keyword">if</span> pointA.Next == <span class="hljs-literal">nil</span> &#123;<br>pointA = headB<br>&#125;<br><span class="hljs-keyword">if</span> pointB.Next == <span class="hljs-literal">nil</span> &#123;<br>pointB = headA<br>&#125;<br>pointA = pointA.Next<br>pointB = pointB.Next<br>&#125;<br><span class="hljs-keyword">return</span> pointA<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0155.最小栈</title>
    <link href="/lc-0155-%E6%9C%80%E5%B0%8F%E6%A0%88"/>
    <url>/lc-0155-%E6%9C%80%E5%B0%8F%E6%A0%88</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</p><p>push(x) —— 将元素 x 推入栈中。<br>pop() —— 删除栈顶的元素。<br>top() —— 获取栈顶元素。<br>getMin() —— 检索栈中的最小元素。<br>注意，函数返回结果后，链表必须 保持其原始结构 。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg:</p><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog">输入：<br>[<span class="hljs-string">&quot;MinStack&quot;</span>,<span class="hljs-string">&quot;push&quot;</span>,<span class="hljs-string">&quot;push&quot;</span>,<span class="hljs-string">&quot;push&quot;</span>,<span class="hljs-string">&quot;getMin&quot;</span>,<span class="hljs-string">&quot;pop&quot;</span>,<span class="hljs-string">&quot;top&quot;</span>,<span class="hljs-string">&quot;getMin&quot;</span>]<br>[[],[<span class="hljs-number">-2</span>],[<span class="hljs-number">0</span>],[<span class="hljs-number">-3</span>],[],[],[],[]]<br><br>输出：<br>[null,null,null,null,<span class="hljs-number">-3</span>,null,<span class="hljs-number">0</span>,<span class="hljs-number">-2</span>]<br><br>解释：<br><span class="hljs-symbol">MinStack</span> minStack = new <span class="hljs-symbol">MinStack</span>();<br>minStack.push(<span class="hljs-number">-2</span>);<br>minStack.push(<span class="hljs-number">0</span>);<br>minStack.push(<span class="hljs-number">-3</span>);<br>minStack.getMin();   --&gt; 返回 <span class="hljs-number">-3.</span><br>minStack.pop();<br>minStack.top();      --&gt; 返回 <span class="hljs-number">0.</span><br>minStack.getMin();   --&gt; 返回 <span class="hljs-number">-2.</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MinStack <span class="hljs-keyword">struct</span> &#123;<br>elements,min []<span class="hljs-keyword">int</span><br>l <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">()</span> <span class="hljs-title">MinStack</span></span> &#123;<br><span class="hljs-keyword">return</span> MinStack&#123;<span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>),<span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>,<span class="hljs-number">0</span>),<span class="hljs-number">0</span>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MinStack)</span> <span class="hljs-title">Push</span><span class="hljs-params">(val <span class="hljs-keyword">int</span>)</span></span>  &#123;<br>this.elements = <span class="hljs-built_in">append</span>(this.elements, x)<br><span class="hljs-keyword">if</span> this.l == <span class="hljs-number">0</span> &#123;<br>this.min = <span class="hljs-built_in">append</span>(this.min,x)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>min := this.GetMin()<br><span class="hljs-keyword">if</span> x &lt; min &#123;<br>this.min = <span class="hljs-built_in">append</span>(this.min,x)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>this.min = <span class="hljs-built_in">append</span>(this.min,min)<br>&#125;<br>&#125;<br>this.l++<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MinStack)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span></span>  &#123;<br>this.l--<br>this.min = this.min[:this.l]<br>this.elements = this.elements[:this.l]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MinStack)</span> <span class="hljs-title">Top</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">return</span> this.elements[this.l<span class="hljs-number">-1</span>]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MinStack)</span> <span class="hljs-title">GetMin</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">return</span> this.min[this.l<span class="hljs-number">-1</span>]<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MinStack <span class="hljs-keyword">struct</span> &#123;<br>elements,min []<span class="hljs-keyword">int</span> <span class="hljs-comment">// 普通栈，最小栈</span><br>l <span class="hljs-keyword">int</span> <span class="hljs-comment">// 栈长度</span><br>&#125;<br><br><span class="hljs-comment">// 初始化栈</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">()</span> <span class="hljs-title">MinStack</span></span> &#123;<br><span class="hljs-keyword">return</span> MinStack&#123;<span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>),<span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>,<span class="hljs-number">0</span>),<span class="hljs-number">0</span>&#125;<br>&#125;<br><br><span class="hljs-comment">//压栈</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MinStack)</span> <span class="hljs-title">Push</span><span class="hljs-params">(val <span class="hljs-keyword">int</span>)</span></span>  &#123;<br>this.elements = <span class="hljs-built_in">append</span>(this.elements, x)<br><span class="hljs-keyword">if</span> this.l == <span class="hljs-number">0</span> &#123;<br>this.min = <span class="hljs-built_in">append</span>(this.min,x)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 获取最小栈，栈顶的值</span><br>min := this.GetMin()<br><span class="hljs-comment">// 判断压栈的值是为当前栈中最小的值，如果是，x入栈；否则 最小值入栈。</span><br><span class="hljs-comment">// 好处：不用管理两个栈的长度。</span><br><span class="hljs-keyword">if</span> x &lt; min &#123;<br>this.min = <span class="hljs-built_in">append</span>(this.min,x)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>this.min = <span class="hljs-built_in">append</span>(this.min,min)<br>&#125;<br>&#125;<br>this.l++<br>&#125;<br><br><span class="hljs-comment">// 出栈</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MinStack)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span></span>  &#123;<br>this.l--<br>this.min = this.min[:this.l]<br>this.elements = this.elements[:this.l]<br>&#125;<br><br><span class="hljs-comment">// 获取栈顶元素</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MinStack)</span> <span class="hljs-title">Top</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">return</span> this.elements[this.l<span class="hljs-number">-1</span>]<br>&#125;<br><br><span class="hljs-comment">// 检索栈中的最小元素</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MinStack)</span> <span class="hljs-title">GetMin</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">return</span> this.min[this.l<span class="hljs-number">-1</span>]<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0145.二叉树的后序遍历</title>
    <link href="/lc-0145-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86"/>
    <url>/lc-0145-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个二叉树，返回它的 后序 遍历。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入: <span class="hljs-comment">[1,null,2,3]</span>  <br>   1<br>    \<br>     2<br>    /<br>   3 <br><br>输出: <span class="hljs-comment">[3,2,1]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="递归实现一"><a href="#递归实现一" class="headerlink" title="递归实现一"></a>递归实现一</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br>ans := []<span class="hljs-keyword">int</span>&#123;&#125;<br><span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &#123;<br>ans = <span class="hljs-built_in">append</span>(ans, postorderTraversal(root.Left)...)<br>&#125;<br><span class="hljs-keyword">if</span> root.Right != <span class="hljs-literal">nil</span> &#123;<br>ans = <span class="hljs-built_in">append</span>(ans, postorderTraversal(root.Right)...)<br>&#125;<br>ans = <span class="hljs-built_in">append</span>(ans, root.Val)<br><span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="非递归实现一"><a href="#非递归实现一" class="headerlink" title="非递归实现一"></a>非递归实现一</h3><p>翻转数组的方法与<code>非递归实现一</code>不同</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseArr</span><span class="hljs-params">(arr []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">len</span>(arr)/<span class="hljs-number">2</span>; i++&#123;<br>arr[i],arr[<span class="hljs-built_in">len</span>(arr)<span class="hljs-number">-1</span>-i] = arr[<span class="hljs-built_in">len</span>(arr)<span class="hljs-number">-1</span>-i],arr[i]<br>&#125;<br><span class="hljs-keyword">return</span> arr<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 非递归实现后序遍历，使用栈，先压左节点，再压右节点；最后翻转结果</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br>stack := []*TreeNode&#123;root&#125;<br>ans := []<span class="hljs-keyword">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> &#123;<br>node := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>ans = <span class="hljs-built_in">append</span>(ans, node.Val)<br><span class="hljs-keyword">if</span> node.Left != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, node.Left)<br>&#125;<br><span class="hljs-keyword">if</span> node.Right != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, node.Right)<br>&#125;<br>&#125;<br><span class="hljs-comment">// 翻转数组</span><br>ans = reverseArr(ans)<br><span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="非递归实现二"><a href="#非递归实现二" class="headerlink" title="非递归实现二"></a>非递归实现二</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br>res := []<span class="hljs-keyword">int</span>&#123;&#125;<br>stack := []*TreeNode&#123;&#125;<br>stack = <span class="hljs-built_in">append</span>(stack,root)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(stack) != <span class="hljs-number">0</span> &#123;<br>node := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>res = <span class="hljs-built_in">append</span>(res, node.Val)<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">if</span> node.Left != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, node.Left)<br>&#125;<br><span class="hljs-keyword">if</span> node.Right != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, node.Right)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> reverse(res)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(res []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">for</span> i,j := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(res)<span class="hljs-number">-1</span>; i&lt;j; i,j = i+<span class="hljs-number">1</span>,j<span class="hljs-number">-1</span> &#123;<br>res[i],res[j] = res[j],res[i]<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>双栈实现<br>后序遍历：左右根 -&gt; 根右左 ，按照先序遍历的压栈实现方式，将节点入栈到结果数组中，最后反转结果数组即可。<br><code>对于每个节点的一致操作：</code></p><ol><li>弹打印</li><li>若有左，左入栈</li><li>若有右，右入栈<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br>res := []<span class="hljs-keyword">int</span>&#123;&#125;<br>stack := []*TreeNode&#123;&#125;<br>stack = <span class="hljs-built_in">append</span>(stack,root)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(stack) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// 出栈并打印</span><br>node := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>res = <span class="hljs-built_in">append</span>(res, node.Val)<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br><span class="hljs-comment">// 不同于前序遍历：</span><br><span class="hljs-comment">// 将左节点入栈</span><br><span class="hljs-keyword">if</span> node.Left != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, node.Left)<br>&#125;<br><span class="hljs-comment">// 再将右节点入栈</span><br><span class="hljs-keyword">if</span> node.Right != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, node.Right)<br>&#125;<br>&#125;<br><span class="hljs-comment">// 翻转结果数组，即为后序遍历结果</span><br><span class="hljs-keyword">return</span> reverse(res)<br>&#125;<br><br><span class="hljs-comment">// 翻转数组</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(res []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">for</span> i,j := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(res)<span class="hljs-number">-1</span>; i&lt;j; i,j = i+<span class="hljs-number">1</span>,j<span class="hljs-number">-1</span> &#123;<br>res[i],res[j] = res[j],res[i]<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0144.二叉树的前序遍历</title>
    <link href="/lc-0144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86"/>
    <url>/lc-0144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你二叉树的根节点 root ，返回它节点值的 前序 遍历。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1,null,2,3]</span><br>输出：<span class="hljs-comment">[1,2,3]</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1]</span><br>输出：<span class="hljs-comment">[1]</span><br></code></pre></div></td></tr></table></figure><p>eg4:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1,2]</span><br>输出：<span class="hljs-comment">[1,2]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="递归解法一"><a href="#递归解法一" class="headerlink" title="递归解法一"></a>递归解法一</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 二叉树前序遍历</span><br>ans := []<span class="hljs-keyword">int</span>&#123;&#125;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> ans<br>&#125;<br>ans = <span class="hljs-built_in">append</span>(ans, root.Val)<br><span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &#123;<br>ans = <span class="hljs-built_in">append</span>(ans,preorderTraversal(root.Left)...)<br>&#125; <br><span class="hljs-keyword">if</span> root.Right != <span class="hljs-literal">nil</span> &#123;<br>ans = <span class="hljs-built_in">append</span>(ans, preorderTraversal(root.Right)...)<br>&#125;<br><span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="递归解法二"><a href="#递归解法二" class="headerlink" title="递归解法二"></a>递归解法二</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">var</span> result []<span class="hljs-keyword">int</span><br>preoder(root, &amp;result)<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">preoder</span><span class="hljs-params">(root *TreeNode, output *[]<span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root != <span class="hljs-literal">nil</span> &#123;<br>*output = <span class="hljs-built_in">append</span>(*output, root.Val)<br>preoder(root.Left,output)<br>preoder(root.Right,output)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="非递归写法："><a href="#非递归写法：" class="headerlink" title="非递归写法："></a>非递归写法：</h3><p>需要用到栈结构。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br>stack, res := []*TreeNode&#123;&#125;, []<span class="hljs-keyword">int</span>&#123;&#125;<br>stack = <span class="hljs-built_in">append</span>(stack,root)<br><br><span class="hljs-comment">// 判断条件没有 p 指针，都是从栈中取出节点 作为根节点</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(stack) != <span class="hljs-number">0</span> &#123;<br>node := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br><span class="hljs-comment">// 遍历根</span><br><span class="hljs-keyword">if</span> node != <span class="hljs-literal">nil</span> &#123;<br>res = <span class="hljs-built_in">append</span>(res,node.Val)<br>&#125;<br><span class="hljs-comment">// 栈结构：先入后出，先放右节点 -- 后遍历</span><br><span class="hljs-keyword">if</span> node.Right != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, node.Right)<br>&#125;<br><span class="hljs-comment">// 放入 左节点，到栈顶。</span><br><span class="hljs-keyword">if</span> node.Left != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, node.Left)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><ol start="2"><li>非递归写法：<br>需要用到栈结构。<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br>stack, res := []*TreeNode&#123;&#125;, []<span class="hljs-keyword">int</span>&#123;&#125;<br>stack = <span class="hljs-built_in">append</span>(stack,root)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(stack) != <span class="hljs-number">0</span> &#123;<br>node := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br><span class="hljs-comment">// 遍历根</span><br><span class="hljs-keyword">if</span> node != <span class="hljs-literal">nil</span> &#123;<br>res = <span class="hljs-built_in">append</span>(res,node.Val)<br>&#125;<br><span class="hljs-comment">// 栈结构：先入后出，先放右节点 -- 后遍历</span><br><span class="hljs-keyword">if</span> node.Right != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, node.Right)<br>&#125;<br><span class="hljs-comment">// 放入 左节点，到栈顶。</span><br><span class="hljs-keyword">if</span> node.Left != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, node.Left)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0143.重排链表</title>
    <link href="/lc-0143-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8"/>
    <url>/lc-0143-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个单链表 L 的头节点 head ，单链表 L 表示为：</p><p> L0 → L1 → … → Ln-1 → Ln<br>请将其重新排列后变为：</p><p>L0 → Ln → L1 → Ln-1 → L2 → Ln-2 → …</p><p>不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">输入: head = [<span class="hljs-number">1,2,3,4</span>]<br>输出: [<span class="hljs-number">1,4,2,3</span>]<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog">输入: head = <span class="hljs-string">[1,2,3,4,5]</span><br>输出: <span class="hljs-string">[1,5,2,4,3]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reorderList</span><span class="hljs-params">(head *ListNode)</span></span> &#123;<br><span class="hljs-comment">// 重排链表：</span><br><span class="hljs-comment">// 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</span><br><span class="hljs-comment">// 1 -&gt; 5 -&gt; 2 -&gt; 4 -&gt; 3</span><br><span class="hljs-comment">// 方法： 先找到链表的中间结点（快慢指针，速度差值为1），然后利用逆序区间（翻转中间节点到尾节点）的操作</span><br><span class="hljs-comment">//   最后，利用两个指针，一个从链表头开始，一个从链表中间节点开开始，拼接最终结果。</span><br><br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 寻找链表中间节点</span><br>p1 := head<br>p2 := head<br><span class="hljs-keyword">for</span> p1.Next != <span class="hljs-literal">nil</span> &amp;&amp; p2.Next.Next != <span class="hljs-literal">nil</span> &#123;<br>p1 = p1.Next<br>p2 = p2.Next.Next<br>&#125;<br><br><span class="hljs-comment">// 翻转链表后半部分</span><br>preMiddle := p1<br>preCurrent := p1.Next<br><span class="hljs-keyword">for</span> preCurrent.Next != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// 穿针引线 - 头插法</span><br>tmp := preCurrent.Next<br>preCurrent.Next = tmp.Next<br>tmp.Next = preMiddle.Next<br>preMiddle.Next = tmp<br>&#125;<br><br><span class="hljs-comment">// 三指针开始遍历两个链表拼接到结果</span><br>p1 = head<br>p2 = preMiddle.Next<br><span class="hljs-keyword">for</span> p1 != preMiddle &#123;<br><span class="hljs-comment">// 拼接结果</span><br>preMiddle.Next = p2.Next<br>p2.Next = p1.Next<br>p1.Next = p2<br><span class="hljs-comment">// 移动 p1 和 p2</span><br>p1 = p1.Next.Next<br>p2 = preMiddle.Next<br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reorderList</span><span class="hljs-params">(head *ListNode)</span></span> &#123;<br><span class="hljs-comment">// 重排链表：</span><br><span class="hljs-comment">// 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</span><br><span class="hljs-comment">// 1 -&gt; 5 -&gt; 2 -&gt; 4 -&gt; 3</span><br><span class="hljs-comment">// 方法： 先找到链表的中间结点（快慢指针，速度差值为1），然后利用逆序区间（翻转中间节点到尾节点）的操作</span><br><span class="hljs-comment">//   最后，利用两个指针，一个从链表头开始，一个从链表中间节点开开始，拼接最终结果。</span><br><br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 寻找链表中间节点</span><br>p1 := head<br>p2 := head<br><span class="hljs-keyword">for</span> p1.Next != <span class="hljs-literal">nil</span> &amp;&amp; p2.Next.Next != <span class="hljs-literal">nil</span> &#123;<br>p1 = p1.Next<br>p2 = p2.Next.Next<br>&#125;<br><br><span class="hljs-comment">// 翻转链表后半部分</span><br>preMiddle := p1<br>preCurrent := p1.Next<br><span class="hljs-keyword">for</span> preCurrent.Next != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// 穿针引线 - 头插法</span><br>tmp := preCurrent.Next<br>preCurrent.Next = tmp.Next<br>tmp.Next = preMiddle.Next<br>preMiddle.Next = tmp<br>&#125;<br><br><span class="hljs-comment">// 三指针开始遍历两个链表拼接到结果</span><br>p1 = head<br>p2 = preMiddle.Next<br><span class="hljs-keyword">for</span> p1 != preMiddle &#123;<br><span class="hljs-comment">// 拼接结果</span><br>preMiddle.Next = p2.Next<br>p2.Next = p1.Next<br>p1.Next = p2<br><span class="hljs-comment">// 移动 p1 和 p2</span><br>p1 = p1.Next.Next<br>p2 = preMiddle.Next  <span class="hljs-comment">// p2.Next.Next 已经变了</span><br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0142.环形链表 II</title>
    <link href="/lc-0142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II"/>
    <url>/lc-0142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</p><p>说明：不允许修改给定的链表。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">head</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">4</span>], <span class="hljs-attr">pos</span> = <span class="hljs-number">1</span><br>输出：返回索引为 <span class="hljs-number">1</span> 的链表节点<br>解释：链表中有一个环，其尾部连接到第二个节点<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">head</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], <span class="hljs-attr">pos</span> = <span class="hljs-number">0</span><br>输出：返回索引为 <span class="hljs-number">0</span> 的链表节点<br>解释：链表中有一个环，其尾部连接到第一个节点。<br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">head</span> = [<span class="hljs-number">1</span>], <span class="hljs-attr">pos</span> = -<span class="hljs-number">1</span><br>输出：返回 <span class="hljs-literal">null</span><br>解释：链表中没有环。<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">detectCycle</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>fast,low := head.Next.Next,head.Next<br><span class="hljs-keyword">for</span> fast != low &#123;<br><span class="hljs-keyword">if</span> fast == <span class="hljs-literal">nil</span> || fast.Next.Next == <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>fast = fast.Next.Next<br>low = low.Next<br>&#125;<br>fast = head<br><span class="hljs-keyword">for</span> fast != low &#123;<br>fast = fast.Next<br>low = low.Next<br>&#125;<br><span class="hljs-keyword">return</span> fast<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>giao,一个小时解题。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">detectCycle</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-comment">// fast 和 low 的起始点应该不一致。</span><br>fast,low := head.Next.Next,head.Next<br><span class="hljs-keyword">for</span> fast != low &#123;<br><span class="hljs-keyword">if</span> fast == <span class="hljs-literal">nil</span> || fast.Next.Next == <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>fast = fast.Next.Next<br>low = low.Next<br>    &#125;<br>    <span class="hljs-comment">// 调试发现 fast 和 low 一直在head节点，即上面循环条件有问题。注意：fast 和 low 节点遍历的起始位置不能都从head开始</span><br>    <span class="hljs-comment">// fmt.Print(&quot;fast:&quot;,fast.Val)</span><br>    <span class="hljs-comment">// fmt.Print(&quot;low:&quot;,low.Val)</span><br>fast = head<br><span class="hljs-keyword">for</span> fast != low &#123;<br>fast = fast.Next<br>low = low.Next<br>&#125;<br><span class="hljs-keyword">return</span> fast<br>&#125;<br></code></pre></div></td></tr></table></figure><p>解题思路：</p><ol><li>fast 和 low 相遇的时候，fast走了 low的两倍路程。即 fast = 2 * low</li><li>fast 走了 low + nb (b：环的节点数)<br>两式相减：  low = nb<br>说明，low只要再走a步就到达入环的节点，同时，从head走a步也可到达入环的节点。因此，再次使用双指针碰撞方法，这次速度为一，当两个指针相遇的时候，就到达入环的节点。</li></ol><p><strong>注意：</strong>for循环的判断条件是两指针不相等，那么遍历开始的起始节点应该不一致。</p>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0141.环形链表</title>
    <link href="/lc-0141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8"/>
    <url>/lc-0141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个链表，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p>如果链表中存在环，则返回 true 。 否则，返回 false 。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">head</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">4</span>], <span class="hljs-attr">pos</span> = <span class="hljs-number">1</span><br>输出：<span class="hljs-literal">true</span><br>解释：链表中有一个环，其尾部连接到第二个节点。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">head</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], <span class="hljs-attr">pos</span> = <span class="hljs-number">0</span><br>输出：<span class="hljs-literal">true</span><br>解释：链表中有一个环，其尾部连接到第一个节点。<br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[]</span>, l2 = <span class="hljs-comment">[0]</span><br>输出：<span class="hljs-comment">[0]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>追及问题：使用快慢指针。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Accepted</span><br><span class="hljs-attribute">20</span>/<span class="hljs-number">20</span> cases passed (<span class="hljs-number">8</span> ms)<br><span class="hljs-attribute">Your</span> runtime beats <span class="hljs-number">100</span> % of golang submissions<br><span class="hljs-attribute">Your</span> memory usage beats <span class="hljs-number">64</span>.<span class="hljs-number">51</span> % of golang submissions (<span class="hljs-number">4</span>.<span class="hljs-number">3</span> MB)<br></code></pre></div></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(head *ListNode)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>slow, fast := head, head.Next<br><span class="hljs-keyword">for</span> slow != fast &#123;<br><span class="hljs-keyword">if</span> fast == <span class="hljs-literal">nil</span> || fast.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>slow = slow.Next<br>fast = fast.Next.Next<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>不知道为啥这个是 60+ emm…有些奇怪。都差不多，两种都是快慢指针，有点差别，但是下面的好记一些。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Accepted</span><br><span class="hljs-attribute">20</span>/<span class="hljs-number">20</span> cases passed (<span class="hljs-number">4</span> ms)<br><span class="hljs-attribute">Your</span> runtime beats <span class="hljs-number">60</span>.<span class="hljs-number">21</span> % of golang submissions<br><span class="hljs-attribute">Your</span> memory usage beats <span class="hljs-number">64</span>.<span class="hljs-number">51</span> % of golang submissions (<span class="hljs-number">4</span>.<span class="hljs-number">3</span> MB)<br></code></pre></div></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(head *ListNode)</span> <span class="hljs-title">bool</span></span> &#123;<br>s,l := head, head<br><span class="hljs-keyword">for</span> l != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> l.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>s = s.Next<br>l = l.Next.Next<br><span class="hljs-keyword">if</span> l == s &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>解题要点：</p><ol><li>起始位置：快指针为快指针的下一个元素</li><li>慢指针一次走一步，快指针一次走两步</li><li>循环条件：快指针 != 慢指针 ， 当快指针到达终点时，退出循环<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(head *ListNode)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>slow, fast := head, head.Next<br><span class="hljs-keyword">for</span> slow != fast &#123;<br><span class="hljs-keyword">if</span> fast == <span class="hljs-literal">nil</span> || fast.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>slow = slow.Next<br>fast = fast.Next.Next<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0138.复制带随机指针的链表</title>
    <link href="/lc-0138-%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8"/>
    <url>/lc-0138-%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。</p><p>构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。</p><p>例如，如果原链表中有 X 和 Y 两个节点，其中 X.random –&gt; Y 。那么在复制链表中对应的两个节点 x 和 y ，同样有 x.random –&gt; y 。</p><p>返回复制链表的头节点。</p><p>用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：</p><p>val：一个表示 Node.val 的整数。<br>random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为  null 。<br>你的代码 只 接受原链表的头节点 head 作为传入参数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[<span class="hljs-comment">[7,null]</span>,<span class="hljs-comment">[13,0]</span>,<span class="hljs-comment">[11,4]</span>,<span class="hljs-comment">[10,2]</span>,<span class="hljs-comment">[1,0]</span>]</span><br>输出：<span class="hljs-comment">[<span class="hljs-comment">[7,null]</span>,<span class="hljs-comment">[13,0]</span>,<span class="hljs-comment">[11,4]</span>,<span class="hljs-comment">[10,2]</span>,<span class="hljs-comment">[1,0]</span>]</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">输入：head = <span class="hljs-string">[[1,1],[2,1]]</span><br>输出：<span class="hljs-string">[[1,1],[2,1]]</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">输入：head = <span class="hljs-string">[[3,null],[3,0],[3,null]]</span><br>输出：<span class="hljs-string">[[3,null],[3,0],[3,null]]</span><br></code></pre></div></td></tr></table></figure><p>eg4:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br>解释：给定的链表为空（空指针），因此返回 null。<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p> 迭代不行了，用回溯+哈希表</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">var</span> cacheNode <span class="hljs-keyword">map</span>[*Node]*Node<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copyRandomList</span><span class="hljs-params">(head *Node)</span> *<span class="hljs-title">Node</span></span> &#123;<br>cacheNode = <span class="hljs-keyword">map</span>[*Node]*Node&#123;&#125;<br><span class="hljs-keyword">return</span> deepCopy(head)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deepCopy</span><span class="hljs-params">(node *Node)</span> *<span class="hljs-title">Node</span></span> &#123;<br><span class="hljs-keyword">if</span> node == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">if</span> n,has := cacheNode[node]:has &#123;<br><span class="hljs-keyword">return</span> n<br>&#125;<br>newNode := &amp;Node&#123;Val:node.Val&#125;<br>cacheNode[node] = newNode<br>newNode.Next = deepCopy(node.Next)<br>newNode.Random = deepCopy(node.Random)<br><span class="hljs-keyword">return</span> newNode<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>迭代达咩了，用回溯+哈希表<br> — 利用回溯的方式，让每个节点的拷贝操作相互独立。对于当前节点，我们首先要进行拷贝，然后我们进行「当前节点的后继节点」和「当前节点的随机指针指向的节点」拷贝，拷贝完成后将创建的新节点的指针返回，即可完成当前节点的两指针的赋值。（一大段话从官方题解中摘出来的…不是很想看和理解，但是还是得看下就是了）</p><p> 简单来说就是，用 <code>map[*Node]*Node</code> 保存 旧节点 和 新节点 的对应关系。用 val 可能存在val一致但是节点其实时不一样的情况，所以只能用 旧地址 map 新地址 的方式存储是否复制过某一节点呢。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 回溯+哈希表</span><br><span class="hljs-keyword">var</span> resNode <span class="hljs-keyword">map</span>[*Node]*Node<br><span class="hljs-comment">// map[node]newNode -- 存放 旧节点 与 新节点 对应的地址。用于判断该旧节点是否被复制过。</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copyRandomList</span><span class="hljs-params">(head *Node)</span> *<span class="hljs-title">Node</span></span> &#123;<br><span class="hljs-comment">// 回溯 + 哈希</span><br>resNode = <span class="hljs-keyword">map</span>[*Node]*Node&#123;&#125;<br><span class="hljs-keyword">return</span> deepCopy(head)<br>&#125;<br><br><span class="hljs-comment">// 拷贝并返回一个结点</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deepCopy</span><span class="hljs-params">(node *Node)</span> *<span class="hljs-title">Node</span></span> &#123;<br><span class="hljs-keyword">if</span> node == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">if</span> n,has := resNode[node]; has &#123;<br><span class="hljs-keyword">return</span> n<br>&#125;<br>newNode := &amp;Node&#123;Val: node.Val&#125;<br>resNode[node] = newNode<br><span class="hljs-comment">// 递归调用复制 node.Next 和 node.Random，当重新回到此处时，已经创建完毕</span><br>newNode.Next = deepCopy(node.Next)<br>newNode.Random = deepCopy(node.Random)<br><span class="hljs-keyword">return</span> newNode<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="错误代码！"><a href="#错误代码！" class="headerlink" title="错误代码！"></a>错误代码！</h3><ol><li>使用 []*Node 存储对象，不可行。val=7，但是index=0等情况下，listNode[7] 越界了，还要进行查找，不科学。<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copyRandomList</span><span class="hljs-params">(head *Node)</span> *<span class="hljs-title">Node</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// [index]*Node 存储 值 与 *Node</span><br><span class="hljs-comment">// 构建*Node</span><br>listNode := []*Node&#123;&#125;<br><span class="hljs-keyword">for</span> p:=head; p!=<span class="hljs-literal">nil</span>; p = p.Next&#123;<br>listNode = <span class="hljs-built_in">append</span>(listNode, &amp;Node&#123;p.Val, <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>&#125;)<br>&#125;<br><br>fmt.Println(listNode[<span class="hljs-number">0</span>])<br><br><span class="hljs-keyword">for</span> p,cnt := head,<span class="hljs-number">0</span>; cnt &lt; <span class="hljs-built_in">len</span>(listNode)<span class="hljs-number">-1</span>; p = p.Next &#123;<br>node := listNode[cnt]<br>node.Next = listNode[cnt+<span class="hljs-number">1</span>]<br><span class="hljs-keyword">if</span> p.Random != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// 单纯以一个数组存储结点，不行。 listNode[7] 越界了。不对</span><br>node.Random = listNode[p.Random.Val]<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> listNode[<span class="hljs-number">0</span>]<br><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>只能过两条案例的情况 … 傻来着，没有考虑val值相同的情况。map对于相同key的结点只保存了一次。</li></ol><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211126155535.png" alt="image-20211126155526981"></p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copyRandomList</span><span class="hljs-params">(head *Node)</span> *<span class="hljs-title">Node</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// map[key]value 存储 值 与 *Node</span><br>    <span class="hljs-comment">// map结构 ---- map[int]*Node</span><br><span class="hljs-comment">// 构建*Node</span><br>resNode := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]*Node)<br>    <span class="hljs-comment">// 循环条件 cur!=nil 需要遍历到最后一个节点</span><br><span class="hljs-keyword">for</span> cur := head; cur!=<span class="hljs-literal">nil</span>; cur = cur.Next &#123;<br>resNode[cur.Val] = &amp;Node&#123;Val:cur.Val,Next:<span class="hljs-literal">nil</span>,Random:<span class="hljs-literal">nil</span>&#125;<br>fmt.Println(resNode[cur.Val])<br>&#125;<br><br><span class="hljs-keyword">for</span> cur := head;cur!=<span class="hljs-literal">nil</span>; cur = cur.Next&#123;<br>        <span class="hljs-comment">// 需要注意 cur.Next 和 cur.Random 都有可能指向null，此时不需要复制，因为上面复制的节点本身初始化就是null</span><br><span class="hljs-keyword">if</span> cur.Random != <span class="hljs-literal">nil</span>  &#123;<br>resNode[cur.Val].Random = resNode[cur.Random.Val]<br>&#125;<br><span class="hljs-keyword">if</span> cur.Next != <span class="hljs-literal">nil</span> &#123;<br>resNode[cur.Val].Next = resNode[cur.Next.Val]<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> resNode[head.Val]<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0094.二叉树的中序遍历</title>
    <link href="/lc-0094-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86"/>
    <url>/lc-0094-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你二叉树的根结点 root ，请你将它展开为一个单链表：</p><p>展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。<br>展开后的单链表应该与二叉树 先序遍历 顺序相同。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211110101807.png" alt="image-20211110101759045"></p><p>eg1:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">6</span>]<br>输出：[<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">5</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">6</span>]<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[0]</span><br>输出：<span class="hljs-comment">[0]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">flatten</span><span class="hljs-params">(root *TreeNode)</span></span>  &#123;<br><span class="hljs-comment">// 递归实现：</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> || (root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span>) &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>flatten(root.Left)<br>flatten(root.Right)<br>current := root.Right<br>root.Right = root.Left<br>root.Left = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">for</span> root.Right != <span class="hljs-literal">nil</span> &#123;<br>root = root.Right<br>&#125;<br>root.Right = current<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">flatten</span><span class="hljs-params">(root *TreeNode)</span></span>  &#123;<br><span class="hljs-comment">// 递归实现：</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> || (root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span>) &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>flatten(root.Left)<br>    <span class="hljs-comment">// 最后遍历右节点</span><br>flatten(root.Right)<br>current := root.Right<br>root.Right = root.Left<br>root.Left = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">for</span> root.Right != <span class="hljs-literal">nil</span> &#123;<br>root = root.Right<br>&#125;<br>root.Right = current<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0104.二叉树的最大深度</title>
    <link href="/lc-0104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6"/>
    <url>/lc-0104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript">给定二叉树 [<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]，<br>    <span class="hljs-number">3</span><br>   / <span class="hljs-string">\</span><br>  <span class="hljs-number">9</span>  <span class="hljs-number">20</span><br>    /  <span class="hljs-string">\</span><br>   <span class="hljs-number">15</span>   <span class="hljs-number">7</span><br><br>返回它的最大深度 <span class="hljs-number">3</span> 。<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(root *TreeNode)</span> <span class="hljs-title">int</span></span> &#123;<br><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">// 左节点的最大深度</span><br>left := maxDepth(root.Left)<br><br><span class="hljs-comment">// 右节点的最大深度</span><br>right := maxDepth(root.Right)<br><br>max :=  maxNum(left, right)<br><br><span class="hljs-keyword">return</span> max+<span class="hljs-number">1</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxNum</span><span class="hljs-params">(a,b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> a &gt; b &#123;<br><span class="hljs-keyword">return</span> a <br>&#125; <br><span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(root *TreeNode)</span> <span class="hljs-title">int</span></span> &#123;<br><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">// 左节点的最大深度</span><br>left := maxDepth(root.Left)<br><br><span class="hljs-comment">// 右节点的最大深度</span><br>right := maxDepth(root.Right)<br><br>max :=  maxNum(left, right)<br>    <span class="hljs-comment">// 返回 最大深度+1</span><br><span class="hljs-keyword">return</span> max+<span class="hljs-number">1</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxNum</span><span class="hljs-params">(a,b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> a &gt; b &#123;<br><span class="hljs-keyword">return</span> a <br>&#125; <br><span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0102.二叉树的层序遍历</title>
    <link href="/lc-0102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86"/>
    <url>/lc-0102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">二叉树：[<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>],<br>    <span class="hljs-number">3</span><br>   / \<br>  <span class="hljs-number">9</span>  <span class="hljs-number">20</span><br>    /  \<br>   <span class="hljs-number">15</span>   <span class="hljs-number">7</span><br><br>返回其层序遍历结果：<br><span class="hljs-string">[</span><br><span class="hljs-string">  [3]</span>,<br><span class="hljs-string">  [9,20]</span>,<br><span class="hljs-string">  [15,7]</span><br>]<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">levelOrder</span><span class="hljs-params">(root *TreeNode)</span> [][]<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> [][]<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br><br>res := <span class="hljs-built_in">make</span>([][]<span class="hljs-keyword">int</span>,<span class="hljs-number">0</span>)<br><br>queue := []*TreeNode&#123;root&#125;<br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span> &#123;<br>l := <span class="hljs-built_in">len</span>(queue)<br>tmp := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>,<span class="hljs-number">0</span>, l)<br><br><span class="hljs-keyword">for</span> i:= <span class="hljs-number">0</span>; i&lt;l; i++ &#123;<br><span class="hljs-keyword">if</span> queue[i].Left != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue,queue[i].Left)<br>&#125;<br><span class="hljs-keyword">if</span> queue[i].Right != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue,queue[i].Right)<br>&#125;<br>tmp = <span class="hljs-built_in">append</span>(tmp, queue[i].Val)<br>&#125;<br><br>queue = queue[l:]<br>res = <span class="hljs-built_in">append</span>(res,tmp)<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><ol><li>使用队列保存待遍历的根节点。</li><li>返回结果是一个二维数组！！<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">levelOrder</span><span class="hljs-params">(root *TreeNode)</span> [][]<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> [][]<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-comment">// 构建二维数组 保存层序遍历结果</span><br>res := <span class="hljs-built_in">make</span>([][]<span class="hljs-keyword">int</span>,<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">// 构建队列，存储每次遍历的根节点</span><br>queue := []*TreeNode&#123;root&#125;<br><br><span class="hljs-comment">// 如果队列不为空</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span> &#123;<br>l := <span class="hljs-built_in">len</span>(queue)<br><span class="hljs-comment">// 动态构建数组保存每一层的节点</span><br><span class="hljs-comment">// tmp := make([]int, 0, len(queue))  -- 此时，len(tmp)=0, 不能使用</span><br>tmp := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>,<span class="hljs-number">0</span>, l)<br><br><span class="hljs-keyword">for</span> i:= <span class="hljs-number">0</span>; i&lt;l; i++ &#123;<br><span class="hljs-keyword">if</span> queue[i].Left != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue,queue[i].Left)<br>&#125;<br><span class="hljs-keyword">if</span> queue[i].Right != <span class="hljs-literal">nil</span> &#123;<br>queue = <span class="hljs-built_in">append</span>(queue,queue[i].Right)<br>&#125;<br>tmp = <span class="hljs-built_in">append</span>(tmp, queue[i].Val)<br>&#125;<br><br><span class="hljs-comment">// 将遍历完的节点出队</span><br>queue = queue[l:]<br><span class="hljs-comment">// 将该层的遍历结果放入结果集的二维数组中</span><br>res = <span class="hljs-built_in">append</span>(res,tmp)<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0098.验证二叉搜索树</title>
    <link href="/lc-0098-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91"/>
    <url>/lc-0098-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。</p><p>有效 二叉搜索树定义如下：</p><p>节点的左子树只包含 小于 当前节点的数。<br>节点的右子树只包含 大于 当前节点的数。<br>所有左子树和右子树自身必须也是二叉搜索树。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]<br>输出：<span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>]<br>输出：<span class="hljs-literal">false</span><br>解释：根节点的值是 <span class="hljs-number">5</span> ，但是右子节点的值是 <span class="hljs-number">4</span> 。<br></code></pre></div></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>二叉搜素树的中序遍历是<strong>单调递增</strong>的有序列表。<br>注意：</p><ol><li>中序遍历的数组需要 len(ans) &gt;= 2 的才能进行比较</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(root *TreeNode)</span> <span class="hljs-title">bool</span></span> &#123;<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    p := root<br>    stack := []*TreeNode&#123;&#125;<br>    ans := []<span class="hljs-keyword">int</span>&#123;&#125;<br>    <span class="hljs-keyword">for</span> p!= <span class="hljs-literal">nil</span> || <span class="hljs-built_in">len</span>(stack)&gt;<span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">if</span> p != <span class="hljs-literal">nil</span> &#123;<br>            stack = <span class="hljs-built_in">append</span>(stack, p)<br>            p = p.Left<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            node := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>            stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>            ans = <span class="hljs-built_in">append</span>(ans, node.Val)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ans) &gt;= <span class="hljs-number">2</span> &#123;<br>                fmt.Println(ans[<span class="hljs-built_in">len</span>(ans)<span class="hljs-number">-2</span>], ans[<span class="hljs-built_in">len</span>(ans)<span class="hljs-number">-1</span>])<br>                <span class="hljs-keyword">if</span> !( ans[<span class="hljs-built_in">len</span>(ans)<span class="hljs-number">-2</span>] &lt; ans[<span class="hljs-built_in">len</span>(ans)<span class="hljs-number">-1</span>]) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>                &#125; <br>            &#125;<br>            p = node.Right<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><h3 id="Golang解法一：中序遍历-使用指针对象指向前一个结点，进行相应的判断"><a href="#Golang解法一：中序遍历-使用指针对象指向前一个结点，进行相应的判断" class="headerlink" title="Golang解法一：中序遍历 - 使用指针对象指向前一个结点，进行相应的判断"></a>Golang解法一：中序遍历 - 使用指针对象指向前一个结点，进行相应的判断</h3><blockquote><p>go语言，指针对象赋值为 <code>var node *TreeNode = nil</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * type TreeNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Left *TreeNode</span><br><span class="hljs-comment"> *     Right *TreeNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(root *TreeNode)</span> <span class="hljs-title">bool</span></span> &#123;<br>    <span class="hljs-comment">// 中序遍历结果为有序遍历 -- 单调递增</span><br>    <span class="hljs-comment">// 栈+指针</span><br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    p := root<br>    stack := []*TreeNode&#123;&#125;<br>    <span class="hljs-comment">// 节点赋值为 nil -- 指针对象为nil</span><br>    <span class="hljs-keyword">var</span> prev *TreeNode = <span class="hljs-literal">nil</span> <br>    <span class="hljs-keyword">for</span> p!= <span class="hljs-literal">nil</span> || <span class="hljs-built_in">len</span>(stack)&gt;<span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">for</span> p != <span class="hljs-literal">nil</span> &#123;<br>            stack = <span class="hljs-built_in">append</span>(stack, p)<br>            p = p.Left<br>        &#125; <br>        p = stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>        stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>        <span class="hljs-keyword">if</span> prev != <span class="hljs-literal">nil</span>  &amp;&amp; p.Val &lt;= prev.Val &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        prev = p<br>        p = p.Right<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="Golang解法二：中序遍历-使用数组存储中序遍历，并进行相应判断"><a href="#Golang解法二：中序遍历-使用数组存储中序遍历，并进行相应判断" class="headerlink" title="Golang解法二：中序遍历 - 使用数组存储中序遍历，并进行相应判断"></a>Golang解法二：中序遍历 - 使用数组存储中序遍历，并进行相应判断</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(root *TreeNode)</span> <span class="hljs-title">bool</span></span> &#123;<br>    <span class="hljs-comment">// 中序遍历结果为有序遍历 -- 单调递增</span><br>    <span class="hljs-comment">// 栈+指针</span><br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    p := root<br>    stack := []*TreeNode&#123;&#125;<br>    ans := []<span class="hljs-keyword">int</span>&#123;&#125;<br>    <span class="hljs-keyword">for</span> p!= <span class="hljs-literal">nil</span> || <span class="hljs-built_in">len</span>(stack)&gt;<span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">if</span> p != <span class="hljs-literal">nil</span> &#123;<br>            stack = <span class="hljs-built_in">append</span>(stack, p)<br>            p = p.Left<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 弹出</span><br>            node := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>            stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>            ans = <span class="hljs-built_in">append</span>(ans, node.Val)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ans) &gt;= <span class="hljs-number">2</span> &#123;<br>                fmt.Println(ans[<span class="hljs-built_in">len</span>(ans)<span class="hljs-number">-2</span>], ans[<span class="hljs-built_in">len</span>(ans)<span class="hljs-number">-1</span>])<br>                <span class="hljs-keyword">if</span> !( ans[<span class="hljs-built_in">len</span>(ans)<span class="hljs-number">-2</span>] &lt; ans[<span class="hljs-built_in">len</span>(ans)<span class="hljs-number">-1</span>]) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>                &#125; <br>            &#125;<br>            p = node.Right<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="java解法-保存遍历的前一个结点，进行判断"><a href="#java解法-保存遍历的前一个结点，进行判断" class="headerlink" title="java解法 - 保存遍历的前一个结点，进行判断"></a>java解法 - 保存遍历的前一个结点，进行判断</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建栈结构</span><br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        TreeNode previous = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">while</span>( root != <span class="hljs-keyword">null</span> || !stack.isEmpty())&#123;<br>            <span class="hljs-keyword">while</span>(root != <span class="hljs-keyword">null</span>)&#123;<br>                stack.push(root);<br>                root = root.left;<br>            &#125;<br>            root = stack.pop();<br>            <span class="hljs-keyword">if</span> (previous != <span class="hljs-keyword">null</span> &amp;&amp; root.val &lt;= previous.val) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            previous = root;<br>            root = root.right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0094.二叉树的中序遍历</title>
    <link href="/lc-0094-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86"/>
    <url>/lc-0094-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个二叉树的根节点 root ，返回它的 中序 遍历。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1,null,2,3]</span><br>输出：<span class="hljs-comment">[1,3,2]</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1]</span><br>输出：<span class="hljs-comment">[1]</span><br></code></pre></div></td></tr></table></figure><p>eg4:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1,2]</span><br>输出：<span class="hljs-comment">[2,1]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="递归实现一"><a href="#递归实现一" class="headerlink" title="递归实现一"></a>递归实现一</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 中序遍历， 队列</span><br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br>ans := []<span class="hljs-keyword">int</span>&#123;&#125;<br><span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &#123;<br>ans = <span class="hljs-built_in">append</span>(ans,inorderTraversal(root.Left)...)<br>&#125;<br>ans = <span class="hljs-built_in">append</span>(ans, root.Val)<br><span class="hljs-keyword">if</span> root.Right != <span class="hljs-literal">nil</span> &#123;<br>ans = <span class="hljs-built_in">append</span>(ans, inorderTraversal(root.Right)...)<br>&#125;<br><span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="递归实现二"><a href="#递归实现二" class="headerlink" title="递归实现二"></a>递归实现二</h3><blockquote><p>注意：指针对象，以及指针取值，取地址。<br>    指针： <code>root *TreeNode</code> : 定义一个指向 TreeNode 类型的指针root，默认指向 nil<br>    指针存放的是地址： <code>&amp;a</code>： 取得 a 变量的地址<br>    指针取值：<code>*root</code>:取得 root指向地址的内容</p></blockquote><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 递归实现</span><br>res := []<span class="hljs-keyword">int</span>&#123;&#125;<br>inoder(root, &amp;res)<br><span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inoder</span><span class="hljs-params">(root *TreeNode, output *[]<span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root != <span class="hljs-literal">nil</span> &#123;<br>inoder(root.Left, output)<br><span class="hljs-comment">// output 是一个 指向 []int 空间的 指针</span><br><span class="hljs-comment">// *output 访问对应的 []int 变量</span><br>*output = <span class="hljs-built_in">append</span>(*output, root.Val)<br>inoder(root.Right, output)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>中序遍历， 指针+栈，每次都将左指针指向的左边界入栈。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 使用栈实现</span><br>res := []<span class="hljs-keyword">int</span>&#123;&#125;<br><span class="hljs-comment">// 创建空栈， 创建节点指针</span><br>stack := []*TreeNode&#123;&#125;<br>p := root<br><br><span class="hljs-comment">// 遍历树</span><br><span class="hljs-keyword">for</span> p != <span class="hljs-literal">nil</span> || <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span>&#123;<br><span class="hljs-keyword">if</span> p != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// 根节点入栈</span><br>stack = <span class="hljs-built_in">append</span>(stack,p)<br><span class="hljs-comment">// 遍历左节点</span><br>p = p.Left<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 根节点出栈</span><br>node := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>res = <span class="hljs-built_in">append</span>(res,node.Val)<br><span class="hljs-comment">// 访问出栈节点的右节点</span><br>p = node.Right<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;&#125;<br>&#125;<br><span class="hljs-comment">// 创建 res</span><br>res := []<span class="hljs-keyword">int</span>&#123;&#125;<br><span class="hljs-comment">// 创建 栈 stack： 保存根节点的左边界</span><br>stack := []*TreeNode&#123;&#125;<br>node := root<br><span class="hljs-comment">// 如果 stack 不为空 或者 当前节点不为空</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> || node != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// 1) 如果当前节点不为空，将其左边界入栈</span><br><span class="hljs-keyword">if</span> node != <span class="hljs-literal">nil</span> &#123;<br>stack = <span class="hljs-built_in">append</span>(stack,node)<br>node = node.Left<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 2) 出栈并打印</span><br>nodeCur := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>res = <span class="hljs-built_in">append</span>(res,nodeCur.Val)<br><span class="hljs-comment">// 对其右子树执行 1)</span><br><span class="hljs-keyword">if</span> nodeCur.Right != <span class="hljs-literal">nil</span> &#123;<br>node = nodeCur.Right<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>小结：</p></blockquote><ol><li>将整棵树看成只有 左边界 的存在。</li><li>遇到一个节点，都将其左边界入栈，否则从栈中弹出节点并打印，再对弹出的节点进行相同的操作。（将其左边界入栈…）</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0092.反转链表 II</title>
    <link href="/lc-0092-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%20II"/>
    <url>/lc-0092-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%20II</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">head</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>], <span class="hljs-attr">left</span> = <span class="hljs-number">2</span>, <span class="hljs-attr">right</span> = <span class="hljs-number">4</span><br>输出：[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>]<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">head</span> = [<span class="hljs-number">5</span>], <span class="hljs-attr">left</span> = <span class="hljs-number">1</span>, <span class="hljs-attr">right</span> = <span class="hljs-number">1</span><br>输出：[<span class="hljs-number">5</span>]<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseBetween</span><span class="hljs-params">(head *ListNode, left <span class="hljs-keyword">int</span>, right <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || right&lt;left&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>newNode := &amp;ListNode&#123;Val:<span class="hljs-number">0</span>,Next:head&#125;<br>pre := newNode<br><span class="hljs-keyword">for</span> cnt:=<span class="hljs-number">0</span>; pre.Next != <span class="hljs-literal">nil</span> &amp;&amp; cnt &lt; left<span class="hljs-number">-1</span>; cnt++ &#123;<br>pre = pre.Next<br>&#125;<br><span class="hljs-keyword">if</span> pre.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br>cur := pre.Next<br><span class="hljs-keyword">for</span> cnt := <span class="hljs-number">0</span>; cnt &lt; right - left; cnt++&#123;<br>curNext := cur.Next<br>cur.Next = cur.Next.Next<br>curNext.Next = pre.Next<br>pre.Next = curNext<br>&#125;<br><span class="hljs-comment">// 由于使用头插法进行节点的移动，因此不需要单独移动cur。注意赋值顺序。</span><br><span class="hljs-keyword">return</span> newNode.Next<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>要点：</p><ol><li>使用虚拟头节点，用于避免讨论多种情况。使代码更简洁</li><li>解法：使用头插法，在使用过程中，由于需要</li><li>关键！！！！<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">if</span> pre.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseBetween</span><span class="hljs-params">(head *ListNode, left <span class="hljs-keyword">int</span>, right <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || right&lt;left&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// 设置虚拟头节点，最后return的时候使用 newNode.Next返回即可。</span><br>newNode := &amp;ListNode&#123;Val:<span class="hljs-number">0</span>,Next:head&#125;<br>pre := newNode<br><span class="hljs-keyword">for</span> cnt:=<span class="hljs-number">0</span>; pre.Next != <span class="hljs-literal">nil</span> &amp;&amp; cnt &lt; left<span class="hljs-number">-1</span>; cnt++ &#123;<br>pre = pre.Next<br>&#125;<br><span class="hljs-keyword">if</span> pre.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br>cur := pre.Next<br><span class="hljs-keyword">for</span> cnt := <span class="hljs-number">0</span>; cnt &lt; right - left; cnt++&#123;<br>curNext := cur.Next<br>cur.Next = cur.Next.Next<br>curNext.Next = pre.Next  <span class="hljs-comment">// next指向pre.Next</span><br>pre.Next = curNext<br>&#125;<br><span class="hljs-comment">// 由于使用头插法进行节点的移动，因此不需要单独移动cur。注意赋值顺序。</span><br><span class="hljs-keyword">return</span> newNode.Next<br><br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0088.合并两个有序数组</title>
    <link href="/lc-0088-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84"/>
    <url>/lc-0088-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。</p><p>请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。</p><p>注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[1,2,3,0,0,0]</span>, m = 3, nums2 = <span class="hljs-comment">[2,5,6]</span>, n = 3<br>输出：<span class="hljs-comment">[1,2,2,3,5,6]</span><br>解释：需要合并 <span class="hljs-comment">[1,2,3]</span> 和 <span class="hljs-comment">[2,5,6]</span> 。<br>合并结果是 <span class="hljs-comment">[1,2,2,3,5,6]</span> ，其中斜体加粗标注的为 nums1 中的元素。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[1]</span>, m = 1, nums2 = <span class="hljs-comment">[]</span>, n = 0<br>输出：<span class="hljs-comment">[1]</span><br>解释：需要合并 <span class="hljs-comment">[1]</span> 和 <span class="hljs-comment">[]</span> 。<br>合并结果是 <span class="hljs-comment">[1]</span> 。<br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[0]</span>, m = 0, nums2 = <span class="hljs-comment">[1]</span>, n = 1<br>输出：<span class="hljs-comment">[1]</span><br>解释：需要合并的数组是 <span class="hljs-comment">[]</span> 和 <span class="hljs-comment">[1]</span> 。<br>合并结果是 <span class="hljs-comment">[1]</span> 。<br>注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">merge</span><span class="hljs-params">(nums1 []<span class="hljs-keyword">int</span>, m <span class="hljs-keyword">int</span>, nums2 []<span class="hljs-keyword">int</span>, n <span class="hljs-keyword">int</span>)</span></span>  &#123;<br><span class="hljs-comment">// 选择排序</span><br>i,j := m<span class="hljs-number">-1</span>, n<span class="hljs-number">-1</span><br><span class="hljs-comment">// 从尾到头遍历nums1</span><br>cur := <span class="hljs-built_in">len</span>(nums1) <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &gt;= <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> nums1[i] &gt; nums2[j] &#123;<br>nums1[cur] = nums1[i]<br>cur--<br>i--<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>nums1[cur] = nums2[j]<br>cur-- <br>j--<br>&#125;<br>&#125;<br><span class="hljs-comment">// 如果nums2中有剩余数字，那么将剩余的数字放到结果中。</span><br><span class="hljs-keyword">for</span> j &gt;= <span class="hljs-number">0</span> &#123;<br>nums1[cur] = nums2[j]<br>cur-- <br>j--<br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>选择排序<br>因为已知两个分组都是已经排好序，倒序遍历结果数组进行合并即可。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">merge</span><span class="hljs-params">(nums1 []<span class="hljs-keyword">int</span>, m <span class="hljs-keyword">int</span>, nums2 []<span class="hljs-keyword">int</span>, n <span class="hljs-keyword">int</span>)</span></span>  &#123;<br><span class="hljs-comment">// 选择排序</span><br>i,j := m<span class="hljs-number">-1</span>, n<span class="hljs-number">-1</span><br><span class="hljs-comment">// 从尾到头遍历nums1</span><br>cur := <span class="hljs-built_in">len</span>(nums1) <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &gt;= <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> nums1[i] &gt; nums2[j] &#123;<br>nums1[cur] = nums1[i]<br>cur--<br>i--<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>nums1[cur] = nums2[j]<br>cur-- <br>j--<br>&#125;<br>&#125;<br><span class="hljs-comment">// 如果nums2中有剩余数字，那么将剩余的数字放到结果中。</span><br><span class="hljs-keyword">for</span> j &gt;= <span class="hljs-number">0</span> &#123;<br>nums1[cur] = nums2[j]<br>cur-- <br>j--<br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0086.分隔链表</title>
    <link href="/lc-0086-%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8"/>
    <url>/lc-0086-%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个链表的头节点 head 和一个特定值 x ，请你对链表进行分隔，使得所有 小于 x 的节点都出现在 大于或等于 x 的节点之前。</p><p>你应当 保留 两个分区中每个节点的初始相对位置。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,4,3,2,5,2]</span>, x = <span class="hljs-number">3</span><br>输出：<span class="hljs-string">[1,2,2,4,3,5]</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[2,1]</span>, x = 2<br>输出：<span class="hljs-comment">[1,2]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">partition</span><span class="hljs-params">(head *ListNode, x <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>smallHead,lagacHead := &amp;ListNode&#123;Val:<span class="hljs-number">0</span>,Next:<span class="hljs-literal">nil</span>&#125;,&amp;ListNode&#123;Val:<span class="hljs-number">0</span>,Next:<span class="hljs-literal">nil</span>&#125;<br>small,lagac := smallHead,lagacHead<br><span class="hljs-keyword">for</span> head != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> head.Val &lt; x &#123;<br>small.Next = head<br>small = small.Next<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>lagac.Next = head<br>lagac = lagac.Next<br>&#125;<br>head = head.Next<br>&#125;<br>lagac.Next = <span class="hljs-literal">nil</span><br>small.Next = lagacHead.Next<br><span class="hljs-keyword">return</span> smallHead.Next<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><ol><li>维护两条链表，一条small，一条lagac</li><li>注意拼接链表的时候，要注意将lagac的链表尾结点置空，否则可能形成环。<figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">partition</span><span class="hljs-params">(head *ListNode, x <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>    <span class="hljs-comment">// 创建链表头节点</span><br>    smallHead,lagacHead := &amp;ListNode&#123;Val:<span class="hljs-number">0</span>,Next:<span class="hljs-literal">nil</span>&#125;,&amp;ListNode&#123;Val:<span class="hljs-number">0</span>,Next:<span class="hljs-literal">nil</span>&#125;<br>    <span class="hljs-comment">// 创建遍历节点</span><br>small,lagac := smallHead,lagacHead<br><span class="hljs-keyword">for</span> head != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> head.Val &lt; x &#123;<br>small.Next = head<br>small = small.Next <span class="hljs-comment">// 移动遍历节点</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>lagac.Next = head<br>lagac = lagac.Next <span class="hljs-comment">// 移动遍历节点</span><br>&#125;<br>head = head.Next<br>&#125;<br><br><span class="hljs-comment">// 拼接 small 和 large 链表</span><br><span class="hljs-comment">// large 尾结点要置空，否则会形成环</span><br>lagac.Next = <span class="hljs-literal">nil</span><br>small.Next = lagacHead.Next <span class="hljs-comment">// 将small的尾节点指向lagac的头节点</span><br><span class="hljs-keyword">return</span> smallHead.Next <span class="hljs-comment">// 返回维护的链表</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0083.删除排序链表中的重复元素</title>
    <link href="/lc-0083-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0"/>
    <url>/lc-0083-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除所有重复的元素，使每个元素 只出现一次 。</p><p>返回同样按升序排列的结果链表。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1,1,2]</span><br>输出：<span class="hljs-comment">[1,2]</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1,1,2,3,3]</span><br>输出：<span class="hljs-comment">[1,2,3]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">for</span> cur := head; cur != <span class="hljs-literal">nil</span> &amp;&amp; cur.Next != <span class="hljs-literal">nil</span> ; &#123;<br><span class="hljs-keyword">if</span> cur.Val == cur.Next.Val &#123;<br>cur.Next = cur.Next.Next<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cur = cur.Next<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> head<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>遍历链表。判断当前元素和下一个元素是否相等，如果相等删除下一个元素。<br><strong>注意：</strong>循环结束条件： cur != nil &amp;&amp; cur.Next != nil</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>    <span class="hljs-comment">// 循环结束条件： cur != nil &amp;&amp; cur.Next != nil</span><br><span class="hljs-keyword">for</span> cur := head; cur != <span class="hljs-literal">nil</span> &amp;&amp; cur.Next != <span class="hljs-literal">nil</span> ; &#123;<br><span class="hljs-keyword">if</span> cur.Val == cur.Next.Val &#123;<br>cur.Next = cur.Next.Next<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 删除结点之后不需要 移动指针。</span><br>cur = cur.Next<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> head<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0075.颜色分类</title>
    <link href="/lc-0075-%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB"/>
    <url>/lc-0075-%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog">输入：nums = <span class="hljs-string">[2,0,2,1,1,0]</span><br>输出：<span class="hljs-string">[0,0,1,1,2,2]</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[2,0,1]</span><br>输出：<span class="hljs-comment">[0,1,2]</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[0]</span><br>输出：<span class="hljs-comment">[0]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sortColors</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>)</span></span>  &#123;<br>left,right,index := <span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(nums)<span class="hljs-number">-1</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> index &lt;= right &#123;<br><span class="hljs-keyword">if</span> nums[index] == <span class="hljs-number">0</span> &#123;<br>nums[left],nums[index] = nums[index],nums[left]<br>left++<br>index++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> nums[index] == <span class="hljs-number">2</span> &#123;<br>nums[right],nums[index] = nums[index],nums[right]<br>right--<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>index++<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>使用三个指针将数组元素进行归类。</p><ul><li>left: </li><li>right: </li><li>index: <figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sortColors</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>)</span></span>  &#123;<br>left,right,index := <span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(nums)<span class="hljs-number">-1</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> index &lt;= right &#123; <span class="hljs-comment">// 循环结束条件</span><br><span class="hljs-keyword">if</span> nums[index] == <span class="hljs-number">0</span> &#123;<br>nums[left],nums[index] = nums[index],nums[left]<br>left++<br>index++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> nums[index] == <span class="hljs-number">2</span> &#123;<br>            nums[right],nums[index] = nums[index],nums[right]<br>            <span class="hljs-comment">// 注意： 交换 index 和 right的时候，index不需要自增加，因为right换过来的数字还需要再进行一次判断。</span><br>right--<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>index++<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0042.接雨水</title>
    <link href="/lc-0042-%E6%8E%A5%E9%9B%A8%E6%B0%B4"/>
    <url>/lc-0042-%E6%8E%A5%E9%9B%A8%E6%B0%B4</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">输入：height = [<span class="hljs-number">0,1,0,2</span>,<span class="hljs-number">1,0,1,3</span>,<span class="hljs-number">2,1,2,1</span>]<br>输出：<span class="hljs-number">6</span><br>解释：上面是由数组 [<span class="hljs-number">0,1,0,2</span>,<span class="hljs-number">1,0,1,3</span>,<span class="hljs-number">2,1,2,1</span>] 表示的高度图，在这种情况下，可以接 <span class="hljs-number">6</span> 个单位的雨水（蓝色部分表示雨水）。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog">输入：height = <span class="hljs-string">[4,2,0,3,2,5]</span><br>输出：<span class="hljs-number">9</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">trap</span><span class="hljs-params">(height []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>res, left, right, maxLeft, maxRight := <span class="hljs-number">0</span>,<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(height)<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> left &lt; right &#123;<br><span class="hljs-keyword">if</span> height[left] &lt;= height[right] &#123;<br><span class="hljs-keyword">if</span> height[left] &gt; maxLeft &#123;<br>maxLeft = height[left]<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>res += maxLeft - height[left]<br>&#125;<br>left++<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> height[right] &gt;= maxRight &#123;<br>maxRight = height[right]<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>res += maxRight - height[right]<br>&#125;<br>right--<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">trap</span><span class="hljs-params">(height []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>res, left, right, maxLeft, maxRight := <span class="hljs-number">0</span>,<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(height)<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> left &lt; right &#123;<br><span class="hljs-keyword">if</span> height[left] &lt;= height[right] &#123;<br><span class="hljs-keyword">if</span> height[left] &gt; maxLeft &#123;<br>maxLeft = height[left]<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>res += maxLeft - height[left]<br>&#125;<br>left++<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> height[right] &gt;= maxRight &#123;<br>maxRight = height[right]<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>res += maxRight - height[right]<br>&#125;<br>right--<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0025.k个一组翻转链表</title>
    <link href="/lc-0025-k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8"/>
    <url>/lc-0025-k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。</p><p>k 是一个正整数，它的值小于或等于链表的长度。</p><p>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>进阶：</p><p>你可以设计一个只使用常数额外空间的算法来解决此问题吗？<br>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span>, k = <span class="hljs-number">2</span><br>输出：<span class="hljs-string">[2,1,4,3,5]</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span>, k = <span class="hljs-number">3</span><br>输出：<span class="hljs-string">[3,2,1,4,5]</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span>, k = <span class="hljs-number">1</span><br>输出：<span class="hljs-string">[1,2,3,4,5]</span><br></code></pre></div></td></tr></table></figure><p>eg4:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1]</span>, k = 1<br>输出：<span class="hljs-comment">[1]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(head *ListNode, k <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>    <span class="hljs-comment">// 假设 List : 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</span><br>    <span class="hljs-comment">//      k = 2</span><br>node := head<br><span class="hljs-keyword">for</span> cnt := <span class="hljs-number">0</span> ; cnt &lt; k ; cnt ++&#123;<span class="hljs-comment">//循环结束 得到 1 -&gt; 2 -&gt; 3</span><br><span class="hljs-keyword">if</span> node == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br>node = node.Next<br>&#125;<br><br><span class="hljs-comment">// 得到新的节点头 2-&gt;1-&gt;3-&gt;4-&gt;5</span><br>newHead := reverseN(head,node)<br><span class="hljs-comment">// 递归查找节点后的链表 node = 3</span><br>head.Next = reverseKGroup(node, k)<br><span class="hljs-comment">// 返回翻转后的节点头 newHead = 2</span><br><span class="hljs-keyword">return</span> newHead<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseN</span><span class="hljs-params">(first,last *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>prev := last<br><span class="hljs-comment">// 1-&gt;2-&gt;3 </span><br><span class="hljs-keyword">for</span> first != last &#123;<br>tmp := first.Next<br>first.Next = prev<br>prev = first<br>first = tmp<br>&#125;<br><span class="hljs-comment">// 2-&gt;1-&gt;3</span><br><span class="hljs-keyword">return</span> prev<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>一层递归<br>递归：遍历 k+1 个节点（不足k个节点直接返回），记录头节点和尾节点（head,node)。翻转 head 和 node-1 之间的链表，得到新的头节点。递归查找node之后的链表。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(head *ListNode, k <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>    <span class="hljs-comment">// 假设 List : 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</span><br>    <span class="hljs-comment">//      k = 2</span><br>node := head<br><span class="hljs-keyword">for</span> cnt := <span class="hljs-number">0</span> ; cnt &lt; k ; cnt ++&#123; <span class="hljs-comment">//循环结束 得到 1 -&gt; 2 -&gt; 3</span><br><span class="hljs-keyword">if</span> node == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br>node = node.Next<br>&#125;<br><br><span class="hljs-comment">// 翻转链表并得到新的节点头 2-&gt;1-&gt;3-&gt;4-&gt;5</span><br>newHead := reverseN(head,node)<br><span class="hljs-comment">// 递归进行查找节点后的链表 node = 3</span><br>head.Next = reverseKGroup(node, k)<br><span class="hljs-comment">// 返回翻转后的节点头 newHead = 2</span><br><span class="hljs-keyword">return</span> newHead<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseN</span><span class="hljs-params">(first,last *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>prev := last<br><span class="hljs-comment">// 1-&gt;2-&gt;3 </span><br><span class="hljs-keyword">for</span> first != last &#123;<br>tmp := first.Next<br>first.Next = prev<br>prev = first<br>first = tmp<br>&#125;<br><span class="hljs-comment">// 2-&gt;1-&gt;3</span><br><span class="hljs-keyword">return</span> prev<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0023.合并K个升序链表</title>
    <link href="/lc-0023-%E5%90%88%E5%B9%B6K%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8"/>
    <url>/lc-0023-%E5%90%88%E5%B9%B6K%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个链表数组，每个链表都已经按升序排列。</p><p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clean">输入：lists = [[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">6</span>]]<br>输出：[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>解释：链表数组如下：<br>[<br>  <span class="hljs-number">1</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>,<br>  <span class="hljs-number">1</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>,<br>  <span class="hljs-number">2</span>-&gt;<span class="hljs-number">6</span><br>]<br>将它们合并到一个有序链表中得到。<br><span class="hljs-number">1</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;<span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：lists = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">输入：lists = <span class="hljs-string">[[]]</span><br>输出：[]<br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mergeKLists</span><span class="hljs-params">(lists []*ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">return</span> merge(lists, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(lists)<span class="hljs-number">-1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">merge</span><span class="hljs-params">(lists []*ListNode, l,r <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">if</span> l == r &#123;<br><span class="hljs-keyword">return</span> lists[l]<br>&#125;<br><span class="hljs-keyword">if</span> l &gt; r &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>mid := (l+r)/<span class="hljs-number">2</span><br><span class="hljs-keyword">return</span> mergeTwoList(merge(lists, l, mid), merge(lists, mid+<span class="hljs-number">1</span>, r))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mergeTwoList</span><span class="hljs-params">(a,b *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>head := &amp;ListNode&#123;Val:<span class="hljs-number">0</span>, Next:<span class="hljs-literal">nil</span>&#125;<br>tail, aPtr,bPtr := head, a, b<br><span class="hljs-keyword">for</span> aPtr != <span class="hljs-literal">nil</span> &amp;&amp; bPtr != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> aPtr.Val &lt; bPtr.Val &#123;<br>tail.Next = aPtr<br>aPtr = aPtr.Next<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tail.Next = bPtr<br>bPtr = bPtr.Next<br>&#125;<br>tail = tail.Next<br>&#125;<br><span class="hljs-keyword">if</span> aPtr != <span class="hljs-literal">nil</span> &#123;<br>tail.Next = aPtr<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tail.Next = bPtr<br>&#125;<br><span class="hljs-keyword">return</span> head.Next<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>方法一：分而治之<br>tips:<br>    1. 将分组内容两两进行合并。<br>    2. 递归调用 merge(a,b *ListNode) *ListNode 方法</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mergeKLists</span><span class="hljs-params">(lists []*ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">return</span> merge(lists, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(lists)<span class="hljs-number">-1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">merge</span><span class="hljs-params">(lists []*ListNode, l,r <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">if</span> l == r &#123;<br><span class="hljs-keyword">return</span> lists[l]<br>&#125;<br><span class="hljs-keyword">if</span> l &gt; r &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>mid := (l+r)/<span class="hljs-number">2</span><br><span class="hljs-keyword">return</span> mergeTwoList(merge(lists, l, mid), merge(lists, mid+<span class="hljs-number">1</span>, r))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mergeTwoList</span><span class="hljs-params">(a,b *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>head := &amp;ListNode&#123;Val:<span class="hljs-number">0</span>, Next:<span class="hljs-literal">nil</span>&#125;<br>tail, aPtr,bPtr := head, a, b<br><span class="hljs-keyword">for</span> aPtr != <span class="hljs-literal">nil</span> &amp;&amp; bPtr != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> aPtr.Val &lt; bPtr.Val &#123;<br>tail.Next = aPtr<br>aPtr = aPtr.Next<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tail.Next = bPtr<br>bPtr = bPtr.Next<br>&#125;<br>tail = tail.Next<br>&#125;<br><span class="hljs-keyword">if</span> aPtr != <span class="hljs-literal">nil</span> &#123;<br>tail.Next = aPtr<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tail.Next = bPtr<br>&#125;<br><span class="hljs-keyword">return</span> head.Next<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0021.合并两个有序链表</title>
    <link href="/lc-0021-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8"/>
    <url>/lc-0021-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[1,2,4]</span>, l2 = <span class="hljs-comment">[1,3,4]</span><br>输出：<span class="hljs-comment">[1,1,2,3,4,4]</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[]</span>, l2 = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[]</span>, l2 = <span class="hljs-comment">[0]</span><br>输出：<span class="hljs-comment">[0]</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(l1 *ListNode, l2 *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-comment">// 递归</span><br><span class="hljs-keyword">if</span> l1 == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> l2<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> l2 == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> l1<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> l1.Val &lt; l2.Val &#123;<br>l1.Next = mergeTwoLists(l1.Next,l2)<br><span class="hljs-keyword">return</span> l1<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>l2.Next = mergeTwoLists(l1,l2.Next)<br><span class="hljs-keyword">return</span> l2<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(l1 *ListNode, l2 *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-comment">// 递归</span><br><span class="hljs-keyword">if</span> l1 == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> l2<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> l2 == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> l1<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> l1.Val &lt; l2.Val &#123; <span class="hljs-comment">// 如果l1.Val &lt; l2.Val, 合并 l1.Next 和 l2，并返回l1</span><br>l1.Next = mergeTwoLists(l1.Next,l2)<br><span class="hljs-keyword">return</span> l1<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>l2.Next = mergeTwoLists(l1,l2.Next) <span class="hljs-comment">// 如果 l1.Val &gt;= l2.Val, 合并 l2.Next 和 l1，并返回l2</span><br><span class="hljs-keyword">return</span> l2<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>        <span class="hljs-comment">// 链表有序，合并</span><br>        ListNode head = <span class="hljs-keyword">new</span> ListNode();<br>        ListNode point = head;<br>        <span class="hljs-keyword">while</span>(l1!=<span class="hljs-keyword">null</span> &amp;&amp; l2!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(l1.val &lt; l2.val)&#123;<br>                point.next = l1;<br>                l1 = l1.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                point.next = l2;<br>                l2 = l2.next;<br>            &#125;<br>            point = point.next;<br>        &#125;<br>        <span class="hljs-comment">// 将其中一个链表剩余的部分拼接到结果链表中</span><br>        <span class="hljs-keyword">if</span>(l1 != <span class="hljs-keyword">null</span>)&#123;<br>            point.next = l1;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(l2 != <span class="hljs-keyword">null</span>)&#123;<br>            point.next = l2;<br>        &#125;<br>        <span class="hljs-comment">// 返回结果</span><br>        <span class="hljs-keyword">return</span> head.next;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0020.有效括号</title>
    <link href="/lc-0022-%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7"/>
    <url>/lc-0022-%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;()&quot;</span><br>输出：<span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;()[]&#123;&#125;&quot;</span><br>输出：<span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;(]&quot;</span><br>输出：<span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><p>eg4:</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;([)]&quot;</span><br>输出：<span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValid</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-comment">// 空字符串直接返回 true</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>stack := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">rune</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> s &#123;<br><span class="hljs-keyword">if</span> (v == <span class="hljs-string">&#x27;[&#x27;</span>) || (v == <span class="hljs-string">&#x27;(&#x27;</span>) || (v == <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, v)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((v == <span class="hljs-string">&#x27;]&#x27;</span>) &amp;&amp; <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> &amp;&amp; stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;[&#x27;</span>) ||<br>((v == <span class="hljs-string">&#x27;)&#x27;</span>) &amp;&amp; <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> &amp;&amp; stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;(&#x27;</span>) ||<br>((v == <span class="hljs-string">&#x27;&#125;&#x27;</span>) &amp;&amp; <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> &amp;&amp; stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><p>要点： </p><ol><li>创建栈： <code>stack := make([]rune,0)</code></li><li>左括号压栈： <code>stack = append(stack,v)</code></li><li>出栈条件：判断v为右括号，栈不为空，栈顶元素为左括号。 <code>((v == &#39;)&#39;) &amp;&amp; len(stack) &gt; 0 &amp;&amp; stack[len(stack)-1] == &#39;(&#39;)</code><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValid</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-comment">// 空字符串直接返回 true</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>stack := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">rune</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> s &#123;<br><span class="hljs-keyword">if</span> (v == <span class="hljs-string">&#x27;[&#x27;</span>) || (v == <span class="hljs-string">&#x27;(&#x27;</span>) || (v == <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br>stack = <span class="hljs-built_in">append</span>(stack, v)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((v == <span class="hljs-string">&#x27;]&#x27;</span>) &amp;&amp; <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> &amp;&amp; stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;[&#x27;</span>) ||<br>((v == <span class="hljs-string">&#x27;)&#x27;</span>) &amp;&amp; <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> &amp;&amp; stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;(&#x27;</span>) ||<br>((v == <span class="hljs-string">&#x27;&#125;&#x27;</span>) &amp;&amp; <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> &amp;&amp; stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br>stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lc-0011.盛最多水的容器</title>
    <link href="/lc-0011-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8"/>
    <url>/lc-0011-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211030211858.png" alt="image-20211030211857824"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>eg1:</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">输入：[<span class="hljs-number">1,8,6,2</span>,<span class="hljs-number">5,4,8,3</span>,<span class="hljs-number">7</span>]<br>输出：<span class="hljs-number">49</span> <br>解释：图中垂直线代表输入数组 [<span class="hljs-number">1,8,6,2</span>,<span class="hljs-number">5,4,8,3</span>,<span class="hljs-number">7</span>]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 <span class="hljs-number">49</span>。<br></code></pre></div></td></tr></table></figure><p>eg2:</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">输入：height = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>eg3:</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog">输入：height = <span class="hljs-string">[4,3,2,1,4]</span><br>输出：<span class="hljs-number">16</span><br></code></pre></div></td></tr></table></figure><p>eg4:</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">输入：height = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><br></code></pre></div></td></tr></table></figure><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树专题</title>
    <link href="/2022/leetcode-BinaryTree/"/>
    <url>/2022/leetcode-BinaryTree/</url>
    
    <content type="html"><![CDATA[<p>三种题型</p><h1 id="搜索类"><a href="#搜索类" class="headerlink" title="搜索类"></a>搜索类</h1><p>搜索类只有两种解法，那就是 DFS 和 BFS。几乎所有的搜索类题目都可以方便地使用递归来实现<br>所有搜索类的题目只要把握三个核心点，即<strong>开始点</strong>，<strong>结束点</strong>和<strong>目标</strong>即可。</p><h2 id="DFS搜索"><a href="#DFS搜索" class="headerlink" title="DFS搜索"></a>DFS搜索</h2><p>DFS 搜索类的基本套路就是从入口开始做 dfs，然后在 dfs 内部判断是否是结束点，这个结束点通常是叶子节点或空节点，关于结束这个话题我们放在七个技巧中的边界部分介绍，如果目标是一个基本值（比如数字）直接返回或者使用一个全局变量记录即可，如果是一个数组，则可以通过扩展参数的技巧来完成，关于扩展参数，会在七个技巧中的参数扩展部分介绍。 这基本就是搜索问题的全部了，当你读完后面的七个技巧，回头再回来看这个会更清晰。</p><h3 id="DFS搜索模板"><a href="#DFS搜索模板" class="headerlink" title="DFS搜索模板"></a>DFS搜索模板</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">root, path</span>):</span><br>    <span class="hljs-comment"># 如果是空结点</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <span class="hljs-keyword">return</span><br>    <span class="hljs-comment"># 如果是叶子节点</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root.Left <span class="hljs-keyword">and</span> root.Right: <span class="hljs-keyword">return</span><br>    <span class="hljs-comment"># 记录路径</span><br>    path.append(root)<br>    <span class="hljs-comment"># 主要处理逻辑（前序遍历）</span><br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-comment"># 递归左子树和右子树</span><br>    dfs(root.Left, path)<br>    dfs(root.Right, path)<br><br>    <span class="hljs-comment"># 弹出path中的最后一个结点</span><br>    <span class="hljs-comment"># 需要弹出，不然会错误计算。</span><br>    <span class="hljs-comment"># 比如对于如下树：</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">              5</span><br><span class="hljs-string">             / \</span><br><span class="hljs-string">            4   8</span><br><span class="hljs-string">           /   / \</span><br><span class="hljs-string">          11  13  4</span><br><span class="hljs-string">         /  \    / \</span><br><span class="hljs-string">        7    2  5   1</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 如果不 pop，那么 5 -&gt; 4 -&gt; 11 -&gt; 2 这条路径会变成 5 -&gt; 4 -&gt; 11 -&gt; 7 -&gt; 2，其 7 被错误地添加到了 path</span><br><br>    path.pop()<br>    <span class="hljs-comment"># 逻辑也可以写这里，此时是后序遍历</span><br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-comment"># ...</span><br><br>    <span class="hljs-keyword">return</span> 你想返回的数据<br></code></pre></div></td></tr></table></figure><p>例题：</p><p><a href="https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">剑指 Offer 34. 二叉树中和为某一值的路径</a> :开始点是根节点， 结束点是叶子节点，目标就是路径。<br><a href="https://leetcode-cn.com/problems/longest-zigzag-path-in-a-binary-tree/">1372. 二叉树中的最长交错路径</a>:从任意节点开始，到任意节点结束的所有交错路径全部搜索出来，挑选出最长的</p><h2 id="BFS搜索"><a href="#BFS搜索" class="headerlink" title="BFS搜索"></a>BFS搜索</h2><p>大多数题目是求距离，套用两种模板即可。</p><h3 id="BFS搜索模板"><a href="#BFS搜索模板" class="headerlink" title="BFS搜索模板"></a>BFS搜索模板</h3><ol><li>标记层：求距离某结点距离等于（大于/小于）k的所有结点。需要记录是第几步。<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solutin</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bfs</span>(<span class="hljs-params">k</span>):</span><br>        <span class="hljs-comment"># 使用双端队列，而不是数组。双端队列的底层实现为链表,数组从头部删除元素的时间复杂度为O(n),双端队列删除头部元素为O(1)</span><br>        queue = collections.deque([root])<br>        <span class="hljs-comment"># 记录层数</span><br>        steps = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 需要返回的结点</span><br>        ans = []<br>        <span class="hljs-comment"># 队列不为空,生命不止!</span><br>        <span class="hljs-keyword">while</span> queue:<br>            size = <span class="hljs-built_in">len</span>(queue)<br>            <span class="hljs-comment"># 遍历当前层所有节点</span><br>            <span class="hljs-keyword">for</span> _ <span class="hljs-built_in">int</span> <span class="hljs-built_in">range</span>(size):<br>                node = queue.popleft()<br>                <span class="hljs-keyword">if</span> (step == k) ans.append(node)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    queue.append(node.right)<br>                <span class="hljs-keyword">if</span> node.left:<br>                    queue.append(node.left)<br>                <br>            <span class="hljs-comment"># 遍历完当前层所有的节点后 steps + 1</span><br>            steps += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure></li><li>非标记层：寻找最短距离/路径<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bfs</span>(<span class="hljs-params">k</span>):</span><br>        queue = colletions.deque([root])<br><br>        <span class="hljs-keyword">while</span> queue:<br>            node = queue.popleft()<br>            <span class="hljs-keyword">if</span> (node 是我们要找的) <span class="hljs-keyword">return</span> node<br>            <span class="hljs-keyword">if</span> node.right:<br>                queue.append(node.right)<br>            <span class="hljs-keyword">if</span> node.left:<br>                queue.append(node.left)<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure></li></ol><h1 id="构建类"><a href="#构建类" class="headerlink" title="构建类"></a>构建类</h1><p>构建类分为: 普通二叉树的构建 和 二叉搜索树的构建</p><h2 id="普通二叉树的构建"><a href="#普通二叉树的构建" class="headerlink" title="普通二叉树的构建"></a>普通二叉树的构建</h2><p>普通二叉树的构建:</p><ol><li>给定两种DFS遍历的结果数组,构建出原始的树结构.<a href="https://lucifer.ren/blog/2020/02/08/%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%93%E9%A2%98/">构造二叉树系列</a></li><li>给定BFS遍历的结果数组,构建出原始的树结构.<a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/">剑指 Offer 37. 序列化二叉树</a></li><li>描述一种场景，让你构造一个符合条件的二叉树.<a href="https://leetcode-cn.com/problems/maximum-binary-tree/">654. 最大二叉树</a></li></ol><h2 id="二叉搜索树的构建"><a href="#二叉搜索树的构建" class="headerlink" title="二叉搜索树的构建"></a>二叉搜索树的构建</h2><p>普通二叉树无法区分左右子树,只知道根节点.需要<code>两种遍历序列数组</code>才能构建.<br><code>二叉搜索树的根节点大于所有左子树的值,且小于所有右子树的值.</code>所以可以根据一种遍历序列构建出二叉搜索树.<a href="https://leetcode-cn.com/problems/construct-binary-search-tree-from-preorder-traversal/">1008. 前序遍历构造二叉搜索树</a></p><h1 id="修改类"><a href="#修改类" class="headerlink" title="修改类"></a>修改类</h1><p>修改类题目基于搜索算法,分为两种基本类型.</p><h2 id="题目要求的修改"><a href="#题目要求的修改" class="headerlink" title="题目要求的修改"></a>题目要求的修改</h2><p>指明增加/删除节点,或者是修改节点的值或者指向.</p><p>例题:</p><ol><li><p>修改节点的指向:<br><a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/">116. 填充每个节点的下一个右侧节点指针</a> 修改指针类型,BFS时顺便记录上一次访问的同层节点,然后增加一个指针. — 解法:套用<code>带层的BFS模板</code></p></li><li><p>增加和删除节点.<br><a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/">450. 删除二叉搜索树中的节点</a> 和 <a href="https://leetcode-cn.com/problems/trim-a-binary-search-tree/">669. 修剪二叉搜索树</a> — 解法:<code>后序遍历+虚拟节点</code></p></li></ol><blockquote><p>实际工程中,可以不删除节点,给节点做一个标记,表示已被删除 – 软删除</p></blockquote><h2 id="算法需要-自己修改"><a href="#算法需要-自己修改" class="headerlink" title="算法需要,自己修改"></a>算法需要,自己修改</h2><p>为了方便计算,自己增加指针之类的.</p><p>例题:</p><p><a href="https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree/">863. 二叉树中所有距离为 K 的结点</a> –解法:通过修改树的节点类,增加一个指向父节点的引用 parent, 将问题转为距离目标节点一定距离的问题, 用<code>带层的BFS模板</code></p><p>动态语言可以直接添加属性(parent指针),静态语言不允许(比如java)需要增加一个新的类定义 或者 使用字典来实现. key 是 node 引用, value 是想记录的东西,比如这里的parent节点.<br>例如:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span></span>&#123;<br>    Map&lt;TreeNode, TreeNode&gt; parent;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreenNode node, TreeNode parent)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(node != <span class="hljs-keyword">null</span>)&#123;<br>            parent.put(node, parent);<br>            dfs(node.left, node);<br>            dfs(node.right, node);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="四个概念"><a href="#四个概念" class="headerlink" title="四个概念"></a>四个概念</h1><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><h3 id="性质："><a href="#性质：" class="headerlink" title="性质："></a>性质：</h3><ul><li>没有键值相等的节点</li><li>若左子树不为空，则左子树上所有节点的值均小于它的根节点的值</li><li>若右子树不为空，则右子树上所有节点的值均大于它的根节点的值</li><li>其左、右子树也是二叉排序树</li></ul><blockquote><p>对于二叉排序树，常规操作有<code>插入，查找，删除，找父节点，求最大值，求最小值</code></p></blockquote><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li>二叉搜索树的中序遍历是有序的。</li></ul><p>例题：</p><ul><li><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></li><li><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a>  – 进行中序遍历，一边遍历一边判断遍历结果是否是单调递增的</li><li><a href="https://leetcode-cn.com/problems/binary-search-tree-iterator/">173. 二叉搜索树迭代器</a></li><li><a href="https://leetcode-cn.com/problems/count-univalue-subtrees/">250. 统计同值子树</a></li></ul><h2 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h2><p>一棵深度为k的，有n个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号。如果编号为 i （1&lt;=i&lt;=n） 的结点与<code>满二叉树</code>中编号为 i 的结点在二叉树中的位置相同，则称此二叉树为完全二叉树。</p><p>完全二叉树编号结构如下图：<br><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211122143337.png" alt="image-20211122143328511"><br>这样，父子之间的关系可以通过编号求出。</p><p>已知某一结点编号为 i, 其左孩子结点为 <code>2*i</code>, 右孩子结点编号为 <code>2*i+1</code>，父亲结点为 <code>i/2</code>.</p><p>例题：<br><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/">222.完全二叉树的结点个数</a><br><a href="https://leetcode-cn.com/problems/maximum-width-of-binary-tree/">662.二叉树最大宽度</a><br><a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/">剑指 Offer 37. 序列化二叉树</a></p><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>要明白路径的概念，以及如何解决这种题，只需要看一个题目就好了 <a href="https://github.com/azl397985856/leetcode/blob/master/problems/124.binary-tree-maximum-path-sum.md">124.二叉树中的最大路径和</a></p><p>类似题目：<a href="https://github.com/azl397985856/leetcode/blob/master/problems/113.path-sum-ii.md">113.路径综合Ⅰ</a></p><h2 id="距离"><a href="#距离" class="headerlink" title="距离"></a>距离</h2><p>和路径类似，距离也是一个相似且频繁出现的一个考点，并且二者都是<code>搜索类题目</code>的考点。原因就在于<code>最短路径就是距离</code>，而树的最短路径就是边的数目。</p><p>练习题目：</p><ul><li><a href="https://leetcode-cn.com/problems/sum-of-distances-in-tree/description/">834.树中距离之和</a></li><li><a href="https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree/description/">863.二叉树中所有距离为 K 的结点</a></li></ul><h1 id="七个技巧"><a href="#七个技巧" class="headerlink" title="七个技巧"></a>七个技巧</h1><p>这七个技巧全部是基于 dfs 的，bfs 掌握了模板就行，基本没有什么技巧可言。</p><h2 id="dfs-root"><a href="#dfs-root" class="headerlink" title="dfs(root)"></a>dfs(root)</h2><h2 id="单-双递归"><a href="#单-双递归" class="headerlink" title="单/双递归"></a>单/双递归</h2><p>当题目中包含<code>从任意节点开始xxx或者所有xxx</code>的说法时，考虑使用双递归。<br>如果递归中存在<code>重复计算</code>，可以使用<code>双递归+记忆化</code>或者直接单递归。</p><ul><li><a href="https://leetcode-cn.com/problems/paths-with-sum-lcci/">面试题 04.12. 求和路径</a></li><li><a href="https://leetcode-cn.com/problems/binary-tree-tilt/description/">563.二叉树的坡度</a></li></ul><blockquote><p>双递归的基本套路就是一个主递归函数和一个内部递归函数。主递归函数负责计算以某一个节点开始的 xxxx，内部递归函数负责计算 xxxx，这样就实现了以所有节点开始的 xxxx。</p></blockquote><p>典型的加法双递归模板：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs_inner</span>(<span class="hljs-params">root</span>):</span><br>    <span class="hljs-comment"># 这里写逻辑，前序遍历</span><br>    dfs_inner(root.left)<br>    dfs_inner(root.right)<br>    <span class="hljs-comment"># 这里写逻辑，后序遍历</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs_main</span>(<span class="hljs-params">root</span>):</span><br>    <span class="hljs-keyword">return</span> dfs_inner(root) + dfs_main(root.left) + dfs_main(root.right)<br></code></pre></div></td></tr></table></figure><h2 id="前后遍历"><a href="#前后遍历" class="headerlink" title="前后遍历"></a>前后遍历</h2><p>和链表一样， 要掌握树的前后序，也只需要记住一句话就好了。那就是<strong>如果是前序遍历，那么你可以想象上面的节点都处理好了，怎么处理的不用管。相应地如果是后序遍历，那么你可以想象下面的树都处理好了，怎么处理的不用管。</strong>这句话的正确性也是毋庸置疑。</p><ul><li>自顶向下就是在每个递归层级，首先访问节点来计算一些值，并在递归调用函数时将这些值传递到子节点，一般是通过参数传到子树中。</li><li>自底向上是另一种常见的递归方法，首先对所有子节点递归地调用函数，然后根据返回值和根节点本身的值得到答案。 – 通常使用后序遍历，需要返回子树结果</li></ul><p>关于前后序的思维技巧，可以参考 <a href="https://lucifer.ren/blog/2020/11/08/linked-list/">这个文章</a> 的前后序部分。</p><h3 id="总结下经验："><a href="#总结下经验：" class="headerlink" title="总结下经验："></a>总结下经验：</h3><ul><li>大多数树的题使用后序遍历比较简单，并且大多需要依赖左右子树的返回值。比如 <a href="https://leetcode-cn.com/problems/count-good-nodes-in-binary-tree/">1448. 统计二叉树中好节点的数目</a></li><li>不多的问题需要前序遍历，而前序遍历通常要结合参数扩展技巧。比如 <a href="https://leetcode-cn.com/problems/sum-of-root-to-leaf-binary-numbers/">1022. 从根到叶的二进制数之和</a></li><li>如果你能使用参数和节点本身的值来决定什么应该是传递给它子节点的参数，那就用前序遍历。</li><li>如果对于树中的任意一个节点，如果你知道它子节点的答案，你能计算出当前节点的答案，那就用后序遍历。</li><li>如果遇到二叉搜索树则考虑中序遍历</li></ul><h2 id="虚拟节点"><a href="#虚拟节点" class="headerlink" title="虚拟节点"></a>虚拟节点</h2><p>是的！不仅仅链表有虚拟节点的技巧，树也是一样。关于这点大家可能比较容易忽视。</p><p>回忆一下链表的虚拟指针的技巧，我们通常在什么时候才会使用？</p><p>其中一种情况是链表的头会被修改。这个时候通常需要一个虚拟指针来做新的头指针，这样就不需要考虑第一个指针的问题了（因为此时第一个指针变成了我们的虚拟指针，而虚拟指针是不用参与题目运算的）。树也是一样，当你需要对树的头节点（在树中我们称之为根节点）进行修改的时候， 就可以考虑使用虚拟指针的技巧了。<br>另外一种是题目需要返回树中间的某个节点（不是返回根节点）。实际上也可借助虚拟节点。由于我上面提到的指针的操作，实际上，你可以新建一个虚拟头，然后让虚拟头在恰当的时候（刚好指向需要返回的节点）断开连接，这样我们就可以返回虚拟头的 next 就 ok 了。<br>更多关于虚拟指针的技巧可以参考<a href="https://lucifer.ren/blog/2020/11/08/linked-list/">这个文章</a> 的虚拟头部分。</p><p>例题：</p><ul><li><a href="https://leetcode-cn.com/problems/binary-tree-pruning/">814. 二叉树剪枝</a> – 虚拟头节点+后序遍历返回子树节点和</li><li><a href="https://leetcode-cn.com/problems/delete-leaves-with-a-given-value/">1325. 删除给定值的叶子节点</a> – 虚拟头节点+后序遍历+参数扩展</li></ul><p>树的删除和链表删除类似，<strong>树的删除需要父节点</strong>，因此这里的技巧和链表类似，记录一下当前节点的父节点即可，并通过<strong>参数扩展</strong>向下传递。</p><h2 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h2><p>树有三种题型，对于不同的题型其实边界考虑的侧重点也是不一样的。</p><ul><li>搜索类 （空节点、叶子节点）</li><li>构建类</li><li>修改类<h3 id="搜索类-1"><a href="#搜索类-1" class="headerlink" title="搜索类"></a>搜索类</h3>边界情况有两类：</li></ul><ol><li>空节点<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">root</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;是空节点，需要返回合适的值&#x27;</span>)<br>    <span class="hljs-comment"># ...其他逻辑，前序遍历 or 后序遍历</span><br></code></pre></div></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dfs</span><span class="hljs-params">(root *TreeNode)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        fmt.Print(<span class="hljs-string">&quot;是空节点，需要返回合适的值&quot;</span>)<br>    &#125;<br>    <span class="hljs-comment">// 继续处理其他逻辑,前序遍历</span><br>    dfs(root.Left)<br>    dfs(root.Right)<br>    <span class="hljs-comment">//  后序遍历</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>叶子节点<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">root</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;是空节点，需要返回合适的值&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root.left <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> root.right: <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;是叶子节点，需要返回合适值&#x27;</span>)<br>    <span class="hljs-comment"># ...其他逻辑，前序遍历 or 后序遍历</span><br></code></pre></div></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dfs</span><span class="hljs-params">(root *TreeNode)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        fmt.Print(<span class="hljs-string">&quot;是空节点,需要返回合适的值&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">if</span> root.Left == <span class="hljs-literal">nil</span> &amp;&amp; root.Right == <span class="hljs-literal">nil</span> &#123;<br>        fmt.Print(<span class="hljs-string">&quot;是叶子节点,需要返回合适的值&quot;</span>)<br>    &#125;<br>    <span class="hljs-comment">// ...其他逻辑，前序遍历 or 后序遍历</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="构建类-1"><a href="#构建类-1" class="headerlink" title="构建类"></a>构建类</h3></li><li>参数扩展的边界<br><a href="https://leetcode-cn.com/problems/construct-binary-search-tree-from-preorder-traversal/">1008.根据前序遍历构建二叉搜索树</a></li><li>虚拟节点<br>除了搜索类的技巧可以用于构建类外，也可以考虑用我上面的讲的虚拟节点。<h3 id="修改类-1"><a href="#修改类-1" class="headerlink" title="修改类"></a>修改类</h3>???</li></ol><h2 id="参数扩展大法"><a href="#参数扩展大法" class="headerlink" title="参数扩展大法"></a>参数扩展大法</h2><p>如果不需要考虑参数扩展,最简单的dfs通常是:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">root</span>):</span><br>    <span class="hljs-comment">#do something</span><br></code></pre></div></td></tr></table></figure><p>有时候,dfs需要携带其他有用的信息.有以下三种典型情况:</p><ol><li><p>携带父亲或者爷爷节点信息:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">root, parent</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <span class="hljs-keyword">return</span><br>    dfs(root.left, root)<br>    dfs(root.right, root)<br></code></pre></div></td></tr></table></figure></li><li><p>携带路径信息,可以是路径和或者具体的路径数组等</p></li></ol><ul><li>路径和:<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">root, path_sum</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>        <span class="hljs-comment"># 这里可以拿到根到叶子的路径和</span><br>        <span class="hljs-keyword">return</span> path_sum<br>    dfs(root.left, path_sum + root.val)<br>    dfs(root.right, path_sum + root.val)<br></code></pre></div></td></tr></table></figure></li><li>路径:<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">root, path</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>        <span class="hljs-comment"># 这里可以拿到根到叶子的路径</span><br>        <span class="hljs-keyword">return</span> path<br>        path.append(root.val)<br>        dfs(root.left, path)<br>        dfs(root.right, path)<br>        <span class="hljs-comment"># 撤销</span><br>        path.pop()<br></code></pre></div></td></tr></table></figure></li></ul><p>例题:<br><a href="https://leetcode-cn.com/problems/paths-with-sum-lcci/">面试题 04.12. 求和路径</a></p><ol start="3"><li>二叉搜索树的搜索题大多数都需要扩展参考，甚至怎么扩展都是固定的。<blockquote><p>二叉搜索树的搜索总是将最大值和最小值通过参数传递到左右子树，类似 dfs(root, lower, upper)，然后在递归过程更新最大和最小值即可。这里需要注意的是 (lower, upper) 是的一个左右都开放的区间。</p></blockquote></li></ol><p>使用 扩展参数大法中 <code>左右边界法</code><br><a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/">783. 二叉搜索树节点最小距离</a><br><a href="https://leetcode-cn.com/problems/maximum-difference-between-node-and-ancestor/">1026. 节点与其祖先之间的最大差值</a></p><p>模板:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">minDiffInBST</span>(<span class="hljs-params">self, root</span>):</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">root, lower, upper</span>):</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>                <span class="hljs-keyword">return</span> upper - lower<br>            left = dfs(root.left, lower, node.val)<br>            right = dfs(root.right, node.val, upper)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(left, right)<br>        <span class="hljs-keyword">return</span> dfs(root, <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;-inf&#x27;</span>),<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;-inf&#x27;</span>))<br></code></pre></div></td></tr></table></figure><h2 id="返回元组-列表"><a href="#返回元组-列表" class="headerlink" title="返回元组/列表"></a>返回元组/列表</h2><p>通常dfs返回值是一个单值,但为了方便计算,有时候会返回一个数组或者元组.</p><ol><li>返回元组</li></ol><p><a href="https://leetcode-cn.com/problems/smallest-subtree-with-all-the-deepest-nodes/">865.具有所有最深节点的最小子树</a>  – dfs返回深度,通过比较左右子树的深度来定位答案(最深节点的位置)</p><p>返回单值,用来定位最深节点位置,但是865要求返回节点,所以需要返回同时返回根节点</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">subtreeWithAllDeepest</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">node, d</span>):</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node: <span class="hljs-keyword">return</span> d<br>            l_d = dfs(node.left, d + <span class="hljs-number">1</span>)<br>            r_d = dfs(node.right, d + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> l_d &gt;= r_d: <span class="hljs-keyword">return</span> l_d<br>            <span class="hljs-keyword">return</span> r_d<br>        <span class="hljs-keyword">return</span> dfs(root, -<span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><p>题目要求返回的是树节点的引用啊，这个时候应该考虑返回元祖，即<strong>除了返回深度，也要把节点给返回</strong>。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">subtreeWithAllDeepest</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; TreeNode:</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">node, depth</span>):</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node: <span class="hljs-keyword">return</span> (node, depth)<br>            l,l_d = dfs(node.left, depth+<span class="hljs-number">1</span>)<br>            r, r_d = dfs(node.right, depth+<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> l_d &gt;= r_d: <span class="hljs-keyword">return</span> (node,l_d)<br>            <span class="hljs-keyword">return</span> (r, r_d)<br>        <span class="hljs-keyword">return</span> dfs(root, -<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br></code></pre></div></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">subtreeWithAllDeepest</span><span class="hljs-params">(root *TreeNode)</span> *<span class="hljs-title">TreeNode</span></span> &#123;<br>ans,_ := dfs(root,<span class="hljs-number">-1</span>)<br><span class="hljs-keyword">return</span> ans<br>&#125;<br><span class="hljs-comment">// dfs 返回 root 节点以及最深路径</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dfs</span><span class="hljs-params">(root *TreeNode, depth <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(*TreeNode, <span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> root, depth<br>&#125;<br>l, l_d := dfs(root.Left, depth+<span class="hljs-number">1</span>)<br>r, r_d := dfs(root.Right, depth+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> l_d == r_d &#123;<br><span class="hljs-keyword">return</span> root, l_d<br>&#125; <br><span class="hljs-keyword">if</span> l_d &gt; r_d &#123;<br><span class="hljs-keyword">return</span> l, l_d<br>&#125;<br><span class="hljs-keyword">return</span> r, r_d<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>返回数组<br>需要用到笛卡尔积的时候，考虑使用返回数组的方式。<blockquote><p>一般来说，如果需要使用笛卡尔积的情况还是比较容易看出的。另外一个不太准确的技巧是，如果题目有”所有可能“，”所有情况“，可以考虑使用此技巧。</p></blockquote></li></ol><p>典型例题：<br><a href="https://leetcode-cn.com/problems/number-of-good-leaf-nodes-pairs/description/">1530.好叶子节点对的数量</a><br><a href="https://leetcode-cn.com/problems/all-possible-full-binary-trees/description/">894. 所有可能的满二叉树</a></p><p>练习题：<br><a href="https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/">剑指 Offer 55 - I. 二叉树的深度</a><br><a href="https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">剑指 Offer 34. 二叉树中和为某一值的路径</a><br><a href="https://github.com/azl397985856/leetcode/blob/master/problems/101.symmetric-tree.md">101. 对称二叉树</a><br><a href="https://github.com/azl397985856/leetcode/blob/master/problems/226.invert-binary-tree.md">226. 翻转二叉树</a><br><a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/">543. 二叉树的直径</a><br><a href="https://leetcode-cn.com/problems/maximum-width-of-binary-tree/">662. 二叉树最大宽度</a><br><a href="https://leetcode-cn.com/problems/flip-binary-tree-to-match-preorder-traversal/">971. 翻转二叉树以匹配先序遍历</a><br><a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/">987. 二叉树的垂序遍历</a><br><a href="https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree/">863. 二叉树中所有距离为 K 的结点</a><br><a href="https://leetcode-cn.com/problems/successor-lcci/">面试题 04.06. 后继者</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>lc</tag>
      
      <tag>二叉树</tag>
      
      <tag>知识点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-TIDB-study-03-Oracle%E7%9A%84%E7%94%A8%E6%88%B7%E5%88%9B%E5%BB%BA%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%9D%83%E9%99%90/"/>
    <url>/2022/DataBase-TIDB-study-03-Oracle%E7%9A%84%E7%94%A8%E6%88%B7%E5%88%9B%E5%BB%BA%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<p>以下内容来自John_Baker博客下的文章<a href="https://www.cnblogs.com/buxingzhelyd/p/7865194.html">Oracle用户创建及权限设置</a></p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><h2 id="权限："><a href="#权限：" class="headerlink" title="权限："></a>权限：</h2><p><code>create session</code> : 允许用户登录数据库权限</p><p><code>create table</code> : 允许用户创建表权限</p><p><code>unlimited tablespace</code> : 允许用户在其他表空间随意建表</p><h2 id="角色："><a href="#角色：" class="headerlink" title="角色："></a>角色：</h2><p>connect  </p><p>resource</p><p>dba</p><h2 id="角色介绍"><a href="#角色介绍" class="headerlink" title="角色介绍"></a>角色介绍</h2><ol><li><p>CONNECT角色： –是授予最终用户的典型权利，最基本的权力，能够连接到ORACLE数据库中，并在对其他用户的表有访问权限时，做SELECT、UPDATE、INSERTT等操作。</p><div class="hljs code-wrapper"><pre><code> ALTER SESSION --修改会话 CREATE CLUSTER --建立聚簇 CREATE DATABASE LINK --建立数据库链接 CREATE SEQUENCE --建立序列 CREATE SESSION --建立会话 CREATE SYNONYM --建立同义词 CREATE VIEW --建立视图RESOURCE角色： --是授予开发人员的，能在自己的方案中创建表、序列、视图等。 CREATE CLUSTER --建立聚簇 CREATE PROCEDURE --建立过程 CREATE SEQUENCE --建立序列 CREATE TABLE --建表 CREATE TRIGGER --建立触发器 CREATE TYPE --建立类型</code></pre></div></li><li><p>DBA角色，是授予系统管理员的，拥有该角色的用户就能成为系统管理员了，它拥有所有的系统权限</p></li></ol><h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">#sqlplus <span class="hljs-operator">/</span>nolog<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> conn <span class="hljs-operator">/</span> <span class="hljs-keyword">as</span> sysdba;<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> username identified <span class="hljs-keyword">by</span> password  <span class="hljs-comment">--username/password都是用户自定义</span><br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">grant</span> dba <span class="hljs-keyword">to</span> username;<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> conn username<span class="hljs-operator">/</span>password<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> user_sys_privs;<br></code></pre></div></td></tr></table></figure><h1 id="展开了解"><a href="#展开了解" class="headerlink" title="展开了解"></a>展开了解</h1><p>我们将从创建Oracle用户权限表开始谈起，然后讲解登陆等一般性动作，使大家对Oracle用户权限表有个深入的了解。</p><h2 id="一、创建"><a href="#一、创建" class="headerlink" title="一、创建"></a>一、创建</h2><p><code>sys;</code> –系统管理员，拥有最高权限<br><code>system;</code> –本地管理员，次高权限<br><code>scott;</code> –普通用户，密码默认为tiger,默认未解锁</p><p>oracle有三个默认的用户名和密码~<br>1.用户名:sys密码:change_on_install<br>2.用户名:system密码:manager<br>3.用户名:scott密码:tiger</p><h2 id="二、登陆"><a href="#二、登陆" class="headerlink" title="二、登陆"></a>二、登陆</h2><p><code>sqlplus / as sysdba</code>; –登陆sys帐户<br><code>sqlplus sys as sysdba</code>; –登陆sys帐户<br><code>sqlplus scott/tiger;</code> –登陆普通用户scott</p><h2 id="三、管理用户"><a href="#三、管理用户" class="headerlink" title="三、管理用户"></a>三、管理用户</h2><p><code>create user zhangsan;</code> –在管理员帐户下，创建用户zhangsan<br><code>alert user scott identified by tiger;</code> –修改密码<br><code>drop user 用户名 cascade;</code>  //加上cascade则将用户连同其创建的东西全部删除</p><h2 id="四、授予权限"><a href="#四、授予权限" class="headerlink" title="四、授予权限"></a>四、授予权限</h2><p>1.默认的普通用户scott默认未解锁，不能进行那个使用，新建的用户也没有任何权限，必须授予权限</p><p><code>grant create session to zhangsan;</code> –授予zhangsan用户创建session的权限，即登陆权限，允许用户登录数据库<br><code>grant unlimited tablespace to zhangsan;</code> –授予zhangsan用户使用表空间的权限<br><code>grant create table to zhangsan;</code>  –授予创建表的权限<br><code>grante drop table to zhangsan;</code>  –授予删除表的权限<br><code>grant insert table to zhangsan;</code>  –插入表的权限<br><code>grant update table to zhangsan;</code>  –修改表的权限<br><code>grant all to public;</code> –这条比较重要，授予所有权限(all)给所有用户(public)</p><p>2.oralce对权限管理比较严谨，普通用户之间也是默认不能互相访问的，需要互相授权<br><code>grant select on tablename to zhangsan;</code> –授予zhangsan用户查看指定表的权限<br><code>grant drop on tablename to zhangsan;</code> –授予删除表的权限<br><code>grant insert on tablename to zhangsan;</code> –授予插入的权限<br><code>grant update on tablename to zhangsan;</code> –授予修改表的权限</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">--授予对指定表特定字段的插入和修改权限，注意，只能是insert和update</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">insert</span>(id) <span class="hljs-keyword">on</span> tablename <span class="hljs-keyword">to</span> zhangsan;<br><span class="hljs-keyword">grant</span> update(id) <span class="hljs-keyword">on</span> tablename <span class="hljs-keyword">to</span> zhangsan;  <br></code></pre></div></td></tr></table></figure><p><code>grant alert all table to zhangsan;</code> –授予zhangsan用户alert任意表的权限</p><h2 id="五、撤销权限"><a href="#五、撤销权限" class="headerlink" title="五、撤销权限"></a>五、撤销权限</h2><p>基本语法同grant,关键字为revoke</p><h2 id="六、查看权限"><a href="#六、查看权限" class="headerlink" title="六、查看权限"></a>六、查看权限</h2><p><code>select * from user_sys_privs;</code>//查看当前用户所有权限<br><code>select * from user_tab_privs;</code>//查看所用用户对表的权限</p><h2 id="七、操作表的用户的表"><a href="#七、操作表的用户的表" class="headerlink" title="七、操作表的用户的表"></a>七、操作表的用户的表</h2><p><code>select * from zhangsan.tablename</code></p><h2 id="八、权限传递"><a href="#八、权限传递" class="headerlink" title="八、权限传递"></a>八、权限传递</h2><p>即用户A将权限授予B，B可以将操作的权限再授予C，命令如下：<br><code>grant alert table on tablename to zhangsan with admin option;</code>//关键字 with admin option<br><code>grant alert table on tablename to zhangsan with grant option;</code>//关键字 with grant option效果和admin类似</p><h2 id="九、角色"><a href="#九、角色" class="headerlink" title="九、角色"></a>九、角色</h2><p>角色即权限的集合，可以把一个角色授予给用户<br><code>create role myrole;</code>//创建角色<br><code>grant create session to myrole;</code>//将创建session的权限授予myrole<br><code>grant myrole to zhangsan;</code>//授予zhangsan用户myrole的角色<br><code>drop role myrole;</code>删除角色</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>03-Oracle的基本操作</title>
    <link href="/2022/DataBase-TIDB-study-03-Oracle%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/DataBase-TIDB-study-03-Oracle%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>oracle 用户创建以及相关权限看：<a href="https://www.cnblogs.com/buxingzhelyd/p/7865194.html">John_Baker博客下的文章</a></p><p>转载：<br>作者：JYRoy <a href="https://www.cnblogs.com/jyroy/p/11347847.html">https://www.cnblogs.com/jyroy/p/11347847.html</a></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">--创建表空间</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span>space itheima<br>datafile <span class="hljs-string">&#x27;I:\oracle\table\itheima.dbf&#x27;</span><br>size <span class="hljs-number">100</span>m<br>autoextend <span class="hljs-keyword">on</span><br>next <span class="hljs-number">10</span>m;<br><span class="hljs-comment">--删除表空间</span><br><span class="hljs-keyword">drop</span> tablespace itheima;<br><br><span class="hljs-comment">--创建用户</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> itheima<br>identified <span class="hljs-keyword">by</span> itheima<br><span class="hljs-keyword">default</span> tablespace itheima;<br><br><span class="hljs-comment">--给用户授权</span><br><span class="hljs-comment">--oracle数据库中常用角色</span><br><span class="hljs-keyword">connect</span> <span class="hljs-comment">--连接角色</span><br>resource <span class="hljs-comment">--开发者角色</span><br>dba <span class="hljs-comment">--超级管理员角色</span><br><br><span class="hljs-comment">--给itheima角色授予dba角色</span><br><span class="hljs-keyword">grant</span> dba <span class="hljs-keyword">to</span> itheima;<br><br><span class="hljs-comment">--切换到itheima用户下</span><br><span class="hljs-comment">--session-&gt;logoff-&gt;logon</span><br><br><span class="hljs-comment">--创建一个person表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> person(<br>       pid number(<span class="hljs-number">20</span>),<br>       pname varchar2(<span class="hljs-number">10</span>)<br>);<br><br><br><span class="hljs-comment">--修改表结构</span><br><span class="hljs-comment">--添加一列</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> person <span class="hljs-keyword">add</span> gender number(<span class="hljs-number">1</span>);<br><span class="hljs-comment">--修改列的类型</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> person modify gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>);<br><span class="hljs-comment">--修改列名称</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> person rename <span class="hljs-keyword">column</span> gender <span class="hljs-keyword">to</span> sex;<br><span class="hljs-comment">--删除一列</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> person <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> sex;<br><br><span class="hljs-comment">--查询表中记录</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> person;<br><span class="hljs-comment">--添加一条记录</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person (pid, pname) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;小明&#x27;</span>);<br><span class="hljs-keyword">commit</span>;<br><span class="hljs-comment">--修改一条记录</span><br>update person <span class="hljs-keyword">set</span> pname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;小马&#x27;</span> <span class="hljs-keyword">where</span> pid <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">commit</span>;<br><br><span class="hljs-comment">--三个删除</span><br><span class="hljs-comment">--删除表中全部记录</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> person;<br><span class="hljs-comment">--删除表结构</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> person;<br><span class="hljs-comment">--先删除表，再创建表</span><br><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> person;<br><br><span class="hljs-comment">--序列，默认从1开始，依次递增，主要用来给主键赋值使用</span><br><span class="hljs-comment">--序列不真的属于一张表，但是可以逻辑和表做绑定</span><br><span class="hljs-comment">--dual：虚表，只是为了补全语法，没有任何意义</span><br><span class="hljs-keyword">create</span> sequence s_person;<br><span class="hljs-keyword">select</span> s_person.nextval <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> s_person.currval <span class="hljs-keyword">from</span> dual;<br><br><span class="hljs-comment">--添加一条记录</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person (pid, pname) <span class="hljs-keyword">values</span> (s_person.nextval, <span class="hljs-string">&#x27;小明&#x27;</span>);<br><span class="hljs-keyword">commit</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> person;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>SQL数据库</tag>
      
      <tag>MySQL管理之道，性能调优，高可用与监控（第二版）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-RDBMS的事务</title>
    <link href="/2022/DataBase-TIDB-study-02-TiDB%E7%9A%84%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/"/>
    <url>/2022/DataBase-TIDB-study-02-TiDB%E7%9A%84%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/</url>
    
    <content type="html"><![CDATA[<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li>[三篇文章了解 TiDB 技术内幕 - 说存储]: <a href="https://pingcap.com/zh/blog/tidb-internal-1">https://pingcap.com/zh/blog/tidb-internal-1</a></li><li>[三篇文章了解 TiDB 技术内幕 - 谈调度]: <a href="https://pingcap.com/zh/blog/tidb-internal-3">https://pingcap.com/zh/blog/tidb-internal-3</a></li><li>[三篇文章了解 TiDB 技术内幕 - 谈计算]: <a href="https://pingcap.com/zh/blog/tidb-internal-2">https://pingcap.com/zh/blog/tidb-internal-2</a></li></ul><h1 id="1-存储相关"><a href="#1-存储相关" class="headerlink" title="1.存储相关"></a>1.存储相关</h1><h2 id="1-1-TiKV-的数据存储模型为：Key-Value"><a href="#1-1-TiKV-的数据存储模型为：Key-Value" class="headerlink" title="1.1 TiKV 的数据存储模型为：Key-Value"></a>1.1 TiKV 的数据存储模型为：Key-Value</h2><p>TiKV 的选择是 Key-Value 模型，并且提供有序遍历方法。简单来讲，可以将 TiKV 看做一个巨大的 Map，其中 Key 和 Value 都是原始的 Byte 数组，在这个 Map 中，Key 按照 Byte 数组总的原始二进制比特位比较顺序排列。<br>两个要点：</p><ol><li>这是一个巨大的 Map，也就是存储的是 Key-Value pair</li><li>Key 的二进制有序。可以 Seek 到某一个 Key 的位置，然后不断调用 Next 方法以递增的方法获取比这个 Key 大的 Key-Value</li></ol><h2 id="1-2-TiKV-和磁盘的中介-单机存储引擎：RocksDB"><a href="#1-2-TiKV-和磁盘的中介-单机存储引擎：RocksDB" class="headerlink" title="1.2 TiKV 和磁盘的中介 单机存储引擎：RocksDB"></a>1.2 TiKV 和磁盘的中介 单机存储引擎：RocksDB</h2><p>TiKV将数据保存在RocksDB中，具体写入磁盘由 RocksDB 负责。<br>任何持久化的存储引擎，数据终归要保存在磁盘上，TiKV 也不例外。但是 TiKV <strong>没有选择直接向磁盘上写数据</strong>，而是把数据保存在 RocksDB 中，具体的数据落地由 RocksDB 负责。<br>这里可以简单的认为 RocksDB 是一个单机的 Key-Value Map。</p><h2 id="1-3-Raft-一致性协议"><a href="#1-3-Raft-一致性协议" class="headerlink" title="1.3 Raft: 一致性协议"></a>1.3 Raft: 一致性协议</h2><p>需要保证单机失效的情况下，数据不丢失，不出错。<br>简单来说，我们需要想办法把数据复制到多台机器上，这样一台机器挂了，我们还有其他的机器上的副本；复杂来说，我们还需要这个复制方案是可靠、高效并且能处理副本失效的情况。</p><p>Raft 提供的重要功能:<br>       1. Leader 选举<br>              2. 成员变更<br>              3. 日志复制</p><p>TiKV 使用 Raft 做数据复制。每个数据变更都会落地为一条 Raft 日志，通过 Raft 的日志复制功能，将数据安全可靠的同步到 Group 的多数节点中。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211104141534.png" alt="image-20211104141148685"></p><p>通过单机的 RocksDB，我们可以将数据快速地存储在磁盘上；通过 Raft，我们可以将数据复制到多台机器上，以防单机失效。</p><h2 id="1-4-Region"><a href="#1-4-Region" class="headerlink" title="1.4 Region"></a>1.4 Region</h2><p>TiKV 将整个 Key-Value 空间分成很多段，每一段是一系列连续的 Key，我们将每一段叫做一个 Region。<br>每一个 Region 都可以用 StartKey 到 EndKey 这样一个左闭右开区间来描述。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211105005912.png" alt="image-20211104165428622"></p><p>将数据划分成 Region 后，TiKV做了两件事：</p><ul><li>以 Region 为单位，将数据分散在集群中所有的节点上，并且尽量保证每个节点上服务的 Region 数量差不多</li><li>以 Region 为单位做 Raft 的复制和成员管理</li></ul><p>先看第一点，数据按照 Key 切分成很多 Region，每个 Region 的数据<strong>只会保存在一个节点上面</strong>。我们的系统会有一个组件（<strong>大概是PD组件</strong>）来负责将 Region 尽可能均匀的散布在集群中所有的节点上，这样一方面实现了<strong>存储容量的水平扩展</strong>（增加新的结点后，会自动将其他节点上的 Region 调度过来），另一方面也实现了<strong>负载均衡</strong>（不会出现某个节点有很多数据，其他节点上没什么数据的情况）。同时为了保证上层客户端能够访问所需要的数据，我们的系统中也<strong>会有一个组件记录 Region 在节点上面的分布情况</strong>，也就是通过任意一个 Key 就能查询到这个 Key 在哪个 Region 中，以及这个 Region 目前在哪个节点上。至于是哪个组件负责这两项工作，会在后续介绍。</p><p>对于第二点，TiKV 是以 Region 为单位做数据的复制，也就是<strong>一个 Region 的数据会保存多个副本</strong>，我们将每一个副本叫做一个 Replica。<strong>Replica 之间是通过 Raft 来保持数据的一致</strong>（终于提到了 Raft），一个 Region 的多个 Replica 会保存在不同的节点上，构成一个 Raft Group。其中<strong>一个 Replica 会作为这个 Group 的 Leader</strong>，其他的 Replica 作为 Follower。<strong>所有的读和写都是通过 Leader 进行，再由 Leader 复制给 Follower。</strong></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211105005939.png" alt="image-20211104170302115"></p><ol><li>以 Region 为单位做数据的分散和复制。</li><li>一个 Region 会保存多个副本 Replica。多个副本构成一个 Raft Group。</li><li>一个 Raft Group 中，通过 Raft 协议选举出一个 Leader，其他作为 Follower。</li><li>所有的读和写都是通过 Leader 进行的，再由 Leader 复制给 Follower。</li></ol><p>通过此架构，使得TiDB具备一定容灾能力：一个TiKV节点异常，会通过 raft协议重新选举出一个 Leader，并通过 raft_log 进行数据的恢复。</p><h2 id="1-5-MVCC"><a href="#1-5-MVCC" class="headerlink" title="1.5 MVCC"></a>1.5 MVCC</h2><p>TiKV 实现了多版本控制。</p><blockquote><p>设想这样的场景，两个 Client 同时去修改一个 Key 的 Value，如果<strong>没有 MVCC，就需要对数据上锁</strong>，在分布式场景下，可能会带来性能以及死锁问题。</p></blockquote><p>TiKV 的 MVCC 实现是通过在 Key 后面添加 Version 来实现.</p><p>没有 MVCC 之前，可以把 TiKV 看做这样的：</p><figure class="highlight xl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xl">K<span class="hljs-function"><span class="hljs-title">ey1</span> -&gt;</span> Value<br>K<span class="hljs-function"><span class="hljs-title">ey2</span> -&gt;</span> Value<br>……<br>K<span class="hljs-function"><span class="hljs-title">eyN</span> -&gt;</span> Value<br></code></pre></div></td></tr></table></figure><p>有了 MVCC 之后，TiKV 的 Key 排列是这样的:</p><figure class="highlight xl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xl">K<span class="hljs-function"><span class="hljs-title">ey1</span>-Version3 -&gt;</span> Value<br>K<span class="hljs-function"><span class="hljs-title">ey1</span>-Version2 -&gt;</span> Value<br>K<span class="hljs-function"><span class="hljs-title">ey1</span>-Version1 -&gt;</span> Value<br>……<br>K<span class="hljs-function"><span class="hljs-title">ey2</span>-Version4 -&gt;</span> Value<br>K<span class="hljs-function"><span class="hljs-title">ey2</span>-Version3 -&gt;</span> Value<br>K<span class="hljs-function"><span class="hljs-title">ey2</span>-Version2 -&gt;</span> Value<br>K<span class="hljs-function"><span class="hljs-title">ey2</span>-Version1 -&gt;</span> Value<br>……<br>K<span class="hljs-function"><span class="hljs-title">eyN</span>-Version2 -&gt;</span> Value<br>K<span class="hljs-function"><span class="hljs-title">eyN</span>-Version1 -&gt;</span> Value<br></code></pre></div></td></tr></table></figure><h2 id="1-6-事务采用-Percolator-模型"><a href="#1-6-事务采用-Percolator-模型" class="headerlink" title="1.6 事务采用 Percolator 模型"></a>1.6 事务采用 Percolator 模型</h2><p>TiKV 的事务采用乐观锁，在执行过程中，不会写写冲突，只有在提交过程中，才会做冲突检测。冲突的双方中，较早完成提交的一方会写入成功，另一方会尝试重新执行整个事务。</p><p>在业务写入冲突不严重的情况下，这种模型的性能会很好。</p><h1 id="2-PD-调度-TiKV"><a href="#2-PD-调度-TiKV" class="headerlink" title="2. PD 调度 TiKV"></a>2. PD 调度 TiKV</h1><p>调度做的三件事情：</p><ul><li>增加一个 Replica</li><li>删除一个 Replica</li><li>将 Leader 角色在一个 Raft Group 的不同 Replica 之间 transfer</li></ul><p>Raft 协议能够满足这三种需求，通过 AddReplica、RemoveReplica、TransferLeader这三个命令。</p><p>PD 与 TiKV 节点之间通过心跳机制保持连接。</p><h1 id="3-TiDB-server-解析表，存到TiKV中"><a href="#3-TiDB-server-解析表，存到TiKV中" class="headerlink" title="3. TiDB-server 解析表，存到TiKV中"></a>3. TiDB-server 解析表，存到TiKV中</h1><p>用户的 SQL 请求会直接或者通过 Load Balancer 发送到 tidb-server，tidb-server 会解析 MySQL Protocol Packet，获取请求内容，然后做语法解析、查询计划制定和优化、执行查询计划获取和处理数据。数据全部存储在 TiKV 集群中，所以在这个过程中 tidb-server 需要和 tikv-server 交互，获取数据。最后 tidb-server 需要将查询结果返回给用户。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211105005930.png" alt="image-20211105005901975"></p><p>对于一个 Table，需要存储的数据包括三部分：</p><ol><li>表的元信息</li><li>Table 中的 Row</li><li>索引数据</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>SQL数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-RDBMS的事务</title>
    <link href="/2022/DataBase-TIDB-study-02-RDBMS%E7%9A%84%E4%BA%8B%E5%8A%A1/"/>
    <url>/2022/DataBase-TIDB-study-02-RDBMS%E7%9A%84%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="事务的概念"><a href="#事务的概念" class="headerlink" title="事务的概念"></a>事务的概念</h2><p>关系型数据库的事务是指：ACID（原子性、隔离性、一致性、持久性）。<br>在RDBMS中，事务用来保证一组相关操作单元要么全部成功，要么全部失败。<br><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211029094332.png" alt="事务的概念"></p><h2 id="事务的实现"><a href="#事务的实现" class="headerlink" title="事务的实现"></a>事务的实现</h2><p>使用<strong>日志先行</strong>的方式，保证事务的可快速和持久运行。即，<strong>在写数据之前，需要先写日志。</strong></p><p><code>innodb_flush_log_at_trx_commit</code>参数控制事务提交时，将日志缓冲区的事务日志写入磁盘。</p><p><code>innodb_flush_log_at_trx_commit=0</code>:log buffer将每秒一次地写入log file中，并且log file的flush(刷到磁盘)操作同时进行。该模式下在事务提交的时候，不会主动触发写入磁盘的操作。<br><code>innodb_flush_log_at_trx_commit=1</code>:每次事务提交时MySQL都会把log buffer的数据写入log file，并且flush(刷到磁盘)中去，该模式为系统默认。<br><code>innodb_flush_log_at_trx_commit=2</code>:每次事务提交时MySQL都会把log buffer的数据写入log file，但是flush(刷到磁盘)操作并不会同时进行。该模式下，MySQL会每秒执行一次 flush(刷到磁盘)操作。</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>当设置为0，该模式速度最快，但不太安全，mysqld进程的崩溃会导致上一秒钟所有事务数据的丢失。<br>当设置为1，该模式是最安全的， 但也是最慢的一种方式。在mysqld 服务崩溃或者服务器主机crash的情况下，binary log 只有可能丢失最多一个语句或者一个事务。。<br>当设置为2，该模式速度较快，也比0安全，只有在操作系统崩溃或者系统断电的情况下，上一秒钟所有事务数据才可能丢失</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211029100148.png" alt="事务的实现"></p><h3 id="redo操作以及手动开启日志"><a href="#redo操作以及手动开启日志" class="headerlink" title="redo操作以及手动开启日志"></a>redo操作以及手动开启日志</h3><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211029100524.png" alt="redo操作以及手动开启日志"></p><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p>InnoDB有四种隔离级别：Read Uncommitted、Read Committed、Repeatable Read、Serializable。</p><h3 id="读写可能的五种不确定情况"><a href="#读写可能的五种不确定情况" class="headerlink" title="读写可能的五种不确定情况"></a>读写可能的五种不确定情况</h3><ul><li>更新丢失：</li><li>脏读（数据未提交，但是被其他事务读到了。针对未提交数据）：两个事务，事务A修改数据且未提交，事务B中途读到该修改的数据，事务A进行回滚，事务B读到的数据是脏的。</li><li>不可重复读（同一个事务两次读取数据不一致。针对修改操作）：一个事务两次重复读取同一行数据，得到不同的结果。</li><li>幻读（在一个事务的操作中发现了未被操作的数据。针对增删操作）：一个事务两次读取，读取数据集不一致。</li></ul><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211029101849.png" alt="image-20211029101847847"></p><h3 id="四种隔离级别"><a href="#四种隔离级别" class="headerlink" title="四种隔离级别"></a>四种隔离级别</h3><p>READ_UNCOMMITTED<br>读未提交，即能够读取到没有被提交的数据，所以很明显这个级别的隔离机制无法解决脏读、不可重复读、幻读中的任何一种。<br>READ_COMMITTED<br>已提交读，即能够读到那些已经提交的数据，能够防止脏读，但是无法解决不可重复读和幻读的问题。<br>REPEATABLE_READ<br>重复读取，即在数据读出来之后加锁，类似”select * from XXX for update”，明确数据读取出来就是为了更新用的，所以要加一把锁，防止别人修改它。REPEATABLE_READ的意思也类似，读取了一条数据，这个事务不结束，别的事务就不可以改这条记录，这样就解决了脏读、不可重复读的问题，但是幻读的问题还是无法解决。<br>Read、Serializable<br>串行化/序列化。最高的事务隔离级别，不管多少事务，挨个运行完一个事务的所有子事务之后才可以执行另外一个事务里面的所有子事务，这样就解决了脏读、不可重复读和幻读的问题了。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211029104821.png" alt="事务的隔离级别"></p><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>加锁</th></tr></thead><tbody><tr><td>读未提交</td><td>有</td><td>有</td><td>有</td><td>写锁</td></tr><tr><td>读已提交</td><td>无</td><td>有</td><td>有</td><td>读锁+写锁</td></tr><tr><td>重复读</td><td>无</td><td>无</td><td>有</td><td>读锁+写锁</td></tr><tr><td>序列化</td><td>无</td><td>无</td><td>无</td><td>读锁+写锁+GAP锁</td></tr></tbody></table><blockquote><p>注意：<br>Repeatable read的读锁会一直到事务结束才释放；<br>Read committed的读锁不等到事务结束，而是读取完成后立即释放。</p></blockquote><p><em>传统数据库解决并发控制的手段还有mvcc等。</em></p><h3 id="乐观锁、悲观锁"><a href="#乐观锁、悲观锁" class="headerlink" title="乐观锁、悲观锁"></a>乐观锁、悲观锁</h3><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/349445778">https://zhuanlan.zhihu.com/p/349445778</a></p><ul><li>乐观锁：适合读多写少的情况。</li><li>悲观锁：遇到长事务、其他事务需要进行长时间的锁等待。</li></ul><p>– 删除20211029110254图片链接:<a href="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211029110254.png">https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211029110254.png</a></p><p>乐观锁案例：<br><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211029110504.png" alt="乐观锁案例"></p><p>悲观锁案例：<br><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211029110619.png" alt="悲观锁案例"></p><h2 id="MySQL中MVCC及其实现"><a href="#MySQL中MVCC及其实现" class="headerlink" title="MySQL中MVCC及其实现"></a>MySQL中MVCC及其实现</h2><p>参考：<a href="https://www.cnblogs.com/xuwc/p/13873611.html">https://www.cnblogs.com/xuwc/p/13873611.html</a></p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><h4 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC?"></a>MVCC?</h4><p>MVCC：多版本并发控制(Multi-Version COncurrency Control)。顾名思义，处理并发操作，提高并发能力的技术。<br>一般在DBMS（数据库管理系统）中，实现对数据库的并发访问，在编程语言中实现事务内存。</p><blockquote><p>早期数据库，只有读读之间可以鬓发，读写、写读、写写都要阻塞。<br>引入多版本（MVCC）之后，只有写写之间相互阻塞，其他三种操作可并行。可以大幅度提高InnoDB的并发度。</p></blockquote><p>在内部实现中，与<code>Postgres</code>在数据行上实现多版本不同，<code>InnoDB</code>是在undolog中实现的，通过undolog可以找回数据的历史版本。找回的数据历史版本可以提供给用户读(按照隔离级别的定义，有些读请求只能看到比较老的数据版本)，也可以在回滚的时候覆盖数据页上的数据。在InnoDB内部中，会记录一个全局的活跃读写事务数组，其主要用来判断事务的可见性。</p><p>MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读</p><h4 id="当前读和快照读"><a href="#当前读和快照读" class="headerlink" title="当前读和快照读?"></a>当前读和快照读?</h4><p>MySQL InnoDB 下的当前读和快照读?</p><ul><li>当前读<br>  是指读取记录的最新版本，并对当前的读取的记录进行<strong>加锁</strong>，使得版本其他并发事务不能修改当前事务。<br>  类似于 <code>select lock in share mode</code>(共享锁)，<code>select for update/insert/delete</code>（排他锁）这些操作都是一种当前读。</li><li>快照读<br>  是指不加锁的非阻塞读，实现方式是基于MVCC，所以读到的不一定是数据的最新版本，可能是之前的历史版本。<br>  快照读的前提是<strong>隔离级别不是串行级别</strong>，串行级别下的快照读<strong>会退化成当前读</strong>；之所以出现快照读的情况，是基于提高并发性能的考虑。<br>  可以认为MVCC是行锁的一种变种。在很多情况下避免加锁操作，降低开销。</li></ul><p>比较</p><ul><li>MVCC是一个理想概念，“维持一个数据的多个版本，使得读写操作不那么冲突。”</li><li>在MySQL实现MVCC的方式是：快照读，而当前读就是悲观锁的具体实现。</li><li>说的再细致一些，快照读本身也是一个抽象概念，再深入研究。MVCC模型在MySQL中的具体实现则是由 <strong>3个隐式字段</strong>，undo日志 ，Read View 等去完成的。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>SQL数据库</tag>
      
      <tag>MySQL管理之道，性能调优，高可用与监控（第二版）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01.TIDB安装</title>
    <link href="/01-TIDB%E5%AE%89%E8%A3%85"/>
    <url>/01-TIDB%E5%AE%89%E8%A3%85</url>
    
    <content type="html"><![CDATA[<h2 id="TiDB部署"><a href="#TiDB部署" class="headerlink" title="TiDB部署"></a>TiDB部署</h2><p>官方文档：<a href="https://docs.pingcap.com/zh/tidb/v4.0/quick-start-with-tidb#Linux">https://docs.pingcap.com/zh/tidb/v4.0/quick-start-with-tidb#Linux</a><br>参考链接：<a href="https://zhuanlan.zhihu.com/p/342785395">https://zhuanlan.zhihu.com/p/342785395</a></p><h3 id="TiDB-关键字"><a href="#TiDB-关键字" class="headerlink" title="TiDB 关键字"></a>TiDB 关键字</h3><ul><li>分布式关系型数据库 （以集群方式部署/安装）</li><li>兼容 MySQL5.7 （。。。Oracle..案例很少）</li><li>支持HTAP（在线事务处理和在线分析处理）</li><li>对金融行业支持良好，高可用、强一致（Raft）和大数据场景</li></ul><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>TiDB 集群组件中的几个部分：</p><ul><li><strong>PD</strong>：Palcement Driver, 总控节点。<br>  负责集群的整体调度&amp;全局ID、全局时间戳TSO(中心化授时)的生成。 — 全局时钟的实现。</li><li><strong>TiKV</strong> ： TiDB的存储层。<br>  分布式事务型的键值数据库，满足ACID事务，使用Raft协议保证多副本一致性，而且存储统计数据。</li><li><strong>TiFalsh</strong>：HTAP形态的关键组件。<br>  是TiKV的列存扩展，在提供良好隔离性的同时，兼顾了强一致性。</li><li><strong>Monitor</strong>：TiDB 监控组件。</li></ul><h3 id="单机部署实验环境"><a href="#单机部署实验环境" class="headerlink" title="单机部署实验环境"></a>单机部署实验环境</h3><p>TiDB快速部署方式有2种：</p><ol><li>使用 tiup 工具执行 <code>Tiup Playground</code> 快速部署本地测试环境。<br> 适用：利用本地 Mac 或者单机 Linux 环境快速部署 TiDB集群，可以体验 TiDB 集群的基本架构，以及TiDB、TiKV、PD、Monitor监控等基础组件的运行。</li><li>使用 tiup cluster 在单机上模拟生产环境部署步骤。<br> 使用：用单台Linux服务器，体验 TiDB 最小的湾镇拖布的集群，并<code>模拟生产的部署步骤</code>。</li></ol><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211027145448.png" alt="image-20211027145439294"></p><p>此处采用第二种方式部署测试环境。即，编写 topo.yaml 文件，使用 tiup cluster deploy 的方式部署集群。</p><p>环境：阿里云，操作系统：centos7.8</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat /etc/redhat-release<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211027145954.png" alt="环境"></p><h4 id="部署步骤："><a href="#部署步骤：" class="headerlink" title="部署步骤："></a>部署步骤：</h4><h5 id="1-关闭防火墙"><a href="#1-关闭防火墙" class="headerlink" title="1. 关闭防火墙"></a>1. 关闭防火墙</h5><p>由于是在阿里云上，不可关闭防火墙，需要配置防火墙端口。如果是在虚拟机上，可以直接执行以下命令关闭防火墙。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl stop firewalld<br>service iptables stop<br></code></pre></div></td></tr></table></figure><p>阿里云开放防火墙端口：</p><h2 id="防火墙设置相关端口命令"><a href="#防火墙设置相关端口命令" class="headerlink" title="防火墙设置相关端口命令"></a>防火墙设置相关端口命令</h2><p>在此以打开3306端口为例</p><ol><li>打开端口命令，出现success即为成功</li></ol><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427143246.png" alt="image-20210427143238270"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --zone=public --add-port=3306/tcp --permanent<br></code></pre></div></td></tr></table></figure><ol start="2"><li>查看端口开放情况：<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">netstat -ntlp<br></code></pre></div></td></tr></table></figure>或：<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --list-ports<br></code></pre></div></td></tr></table></figure></li></ol><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427143506.png" alt="image-20210427143505255"></p><h5 id="2-下载并安装TiUP"><a href="#2-下载并安装TiUP" class="headerlink" title="2. 下载并安装TiUP"></a>2. 下载并安装TiUP</h5><p>命令：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh<br></code></pre></div></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br>                                 Dload  Upload   Total   Spent    Left  Speed<br>100 8697k  100 8697k    0     0  4316k      0  0:00:02  0:00:02 --:--:-- 4318k<br>WARN: adding root certificate via internet: https://tiup-mirrors.pingcap.com/root.json<br>You can revoke this by remove /root/.tiup/bin/7b8e153f2e2d0928.root.json<br>Set mirror to https://tiup-mirrors.pingcap.com success<br>Detected shell: bash<br>Shell profile:  /root/.bash_profile<br>/root/.bash_profile has been modified to add tiup to PATH<br>open a new terminal or source /root/.bash_profile to use it<br>Installed path: /root/.tiup/bin/tiup<br>===============================================<br>Have a try:     tiup playground<br>===============================================<br></code></pre></div></td></tr></table></figure><h5 id="3-安装-TiUP-的-cluster-组件"><a href="#3-安装-TiUP-的-cluster-组件" class="headerlink" title="3. 安装 TiUP 的 cluster 组件"></a>3. 安装 TiUP 的 cluster 组件</h5><ol><li><p>声明全局的环境变量，不然找不到tiup命令：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">source .bash_profile <br></code></pre></div></td></tr></table></figure></li><li><p>使用 tiup 工具安装cluster组件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tiup cluster<br></code></pre></div></td></tr></table></figure></li></ol><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">The component `cluster` is not installed; downloading from repository.<br>download https://tiup-mirrors.pingcap.com/cluster-v1.3.1-linux-amd64.tar.gz 10.05 MiB / 10.05 MiB 100.00% 13.05 MiB p/s                                               <br>Starting component `cluster`: /root/.tiup/components/cluster/v1.3.1/tiup-cluster<br>Deploy a TiDB cluster for production<br><br>Usage:<br>  tiup cluster [command]<br><br>Available Commands:<br>  check       Perform preflight checks for the cluster.<br>  deploy      Deploy a cluster for production<br>  start       Start a TiDB cluster<br>  stop        Stop a TiDB cluster<br>  restart     Restart a TiDB cluster<br>  scale-in    Scale in a TiDB cluster<br>  scale-out   Scale out a TiDB cluster<br>  destroy     Destroy a specified cluster<br>  clean       (EXPERIMENTAL) Cleanup a specified cluster<br>  upgrade     Upgrade a specified TiDB cluster<br>  exec        Run shell command on host in the tidb cluster<br>  display     Display information of a TiDB cluster<br>  prune       Destroy and remove instances that is in tombstone state<br>  list        List all clusters<br>  audit       Show audit log of cluster operation<br>  import      Import an exist TiDB cluster from TiDB-Ansible<br>  edit-config Edit TiDB cluster config.<br>Will use editor from environment variable `EDITOR`, default use vi<br>  reload      Reload a TiDB cluster&#x27;s config and restart if needed<br>  patch       Replace the remote package with a specified package and restart the service<br>  rename      Rename the cluster<br>  enable      Enable a TiDB cluster automatically at boot<br>  disable     Disable starting a TiDB cluster automatically at boot<br>  help        Help about any command<br><br>Flags:<br>  -h, --help                help for tiup<br>      --ssh string          (EXPERIMENTAL) The executor type: &#x27;builtin&#x27;, &#x27;system&#x27;, &#x27;none&#x27;.<br>      --ssh-timeout uint    Timeout in seconds to connect host via SSH, ignored for operations that don&#x27;t need an SSH connection. (default 5)<br>  -v, --version             version for tiup<br>      --wait-timeout uint   Timeout in seconds to wait for an operation to complete, ignored for operations that don&#x27;t fit. (default 120)<br>  -y, --yes                 Skip all confirmations and assumes &#x27;yes&#x27;<br><br>Use &quot;tiup cluster help [command]&quot; for more information about a command.<br></code></pre></div></td></tr></table></figure><h5 id="4-设置sshd服务的最大连接数限制为20"><a href="#4-设置sshd服务的最大连接数限制为20" class="headerlink" title="4. 设置sshd服务的最大连接数限制为20"></a>4. 设置sshd服务的最大连接数限制为20</h5><p>使用 root 权限，修改 <code>/etc/ssh/sshd_config</code> 文件中下面参数的配置：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">MaxSessions 20<br></code></pre></div></td></tr></table></figure><p>修改后重启sshd：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">service sshd restart<br></code></pre></div></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Redirecting to /bin/systemctl restart sshd.service<br></code></pre></div></td></tr></table></figure><h5 id="5-编写集群配置模板文件-topo-yaml"><a href="#5-编写集群配置模板文件-topo-yaml" class="headerlink" title="5. 编写集群配置模板文件 topo.yaml"></a>5. 编写集群配置模板文件 topo.yaml</h5><p>配置模板文件 topo.yaml，内容如下。<br>注意两点：</p><ul><li>文件中的host是部署TiDB的服务器ip</li><li>ssh_port默认为22<br>官网示例配置中 tikv_servers 是3个节点，这里设置只有1个节点，原因：配置多个节点时只有1个节点能够启动成功。<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><br><span class="hljs-comment"># # Global variables are applied to all deployments and used as the default value of</span><br><span class="hljs-comment"># # the deployments if a specific deployment value is missing.</span><br><span class="hljs-attr">global:</span><br> <span class="hljs-attr">user:</span> <span class="hljs-string">&quot;tidb&quot;</span><br> <span class="hljs-attr">ssh_port:</span> <span class="hljs-number">22</span><br> <span class="hljs-attr">deploy_dir:</span> <span class="hljs-string">&quot;/tidb-deploy&quot;</span><br> <span class="hljs-attr">data_dir:</span> <span class="hljs-string">&quot;/tidb-data&quot;</span><br><br><span class="hljs-comment"># # Monitored variables are applied to all the machines.</span><br><span class="hljs-attr">monitored:</span><br> <span class="hljs-attr">node_exporter_port:</span> <span class="hljs-number">9100</span><br> <span class="hljs-attr">blackbox_exporter_port:</span> <span class="hljs-number">9115</span><br><br><span class="hljs-attr">server_configs:</span><br> <span class="hljs-attr">tidb:</span><br>   <span class="hljs-attr">log.slow-threshold:</span> <span class="hljs-number">300</span><br> <span class="hljs-attr">tikv:</span><br>   <span class="hljs-attr">readpool.storage.use-unified-pool:</span> <span class="hljs-literal">false</span><br>   <span class="hljs-attr">readpool.coprocessor.use-unified-pool:</span> <span class="hljs-literal">true</span><br> <span class="hljs-attr">pd:</span><br>   <span class="hljs-attr">replication.enable-placement-rules:</span> <span class="hljs-literal">true</span><br>   <span class="hljs-attr">replication.location-labels:</span> [<span class="hljs-string">&quot;host&quot;</span>]<br> <span class="hljs-attr">tiflash:</span><br>   <span class="hljs-attr">logger.level:</span> <span class="hljs-string">&quot;info&quot;</span><br><br><span class="hljs-attr">pd_servers:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-number">120.78</span><span class="hljs-number">.89</span><span class="hljs-number">.132</span><br><br><span class="hljs-attr">tidb_servers:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-number">120.78</span><span class="hljs-number">.89</span><span class="hljs-number">.132</span><br><br><span class="hljs-attr">tikv_servers:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-number">120.78</span><span class="hljs-number">.89</span><span class="hljs-number">.132</span><br>   <span class="hljs-attr">port:</span> <span class="hljs-number">20160</span><br>   <span class="hljs-attr">status_port:</span> <span class="hljs-number">20180</span><br>   <span class="hljs-attr">config:</span><br>     <span class="hljs-attr">server.labels:</span> &#123; <span class="hljs-attr">host:</span> <span class="hljs-string">&quot;logic-host-1&quot;</span> &#125;<br><br><span class="hljs-comment"># - host: 120.78.89.132</span><br><span class="hljs-comment">#   port: 20161</span><br><span class="hljs-comment">#   status_port: 20181</span><br><span class="hljs-comment">#   config:</span><br><span class="hljs-comment">#     server.labels: &#123; host: &quot;logic-host-2&quot; &#125;</span><br><br><span class="hljs-comment"># - host: 120.78.89.132</span><br><span class="hljs-comment">#   port: 20162</span><br><span class="hljs-comment">#   status_port: 20182</span><br><span class="hljs-comment">#   config:</span><br><span class="hljs-comment">#     server.labels: &#123; host: &quot;logic-host-3&quot; &#125;</span><br><br><span class="hljs-attr">tiflash_servers:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-number">120.78</span><span class="hljs-number">.89</span><span class="hljs-number">.132</span><br></code></pre></div></td></tr></table></figure></li></ul><h5 id="6-部署集群"><a href="#6-部署集群" class="headerlink" title="6. 部署集群"></a>6. 部署集群</h5><ol><li><p>部署集群命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tiup cluster deploy &lt;集群名称&gt; &lt;TiDB版本号&gt; ./topo.yaml --user root -p<br></code></pre></div></td></tr></table></figure></li><li><p>示例命令<br>集群名称为 ：mytidb-cluster TiDB版本号为：v3.1.2 </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tiup cluster deploy mytidb-cluster v3.1.2 ./topo.yaml --user root -p<br></code></pre></div></td></tr></table></figure></li></ol><p>执行命令后，输出日志：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Starting component `cluster`: /root/.tiup/components/cluster/v1.3.1/tiup-cluster deploy mytidb-cluster v3.1.2 ./topo.yaml --user root -p<br>Please confirm your topology:<br>Cluster type:    tidb<br>Cluster name:    mytidb-cluster<br>Cluster version: v3.1.2<br>Type        Host            Ports                            OS/Arch       Directories<br>----        ----            -----                            -------       -----------<br>pd          192.168.59.146  2379/2380                        linux/x86_64  /tidb-deploy/pd-2379,/tidb-data/pd-2379<br>tikv        192.168.59.146  20160/20180                      linux/x86_64  /tidb-deploy/tikv-20160,/tidb-data/tikv-20160<br>tidb        192.168.59.146  4000/10080                       linux/x86_64  /tidb-deploy/tidb-4000<br>tiflash     192.168.59.146  9000/8123/3930/20170/20292/8234  linux/x86_64  /tidb-deploy/tiflash-9000,/tidb-data/tiflash-9000<br>prometheus  192.168.59.146  9090                             linux/x86_64  /tidb-deploy/prometheus-9090,/tidb-data/prometheus-9090<br>grafana     192.168.59.146  3000                             linux/x86_64  /tidb-deploy/grafana-3000<br>Attention:<br>    1. If the topology is not what you expected, check your yaml file.<br>    2. Please confirm there is no port/directory conflicts in same host.<br>Do you want to continue? [y/N]:  y<br>Input SSH password: <br>+ Generate SSH keys ... Done<br>+ Download TiDB components<br>  - Download pd:v3.1.2 (linux/amd64) ... Done<br>  - Download tikv:v3.1.2 (linux/amd64) ... Done<br>  - Download tidb:v3.1.2 (linux/amd64) ... Done<br>  - Download tiflash:v3.1.2 (linux/amd64) ... Done<br>  - Download prometheus:v3.1.2 (linux/amd64) ... Done<br>  - Download grafana:v3.1.2 (linux/amd64) ... Done<br>  - Download node_exporter:v0.17.0 (linux/amd64) ... Done<br>  - Download blackbox_exporter:v0.12.0 (linux/amd64) ... Done<br>+ Initialize target host environments<br>  - Prepare 192.168.59.146:22 ... Done<br>+ Copy files<br>  - Copy pd -&gt; 192.168.59.146 ... Done<br>  - Copy tikv -&gt; 192.168.59.146 ... Done<br>  - Copy tidb -&gt; 192.168.59.146 ... Done<br>  - Copy tiflash -&gt; 192.168.59.146 ... Done<br>  - Copy prometheus -&gt; 192.168.59.146 ... Done<br>  - Copy grafana -&gt; 192.168.59.146 ... Done<br>  - Copy node_exporter -&gt; 192.168.59.146 ... Done<br>  - Copy blackbox_exporter -&gt; 192.168.59.146 ... Done<br>+ Check status<br>Enabling component pd<br>        Enabling instance pd 192.168.59.146:2379<br>        Enable pd 192.168.59.146:2379 success<br>Enabling component node_exporter<br>Enabling component blackbox_exporter<br>Enabling component tikv<br>        Enabling instance tikv 192.168.59.146:20160<br>        Enable tikv 192.168.59.146:20160 success<br>Enabling component tidb<br>        Enabling instance tidb 192.168.59.146:4000<br>        Enable tidb 192.168.59.146:4000 success<br>Enabling component tiflash<br>        Enabling instance tiflash 192.168.59.146:9000<br>        Enable tiflash 192.168.59.146:9000 success<br>Enabling component prometheus<br>        Enabling instance prometheus 192.168.59.146:9090<br>        Enable prometheus 192.168.59.146:9090 success<br>Enabling component grafana<br>        Enabling instance grafana 192.168.59.146:3000<br>        Enable grafana 192.168.59.146:3000 success<br>Cluster `mytidb-cluster` deployed successfully, you can start it with command: `tiup cluster start mytidb-cluster`<br></code></pre></div></td></tr></table></figure><h5 id="7-启动集群"><a href="#7-启动集群" class="headerlink" title="7. 启动集群"></a>7. 启动集群</h5><p>执行启动集群命令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tiup cluster start mytidb-cluster<br></code></pre></div></td></tr></table></figure><p>启动成功日志：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Starting component `cluster`: /root/.tiup/components/cluster/v1.3.1/tiup-cluster start mytidb-cluster<br>Starting cluster mytidb-cluster...<br>+ [ Serial ] - SSHKeySet: privateKey=/root/.tiup/storage/cluster/clusters/mytidb-cluster/ssh/id_rsa, publicKey=/root/.tiup/storage/cluster/clusters/mytidb-cluster/ssh/id_rsa.pub<br>+ [Parallel] - UserSSH: user=tidb, host=192.168.59.146<br>+ [Parallel] - UserSSH: user=tidb, host=192.168.59.146<br>+ [Parallel] - UserSSH: user=tidb, host=192.168.59.146<br>+ [Parallel] - UserSSH: user=tidb, host=192.168.59.146<br>+ [Parallel] - UserSSH: user=tidb, host=192.168.59.146<br>+ [Parallel] - UserSSH: user=tidb, host=192.168.59.146<br>+ [ Serial ] - StartCluster<br>Starting component pd<br>        Starting instance pd 192.168.59.146:2379<br>        Start pd 192.168.59.146:2379 success<br>Starting component node_exporter<br>        Starting instance 192.168.59.146<br>        Start 192.168.59.146 success<br>Starting component blackbox_exporter<br>        Starting instance 192.168.59.146<br>        Start 192.168.59.146 success<br>Starting component tikv<br>        Starting instance tikv 192.168.59.146:20160<br>        Start tikv 192.168.59.146:20160 success<br>Starting component tidb<br>        Starting instance tidb 192.168.59.146:4000<br>        Start tidb 192.168.59.146:4000 success<br>Starting component tiflash<br>        Starting instance tiflash 192.168.59.146:9000<br>        Start tiflash 192.168.59.146:9000 success<br>Starting component prometheus<br>        Starting instance prometheus 192.168.59.146:9090<br>        Start prometheus 192.168.59.146:9090 success<br>Starting component grafana<br>        Starting instance grafana 192.168.59.146:3000<br>        Start grafana 192.168.59.146:3000 success<br>+ [ Serial ] - UpdateTopology: cluster=mytidb-cluster<br>Started cluster `mytidb-cluster` successfully<br></code></pre></div></td></tr></table></figure><h5 id="8-使用-tiup-查看集群"><a href="#8-使用-tiup-查看集群" class="headerlink" title="8. 使用 tiup 查看集群"></a>8. 使用 tiup 查看集群</h5><ul><li>查看已经部署的集群状态<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tiup cluster list<br></code></pre></div></td></tr></table></figure></li></ul><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Starting component `cluster`: /root/.tiup/components/cluster/v1.6.1/tiup-cluster list<br>Name       User  Version  Path                                            PrivateKey<br>----       ----  -------  ----                                            ----------<br>tidb-test  tidb  v3.1.2   /root/.tiup/storage/cluster/clusters/tidb-test  /root/.tiup/storage/cluster/clusters/tidb-test/ssh/id_rsa<br></code></pre></div></td></tr></table></figure><ul><li>查看集群的拓扑结果和状态<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tiup cluster display &lt;cluster-name&gt;<br></code></pre></div></td></tr></table></figure></li></ul><p>测试：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tiup cluster display tidb-test<br></code></pre></div></td></tr></table></figure><p>结果:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Starting component `cluster`: /root/.tiup/components/cluster/v1.6.1/tiup-cluster display tidb-test<br>Cluster type:       tidb<br>Cluster name:       tidb-test<br>Cluster version:    v3.1.2<br>Deploy user:        tidb<br>SSH type:           builtin<br>ID                    Role     Host            Ports                            OS/Arch       Status  Data Dir                 Deploy Dir<br>--                    ----     ----            -----                            -------       ------  --------                 ----------<br>192.168.56.104:2379   pd       192.168.56.104  2379/2380                        linux/x86_64  Up|L    /tidb-data/pd-2379       /tidb-deploy/pd-2379<br>192.168.56.104:4000   tidb     192.168.56.104  4000/10080                       linux/x86_64  Up      -                        /tidb-deploy/tidb-4000<br>192.168.56.104:9000   tiflash  192.168.56.104  9000/8123/3930/20170/20292/8234  linux/x86_64  Up      /tidb-data/tiflash-9000  /tidb-deploy/tiflash-9000<br>192.168.56.104:20160  tikv     192.168.56.104  20160/20180                      linux/x86_64  Up      /tidb-data/tikv-20160    /tidb-deploy/tikv-20160<br>Total nodes: 4<br></code></pre></div></td></tr></table></figure><h5 id="9-使用-MySQL-客户端访问-TiDB-数据库"><a href="#9-使用-MySQL-客户端访问-TiDB-数据库" class="headerlink" title="9. 使用 MySQL 客户端访问 TiDB 数据库"></a>9. 使用 MySQL 客户端访问 TiDB 数据库</h5><p>TiDB没有提供数据库客户端，需要额外安装 MySQL 客户端</p><ol><li>安装 MySQL 客户端，如果已安装可以跳过此步骤<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum -y install mysql<br></code></pre></div></td></tr></table></figure></li><li>访问数据库</li></ol><ul><li>本地访问<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mysql -h 10.0.1.1 -P 4000 -u root<br></code></pre></div></td></tr></table></figure></li></ul><p>看到 <code>mysql&gt;</code> 命令行即为访问成功。</p><p>进行相关的创建用户，修改密码，授权等。</p><ul><li>支持远程使用MySQL连接工具访问<br>TiDB支持MySQL客户端访问，使用sqlyog远程登录TiDB，使用上述配置好的用户密码进行远程连接登录即可。<br>使用 idea 内置工具登录TiDB，用户名密码，地址192.168.59.149，端口4000</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>NewSQL数据库</tag>
      
      <tag>PingCAP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-TiDB与MySQL的兼容性</title>
    <link href="/2022/DataBase-TIDB-study-01-TiDB%E4%B8%8EMySQL%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    <url>/2022/DataBase-TIDB-study-01-TiDB%E4%B8%8EMySQL%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>原文链接：<br><a href="https://blog.csdn.net/Itissohardtog/article/details/103265120">https://blog.csdn.net/Itissohardtog/article/details/103265120</a></p><h2 id="函数和操作符概述"><a href="#函数和操作符概述" class="headerlink" title="函数和操作符概述"></a>函数和操作符概述</h2><p>TiDB 中函数和操作符使用方法与 MySQL 基本一致，详情参见: {Functions and Operators}[<a href="https://dev.mysql.com/doc/refman/5.7/en/functions.html]%E3%80%82">https://dev.mysql.com/doc/refman/5.7/en/functions.html]。</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>SQL数据库</tag>
      
      <tag>TiDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-RDBMS的事务</title>
    <link href="/2022/DataBase-TIDB-study-01-SQL/"/>
    <url>/2022/DataBase-TIDB-study-01-SQL/</url>
    
    <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>SQL语言分为四类：</p><ul><li>DDL:数据定义语言，常用的 DDL 功能是对象（如表、索引等）的创建、属性修改和删除，对应的命令分别是 CREATE、ALTER 和 DROP。</li><li>DML:数据操作语言，常用的 DML 功能是对表记录的新增、修改和删除，对应的命令分别是 INSERT、UPDATE 和 DELETE。</li><li>DQL:数据查询语言，DQL 数据查询语言是从一个表或多个表中检索出想要的数据行，通常是业务开发的核心内容。</li><li>DCL:数据控制语言，常用的 DCL 功能是创建或删除用户，和对用户权限的管理。</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases ;<br>use mysql;<br><br><span class="hljs-keyword">show</span> tables <span class="hljs-keyword">from</span> mysql;<br><br># 创建数据库，如果不存在 samp_db<br><span class="hljs-keyword">create</span> database if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> samp_db;<br><br># 删除数据库<br># <span class="hljs-keyword">drop</span> database samp_db;<br><br># 查看 samp_db 存在的表<br>use samp_db;<br><span class="hljs-keyword">show</span> tables;<br><br># 创建 person 表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> person (<br>    id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>),<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>    birthday <span class="hljs-type">date</span><br>);<br><br># 查看 建表语句 person<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> person;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">CREATE TABLE `person` (</span><br><span class="hljs-comment">                          `id` int(11) DEFAULT NULL,</span><br><span class="hljs-comment">                          `name` varchar(255) DEFAULT NULL,</span><br><span class="hljs-comment">                          `birthday` date DEFAULT NULL</span><br><span class="hljs-comment">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `person` (<br>                          `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>                          `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>                          `birthday` <span class="hljs-type">date</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>                          KEY `person_id` (`id`), # 索引<br>                          <span class="hljs-keyword">UNIQUE</span> KEY `person_unique_id` (`id`) # 主键索引<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_bin;<br><br><br># 查看表结构<br><span class="hljs-keyword">desc</span> samp_db.person;<br><br><span class="hljs-keyword">describe</span> samp_db.person;<br><br><br><br># 删除表<br>## <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> person;<br><br># 建立索引<br><span class="hljs-keyword">create</span> index person_id <span class="hljs-keyword">on</span> person(id);<br># 或者<br># <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> person <span class="hljs-keyword">add</span> index person_id(id);<br><br># 对于值唯一的列,创建唯一索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index person_unique_id <span class="hljs-keyword">on</span> person(id);<br><br><br># 使用 <span class="hljs-keyword">SHOW</span> INDEX 语句查看表内所有索引<br><span class="hljs-keyword">show</span> index  <span class="hljs-keyword">from</span> person;<br><br># 记录的增、删、改<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> samp_db.person <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-string">&#x27;20170912&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> samp_db.person(id,name) <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;bob&#x27;</span>);<br><br># update 修改部分字段<br><br>update samp_db.person <span class="hljs-keyword">set</span> birthday<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;20201101&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br># <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> ，<span class="hljs-keyword">from</span>不能省略。<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> samp_db.person <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2&#x27;</span>;<br><br># 注意：UPDATE 和 <span class="hljs-keyword">DELETE</span> 操作如果不带 <span class="hljs-keyword">WHERE</span> 过滤条件是对全表进行操作。<br><br><br># 查询数据<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> samp_db.person;<br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> samp_db.person;<br><br># DCL：创建、删除用户，管理用户权限<br># 创建用户<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;tiuser&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified  <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br># 授权查询功能<br><span class="hljs-keyword">grant</span>  <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> samp_db.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;tiuser&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br><br># 查看用户权限<br><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;tiuser&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br><br># 删除用户 ‘tiuser’<br># <span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;tiuser&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>SQL数据库</tag>
      
      <tag>MySQL管理之道，性能调优，高可用与监控（第二版）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-19-MySQL-%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE/"/>
    <url>/2022/DataBase-MySQL-19-MySQL-%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<ul><li><p>自增主键不连续问题</p><p>自增主键可以让主键索引保持递增顺序插入，避免了页分裂，使得数据更加紧凑。但实际情况下<strong>很难保证自增主键的连续增长。</strong></p><blockquote><p>自增主键不连续的情况</p></blockquote><ol><li>当业务自己写入的数据中包含主键值时，自增主键会被修改。</li><li>使用 insert 语句异常（唯一键冲突）或者事务回滚的时候，已经获取的自增主键值不会回退。</li><li>当数据库重启时，自增主键可能恢复成启动前的值。</li></ol><ul><li><p>自增值的存储位置</p><ul><li>MyISAM 引擎的自增值写在数据文件上</li><li>InnoDB，自增值记录在内存。MySQL 直到 8.0 版本，才给 InnoDB 表的自增值加上了持久化的能力，确保<strong>重启前后一个表的自增值不变</strong>。</li></ul></li><li><p>自增值的修改</p><ul><li>修改机制</li></ul><p>假设字段 id 被定义为 AUTO_INCREMENT，在插入一行数据的时候 AUTO_INCREMENT=Y，有以下几种情况：</p><ol><li>id 被指定为 0 、null 或 未指定值，将当前表的 AUTO_INCREMENT 值填到 id</li><li>id 被指定具体值 X，直接使用语句中的值 X 作为id值，并根据 X 和 Y 的大小关系，变更 AUTO_INCREMENT 的值<ul><li>如果 X &lt; Y, 表的自增值不变, AUTO_INCREMENT=Y</li><li>如果 X &gt;= Y, 修改 AUTO_INCREMENT=X</li></ul></li></ol><ul><li>修改时机</li></ul></li><li><p>自增值的优化</p></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-18-MySQL-Memory%E5%BC%95%E6%93%8E/"/>
    <url>/2022/DataBase-MySQL-18-MySQL-Memory%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<ul><li><p>Memory 引擎和 InnoDB 引擎的区别</p><blockquote><p>环境</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- t1 使用 内存表，t2 使用 innodb 引擎</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key, c <span class="hljs-type">int</span>) engine<span class="hljs-operator">=</span>Memory;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t2(id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key, c <span class="hljs-type">int</span>) engine<span class="hljs-operator">=</span>innodb;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t1 <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>),(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>),(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>),(<span class="hljs-number">7</span>,<span class="hljs-number">7</span>),(<span class="hljs-number">8</span>,<span class="hljs-number">8</span>),(<span class="hljs-number">9</span>,<span class="hljs-number">9</span>),(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t2 <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>),(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>),(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>),(<span class="hljs-number">7</span>,<span class="hljs-number">7</span>),(<span class="hljs-number">8</span>,<span class="hljs-number">8</span>),(<span class="hljs-number">9</span>,<span class="hljs-number">9</span>),(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">-- 执行查询 sql，可以看到两个查询的结果集不同</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1; <span class="hljs-comment">-- (0,0) 在最后一条</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t2; <span class="hljs-comment">-- (0,0) 在第一条</span><br></code></pre></div></td></tr></table></figure><blockquote><p>memory 引擎的数据组织方式</p><p><strong>索引和数组分开存放</strong></p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220315170918.png" alt="image-20220315170755519"></p><blockquote><p>InnoDB vs Memory 的不同</p></blockquote><ol><li>InnoDB 表通过<strong>索引组织表</strong>，内存表（memory）通过<strong>堆组织表</strong></li><li>InnoDB 表的数据总是有序的，内存表的数据按照写入顺序存放</li><li>InnoDB 使用主键索引查询时走一次索引查找，使用普通索引查询时，需要走两次索引查找。内存表中所有索引的“地位”相同，都是 hash 索引。</li><li>数据文件空洞：InnoDB 表为了保证数据有序性，只能在固定位置写入新值；内存表找到空位就直接写入新值</li><li>数据位置发生变化时：InnoDB 表只需要修改主键索引，内存表需要修改所有索引。</li><li> 变长数据类型：InnoDB支持保存变长数据类型，内存表中每行数据长度相同，即使定义了 varchar(N) 也是按照 char(N) 保存，同时不支持 Blob 和 Text 字段</li></ol></li><li><p>Memory 引擎中的 B-Tree</p><ul><li>内存表也是支持 B-Tree 索引。在 id 列上创建一个 B- Tree索引，SQL如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t1 <span class="hljs-keyword">add</span> index a_btree_index <span class="hljs-keyword">using</span> btree(id);<br></code></pre></div></td></tr></table></figure><p>执行完成后，表 t1 的数据组织形式如下：</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220315171332.png" alt="image-20220315171331277"></p></li></ul><ul><li>不推荐在生产上使用内存表的原因：<ul><li>锁粒度问题：不支持行锁，只支持表锁。并发性能差，更新数据的时候会阻塞查询。</li><li>数据持久化问题：数据保存在内存，<strong>重启数据丢失。</strong> 使用主备情况下，备库重启完成后会导致主备同步线程停止。</li></ul></li></ul><ul><li><p>memory 表的使用场景：用户临时表</p><ul><li>在创建用户临时表时，可以将用户临时表设置为内存表</li><li>临时表和内存表的相似点：<ol><li>临时表不会被其他线程访问，没有并发性问题</li><li>临时表重启后也需要删除，清空数据的问题不存在</li><li>备库的临时表不会影响主库的用户线程</li></ol></li><li>临时表选择内存引擎替换InnoDB 引擎的好处：<ul><li>使用内存表不需要写磁盘，往 temp_t 写数据更快</li><li>索引 b 使用 hash 索引，查找速度比 B-Tree 快</li><li>临时表较小，占用内存有限</li></ul></li></ul><blockquote><p>案例：</p></blockquote></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-17-MyySQL%E7%9A%84%E4%B8%B4%E6%97%B6%E8%A1%A8/"/>
    <url>/2022/DataBase-MySQL-17-MyySQL%E7%9A%84%E4%B8%B4%E6%97%B6%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="MySQL-临时表有两种："><a href="#MySQL-临时表有两种：" class="headerlink" title="MySQL 临时表有两种："></a>MySQL 临时表有两种：</h3><ul><li>用户临时表：通过 <code>create temporary table t1_tmp like t1;</code>就是用户临时表。</li><li>内部临时表：用来存放语句执行过程中的中间数据。</li></ul><h2 id="用户临时表"><a href="#用户临时表" class="headerlink" title="用户临时表"></a>用户临时表</h2><h3 id="MySQL-用户临时表的特性"><a href="#MySQL-用户临时表的特性" class="headerlink" title="MySQL 用户临时表的特性"></a>MySQL 用户临时表的特性</h3><ul><li>仅创建临时表的线程可见，其他 session 不可见</li><li>创建临时表和删除临时表的语句会被记录到binlog日志中</li><li>存放在 MySQL 的临时文件空间，前缀为<code>#sql&#123;进程id&#125;_&#123;线程id&#125;_序列号</code>，可以使用 <code>select @@tmpdir</code> 显示实例的临时文件目录。使用临时表创建语句的时候分为两个部分：① 表结构定义：为 InnoDB 表创建一个 .frm 文件。② 数据文件：在临时文件目录中创建一个相同前缀、以 .idb 结尾的文件 （5.7 之后引入临时表空间后不在创建 .idb 文件）</li></ul><h3 id="用户临时表的应用"><a href="#用户临时表的应用" class="headerlink" title="用户临时表的应用"></a>用户临时表的应用</h3><ul><li>join 语句中用来存放过滤后的小表</li><li>分库分表系统的跨库查询</li></ul><blockquote><p>分库分表的场景，将一个逻辑上的大表分散到不同的数据库实例上。</p><p>如：将一个大表 ht ，按字段 f，拆分成1024个分表。分布到 32 个数据库实例上。</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220315094232.png" alt="image-20220315094223794"></p><ul><li>在 proxy 架构中，分区key的选择以“减少跨库和跨表查询”为依据。假设大部分语句包含 f 的等值条件，则采用字段f 作为分区key。</li><li>但大部分 SQL 查询是范围检索，在分库分表的结构下很可能出现跨表查询的需求：</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> v <span class="hljs-keyword">from</span> ht <span class="hljs-keyword">where</span> k <span class="hljs-operator">&gt;=</span> M <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> t_modified <span class="hljs-keyword">desc</span> limit <span class="hljs-number">100</span>;<br></code></pre></div></td></tr></table></figure><ul><li><p>上述sql没有用到分区键 f。因此只能每次都到所有库中查找满足条件的记录。并且由于需要排序，有两种实现排序的方式：</p><ol><li>在 proxy 层中实现，但是需要开发的工作量比较大，同时对 proxy 端的压力比较大，容易出现内存不足和 CPU 瓶颈的问题。</li><li>将各个分库获取的数据，汇总到一个 MySQL 实例中，在该表上做逻辑操作。执行流程如下：</li></ol><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220315095630.png" alt="image-20220315095629256"></p><ul><li>在汇总库(其中一个分库)上创建一个临时表 temp_ht，表中包含三个字段 v、k、t_modified</li><li>在各分库上执行</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> v,k,t_modified <span class="hljs-keyword">from</span> ht_x <span class="hljs-keyword">where</span> k <span class="hljs-operator">&gt;=</span> M <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> t_modified <span class="hljs-keyword">desc</span> limit <span class="hljs-number">100</span>;<br></code></pre></div></td></tr></table></figure><ul><li>将分库执行的结果插入到 temp_ht 表中</li><li>最后执行</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> v <span class="hljs-keyword">from</span> temp_ht <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> t_modified <span class="hljs-keyword">desc</span> limit <span class="hljs-number">100</span>;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="内部临时表"><a href="#内部临时表" class="headerlink" title="内部临时表"></a>内部临时表</h2><h3 id="内部临时表的使用"><a href="#内部临时表的使用" class="headerlink" title="内部临时表的使用"></a>内部临时表的使用</h3><h4 id="union-执行流程"><a href="#union-执行流程" class="headerlink" title="union 执行流程"></a>union 执行流程</h4><blockquote><p>环境</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key, a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>, index(a));<br>delimiter ;;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> idata()<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> i <span class="hljs-type">int</span>;<br><span class="hljs-keyword">set</span> i<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>while(i<span class="hljs-operator">&lt;=</span><span class="hljs-number">1000</span>)do<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t1 <span class="hljs-keyword">values</span>(i, i, i);<br><span class="hljs-keyword">set</span> i<span class="hljs-operator">=</span>i<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span> while;<br><span class="hljs-keyword">end</span>;;<br>delimiter ;<br><span class="hljs-keyword">call</span> idata();<br></code></pre></div></td></tr></table></figure><blockquote><p>实验</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 取两个子查询结果的并集，union 下重复的只保留一行（去重）</span><br>explain (<span class="hljs-keyword">select</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">as</span> f) <span class="hljs-keyword">union</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">desc</span> limit <span class="hljs-number">2</span>);<br></code></pre></div></td></tr></table></figure><ul><li>explain 结果：</li></ul><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220315110924.png" alt="image-20220315110923511"></p><ul><li><p>分析：</p><p><code>unsing temporary</code> 表示用到了临时表，该表只有一个字段f，f为主键。</p><ul><li>由于 union 有去重作用，最后结果集返回两条记录 1000  和 999.</li><li>如果使用 union all，结果集返回三条记录</li></ul></li></ul><blockquote><p>union 和 union all 比较</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220315113020.png" alt="image-20220315113019361"></p><h4 id="group-by-执行流程"><a href="#group-by-执行流程" class="headerlink" title="group by 执行流程"></a>group by 执行流程</h4><blockquote><p>实验：测试 group by 使用 内存临时表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 将表 t1 中的数据，按 id%10 进行分组统计出现次数，并按照 m 的结果排序后输出</span><br>explain <span class="hljs-keyword">select</span> id<span class="hljs-operator">%</span><span class="hljs-number">10</span> <span class="hljs-keyword">as</span> m, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> c <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> m;<br></code></pre></div></td></tr></table></figure><ul><li>explain 结果：</li></ul><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220315113504.png" alt="image-20220315113503441"></p><ul><li>分析：<ul><li>using index：使用了覆盖索引（a）不用回表</li><li>using temporary：使用了了临时表，用来临时存放select取出数据的分组结果（无序）。如果select 取出的数据量比内存临时表空间大（字段太多or行数太多）就转为“磁盘临时表”。</li><li>using filesort：表示需要排序，使用 sort_buffer 进行排序。</li></ul></li></ul><blockquote><p>group by 优化方法 – 不需要排序的情况下，使用 order by null 跳过后续的排序阶段</p></blockquote><p>有些情况下，不需要根据 group by 的字段进行排序时，可以在 SQL 中加 order by null 明确告诉优化器不需要排序，直接从临时表取数据返回。</p><ul><li>优化如下</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id<span class="hljs-operator">%</span><span class="hljs-number">10</span> <span class="hljs-keyword">as</span> m, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> c <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> m <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">null</span>;<br></code></pre></div></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220315153451.png" alt="image-20220315153448641"></p><blockquote><p>group by 优化方法 – colument + 索引来避免使用临时表</p></blockquote><p>group by 的作用是：统计不同值的出现个数。直接使用 group by 不管是使用内存临时表还是磁盘临时表，都需要构造一个<strong>带唯一索引的表</strong>，执行代价高，如果统计结果的数据量比较大，执行的group by语句会很慢。</p><ul><li><p>解决方法：通过在表后添加一列存放分组统计结果的字段，并在该字段上创建索引</p></li><li><p>比如上述group by 的优化如下：</p><ol><li>使用 <code>generated column</code> 机制来实现列数据的关联更新，建立列 z=id%10。并在z列上创建索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t1 <span class="hljs-keyword">add</span> <span class="hljs-keyword">column</span> z <span class="hljs-type">int</span> generated always <span class="hljs-keyword">as</span>(id<span class="hljs-operator">%</span><span class="hljs-number">100</span>), <span class="hljs-keyword">add</span> index(z);<br></code></pre></div></td></tr></table></figure><ol start="2"><li>查询的语句可以改为</li></ol><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> z,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> c <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> z;<br></code></pre></div></td></tr></table></figure><ul><li>优化后 explain 结果，可以看到该SQL语句没有用到临时表了</li></ul><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220315150206.png" alt="image-20220315150142198"></p></li></ul><blockquote><p>group by 优化方法 –  直接排序</p></blockquote><p>group by  在不适合额外创建索引的情况下，只能老老实实采用 group by 排序规则。</p><p>但可以<strong>提前预估</strong>一个<code>group by</code> 语句需要放到临时表的数据量。如果预估数据量特别大，可以在 <code>group by</code> 语句中加入 <code>SQL_BIG_RESULT</code> 的提示<strong>告诉优化器直接走磁盘临时表</strong>。可以避免优化器在插入部分数据到内存临时表，发现内存不够了才转成磁盘临时表。同时，MySQL优化器会对该排序算法进行优化，具体不赘述。</p><p>比如上述 group by 的通过此方法优化如下：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> SQL_BIG_RESULT id<span class="hljs-operator">%</span><span class="hljs-number">100</span> <span class="hljs-keyword">as</span> m, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> c <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> m;<br></code></pre></div></td></tr></table></figure><ul><li>explain 结果：</li></ul><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220315151725.png" alt="image-20220315151724707"></p><h4 id="group-by-的实现算法小结"><a href="#group-by-的实现算法小结" class="headerlink" title="group by 的实现算法小结"></a>group by 的实现算法小结</h4><ol><li>如果对 group by 没有排序要求，在语句后面加 order by null。避免使用排序</li><li>尽量让 group by 过程用上表索引</li><li>如果 group by 使用到了临时表并且需要排序：如果 group by 统计的数据量不大，尽量只使用内存临时表（通过适当调大 <code>tmp_table_size</code> 参数来避免使用磁盘临时表）。如果 group by 统计的数量太大了，使用 <code>SQL_BIG_RESULT</code> 的提示，来告诉优化器直接使用排序算法得到 group by 的结果</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-16-MySQL%E4%B8%ADJOIN%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/DataBase-MySQL-16-MySQL%E4%B8%ADJOIN%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<ul><li></li><li><p>环境</p><ul><li>建立两个表 t1 (100row)和 t2(1000row) ，每个表上都有一个主键索引 id 和一个索引 a，字段b上无索引。</li><li>存储过程 <code>idata()</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t2` (<br>    `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `a` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `b` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>    KEY `a` (`a`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB;<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">procedure</span> idata;<br>delimiter ;;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> idata()<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> i <span class="hljs-type">int</span>;<br><span class="hljs-keyword">set</span> i<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>while (i<span class="hljs-operator">&lt;=</span><span class="hljs-number">1000</span>) do<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t2 <span class="hljs-keyword">values</span>(i, i, i);<br><span class="hljs-keyword">set</span> i<span class="hljs-operator">=</span>i<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span> while;<br><span class="hljs-keyword">end</span>;;<br>delimiter ;<br><span class="hljs-keyword">call</span> idata();<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1 <span class="hljs-keyword">like</span> t2;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t1 (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t2 <span class="hljs-keyword">where</span> id<span class="hljs-operator">&lt;=</span><span class="hljs-number">100</span>);<br></code></pre></div></td></tr></table></figure><blockquote><p> 使用 join 需要关注是哪张表作为驱动表，哪张表是被驱动表。</p><p>规则：<strong>小表驱动大表</strong>。直接使用 join 语句，MySQL 优化器可能会选择 t1 或 t2 作为驱动表。</p></blockquote></li><li><p>Index Nested-Loop Join (索引嵌套循环连接) – </p><ul><li>被驱动表上有可用索引的情况，使用 <code>Index Nested-Loop Join</code> 算法。</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 straight_join t2 <span class="hljs-keyword">on</span> (t1.a <span class="hljs-operator">=</span> t2.b);<br><span class="hljs-comment">-- 使用 straight_join， t1 为驱动表，t2 为被驱动表。</span><br></code></pre></div></td></tr></table></figure><ul><li><p>执行流程：</p><ol><li>从 t1 中读入一行数据 R；</li><li>从数据行R中，取出a字段到表t2里去查找；</li><li>取出表t2中满足条件的行，跟R组成一行，作为结果集的一部分；</li><li> 重复执行步骤1到3，直到表t1的末尾循环结束。</li></ol><blockquote><p>对表 t1 做全表扫描，对表 t2 走索引树搜索过程，每次扫描一行。扫描 100 次。</p></blockquote></li><li><p>假设驱动表行数为N，被驱动表行数为M，则执行过程的复杂度为<br>$$<br>N+N<em>2</em>log_2M<br>$$</p></li><li><p>结论：（前提：可以使用被驱动表的索引的情况下）</p><ol><li>显然驱动表行数N的影响更大，因此应尽量让小表来做驱动表。</li><li>使用 join 语句，性能比强行拆成多个单表执行 SQL 性能好。</li></ol></li></ul></li><li><p>Simple Nested-Loop Join 和 <strong>Block Nested-Loop Join</strong> </p><ul><li>被驱动表上没有可用索引时，使用 <code>Block Nested-Loop Join</code> 算法，MySQL 不选择 <code>Simple Nested-Loop Join</code>。</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 straight_join t2 <span class="hljs-keyword">on</span> (t1.a <span class="hljs-operator">=</span> t2.b);<br></code></pre></div></td></tr></table></figure><ul><li>使用 <code>Block Nested-Loop Join</code> 算法流程：<ol><li>把表t1的数据读入线程内存<code>join_buffer</code>中，由于我们这个语句中写的是<code>select *</code>，因此是<strong>把整个表t1放入了内存</strong>。<em>如果扫描的 t1 表数据量 &gt; join_buffer，则采用分段扫描</em>；</li><li>扫描表t2，把表t2中的每一行取出来，跟<code>join_buffer</code>中的<strong>每行数据</strong>做对比，满足join条件的，作为结果集的一部分返回。</li></ol></li></ul><blockquote><p>对表t1做全表扫描（100行），对表 t2 也是全表扫描（1000次），总共扫描行数为 1100 行。</p><p>扫描表 t2 时，需要在内存中做 100*1000=10万次判断，（每读行都需要判断100次）</p></blockquote><ul><li>假设驱动表行数为 N，被驱动表行数为 M。则 Block 算法的执行过程中<ol><li>两个表都做一次全表扫描，总扫描行数为 M+N，如果 N 表查询的数据量过大，那么 M 表需要进行<strong>多次全表扫描</strong>。</li><li>内存中的判断次数为 M*N （如果时 Simple 算法，该步骤的比较不是在内存，因此MySQL 优化器会选择 Block 算法。）</li></ol></li><li>BNL 算法的缺点<ol><li>可能回多次扫描被驱动表，占用磁盘 IO 资源</li><li>判断 join 条件时需要执行 M*N 次对比（M、N分别是两张表的行数），如果是大表就会占用非常多的CPU资源</li><li>可能会导致 Buffer Pool 的热数据被淘汰，影响内存命中率</li></ol></li></ul></li><li><p>join 语句优化</p><ul><li>环境：</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 表 t1 中有 1000 行数据，每行 a = 1001 - id。即字段 a 逆序</span><br><span class="hljs-comment">-- 表 t2 有 100 万行数据</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1(id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key, a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>, index(a));<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t2 <span class="hljs-keyword">like</span> t1;<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">procedure</span> idata;<br>delimiter ;;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> idata()<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> i <span class="hljs-type">int</span>;<br><span class="hljs-keyword">set</span> i<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>while(i<span class="hljs-operator">&lt;=</span><span class="hljs-number">1000</span>)do<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t1 <span class="hljs-keyword">values</span>(i, <span class="hljs-number">1001</span><span class="hljs-operator">-</span>i, i);<br><span class="hljs-keyword">set</span> i<span class="hljs-operator">=</span>i<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span> while;<br><span class="hljs-keyword">set</span> i<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>while(i<span class="hljs-operator">&lt;=</span><span class="hljs-number">1000000</span>)do<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t2 <span class="hljs-keyword">values</span>(i, i, i);<br><span class="hljs-keyword">set</span> i<span class="hljs-operator">=</span>i<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span> while;<br><span class="hljs-keyword">end</span>;;<br>delimiter ;<br><span class="hljs-keyword">call</span> idata();<br></code></pre></div></td></tr></table></figure></li><li><p>Multi-Range Read 优化 —— MRR 优化</p><ul><li>Multi-Range Read 优化的主要目的是：尽量使用顺序读盘。</li><li>利用二级索引查找范围数据之后，进行的回表查询是“按行查”的机制。MRR优化思路建立在：如果能够按照主键的递增顺序回表的话，对磁盘的读比较接近顺序读，能够提升读性能。因此，<strong>MRR 引入 read_rnd_buffer</strong>。进行二级索引查找时，将满足条件的记录的 id 放入 read_rnd_buffer 中，对 read_rnd_buffer 中的id进行排序，再进行回表操作。</li><li>开启稳定使用 MRR 优化设置</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> optimizer_switch<span class="hljs-operator">=</span>&quot;mrr_cost_based=off&quot; <span class="hljs-comment">-- 由于优化器判断消耗，更倾向于不使用MRR。想要测试效果需要开将 mrr_cost_based 设置为 off</span><br><br><span class="hljs-comment">-- read_rnd_buffer 的大小由 read_rnd_buffer_size 参数控制</span><br></code></pre></div></td></tr></table></figure><ul><li><code>select* from t1 where a&gt;=1 and a&lt;=100;</code> 使用MRR前后流程对比：</li></ul><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220314150153.png" alt="使用MRR前的回表操作" style="zoom:80%;" /><blockquote><p>使用 MRR 优化后的执行流程和 explain 结果</p></blockquote><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220314150414.png" alt="MRR优化后执行流程" style="zoom:80%;" /><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220314150647.png" alt="image-20220314150645984"></p></li><li><p>BAK 算法 （Batched Key Access)</p><ul><li>BAK 算法其实是对 <code>NLJ</code> 算法的优化。再 <code>NLJ</code> 算法的基础上，使用 join_buffer 临时内存（结合 BNL 的优点）</li></ul><blockquote><p><code>NLJ</code> 算法流程</p></blockquote><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220314164808.png" alt="image-20220314164807148" style="zoom:80%;" /><blockquote><p>BKA 算法流程</p></blockquote><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220314164910.png" alt="image-20220314164908901" style="zoom:80%;" /></li><li><p>BNL 转 BKA</p><ul><li>执行语句之前，需要通过理论分析和查看explain结果的方式，确认是否要使用BNL算法。如果确认优化器会使用BNL算法，就需要做优化。</li><li>优化的常见做法是，<ol><li><strong>给被驱动表的join字段加上索引</strong>，把BNL算法转成BKA算法。</li><li>当不适合在被驱动表上加索引时（该字段区分度不大 or 该语句很少用 or 满足条件的数据量其实很少，但该表数据又多建立索引很没必要 ），可以考虑使用<strong>加索引的临时表</strong>。</li></ol></li><li>使用<strong>加索引的临时表</strong>大致思路如下：<ol><li>把表t2中满足条件的数据放在临时表tmp_t中；</li><li>为了让join使用BKA算法，给临时表tmp_t的字段b加上索引；</li><li> 让表t1和tmp_t做join操作。</li></ol></li></ul><blockquote><p>案例：不适合直接在被驱动表上加索引的情况</p></blockquote><ul><li>未优化前</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">join</span> t2 <span class="hljs-keyword">on</span> (t1.b<span class="hljs-operator">=</span>t2.b) <span class="hljs-keyword">where</span> t2.b<span class="hljs-operator">&gt;=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> t2.b<span class="hljs-operator">&lt;=</span><span class="hljs-number">2000</span>;<br><span class="hljs-comment">-- 该SQL存在的问题是，在扫描表 t2 时候，需要进行join判断。整个流程的判断次数是　1000*100万=10亿次</span><br></code></pre></div></td></tr></table></figure><p>explain 分析结果：使用了 BNL 算法</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220314170908.png" alt="explain结果"></p><p>语句执行时间接近 <strong>1分11秒</strong></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220314171133.png" alt="语句执行时间"></p><ul><li>使用临时表优化BNL算法为BKA算法</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> temporary <span class="hljs-keyword">table</span> temp_t(id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key, a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>,index(b))engine<span class="hljs-operator">=</span>innodb;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> temp_t <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t2 <span class="hljs-keyword">where</span> b<span class="hljs-operator">&gt;=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> b<span class="hljs-operator">&lt;=</span><span class="hljs-number">2000</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">join</span> temp_t <span class="hljs-keyword">on</span> (t1.b<span class="hljs-operator">=</span>temp_t.b);<br></code></pre></div></td></tr></table></figure><p>explain 分析结果：使用了临时表 temp_t 上的索引，说明使用了 NLJ 算法</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220314171522.png" alt="image-20220314171521197"></p><p>语句执行时间为 0.01 秒</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220314171605.png" alt="image-20220314171604889"></p></li><li><p>扩展 – hash join</p><ul><li> MySQL目前的版本还不支持 hash join，但你可以配合应用端自己模拟出来</li><li>在业务端实现 hash join 逻辑，实现流程大致如下：<ol><li><code>select * from t1;</code>取得表t1的全部1000行数据，在业务端存入一个<strong>hash结构</strong>，比如C++里的<br>set、PHP的dict这样的数据结构。</li><li><code>select * from t2 where b&gt;=1 and b&lt;=2000;</code> 获取表t2中满足条件的2000行数据。</li><li>把这2000行数据，一行一行地取到业务端，到hash结构的数据表中寻找匹配的数据。满足匹配的条件的这行数据，就作为结果集的一行。</li></ol></li><li>理论上，这个过程会比临时表方案的执行速度还要快一些。如果你感兴趣的话，可以自己验证一下。</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-15-MySQL-%E5%85%A8%E8%A1%A8%E6%89%AB%E6%8F%8F/"/>
    <url>/2022/DataBase-MySQL-15-MySQL-%E5%85%A8%E8%A1%A8%E6%89%AB%E6%8F%8F/</url>
    
    <content type="html"><![CDATA[<ul><li>MySQL 全表扫描<ul><li><strong>“边读边发”</strong>MySQL 全表扫描时，直接扫描主键索引，依次取得的每条数据放在 net_buffer 中。当 net_buffer 写满之后，调用网络接口发出去。如果发送成功之后清空 net_buffer ，继续取下一行，并写入 net_buffer。</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-14-MySQL-kill%E8%AF%AD%E5%8F%A5/"/>
    <url>/2022/DataBase-MySQL-14-MySQL-kill%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<ul><li><p>MySQL 中的两个 kill 命令：</p><ul><li><code>kill query + 线程id</code>：表示终止这个正在执行的语句</li><li><code>kill [connection] + 线程id</code>： connection 可或缺，表示断开这个线程的连接，当然如果这个线程有语句正在执行，需要先暂停正在执行的语句。</li></ul></li><li><p>大部分情况下，kill query/connection 命令是有效的</p><ul><li><p>执行一个查询过程中，发现执行时间太久，想要放弃继续查询，可以使用 kill query 命令，终止这条查询语句</p></li><li><p>当语句处于锁等待的时候，直接使用 kill 命令也是有效的。</p><table><thead><tr><th>session A</th><th>session B</th><th>session C</th></tr></thead><tbody><tr><td>begin;<br />update t set c=c+1 where id = 1;</td><td></td><td></td></tr><tr><td></td><td>update t set c = c+1 where id = 1;<br />(blocked)</td><td></td></tr><tr><td></td><td>ERROR 1317(70100): Query execution was interrupted;</td><td>kill query thread_id_B;</td></tr></tbody></table></li></ul></li><li><p>收到 kill 之后，线程做了什么</p><ul><li>当用户执行 <code>kill query thread_id_B</code> 时，MySQL 中处理 kill 命令的线程做了两件事：<ol><li>把 session B 的运行状态改成 THD::KILL_QUERY (即，将变量 killed 赋值为 THD::KILL_QUERY)</li><li>给 session B 的执行线程发一个信号。</li><li>session B 的线程执行过程中，到达“埋点”时发现线程状态为 THD::KILL_QUERY，才开始进入语句终止逻辑<ul><li>如果 session B 处于等待状态，必须是一个可以被唤醒的的等待，否则不会执行到 “埋点”处</li><li>语句从开始进入终止逻辑，到终止逻辑完全完成，是有一个过程的。</li></ul></li></ol></li></ul></li><li><p>kill 不掉的例子</p><blockquote><p>第一类：线程没有执行到判断线程状态的逻辑：</p></blockquote><p>首先，执行<code>set global innodb_thread_concurrency=2</code>，将InnoDB的并发线程上限数设置为2；然后，执行下面的序列：</p><table><thead><tr><th>session A</th><th>session B</th><th>session C</th><th>session D</th><th>session E</th></tr></thead><tbody><tr><td>select sleep(100) from t;</td><td>select sleep(100) from t;</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>select * from t;<br />（blocked）</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td>kill query C;</td><td></td></tr><tr><td></td><td></td><td>ERROR 2013 (HY000)：Lost connection to MySQL server during query</td><td></td><td>kill C;</td></tr></tbody></table><ul><li><p>分析：</p><ol><li><p>session C 执行时 blocked</p></li><li><p>session D 执行 kill query C 没有起效</p></li><li><p>session E 执行 kill connection C，才断开了 session C，提示 “lost connection”；此时如果执行 “show processlist;” 会看到 session C 线程的 command 列显示 Killed，即客户端虽然断开了连接，但实际上服务端上的这条语句还在执行中。</p><blockquote><ol><li>”show processlist“ 执行时有一个特别的逻辑，就是如果有一个线程的状态时 KILL_CONNECTION，就把 Command 显示为 killed。</li><li>session C 的线程什么时候会退出呢？需要等到满足进入 InnoDB 的条件后，session C 的查询语句继续执行并到达”埋点“判断线程状态为 KILL_QUERY 或者 KILL_CONNECTION 之后，才进入终止逻辑阶段。</li></ol></blockquote></li></ol></li><li><p>提问：</p><ol><li><p>为什么 session D 执行的 kill query 命令没有起效？</p><p>因为 session C 的等待逻辑是：每10毫秒判断一下是否可以进入 InnoDB 执行，如果不行就调用nanosleep函数进入sleep状态。在这个等待循环中<strong>没有判断线程状态</strong>，因此根本不会进入终止逻辑阶段。</p></li><li><p>session E 执行的 kill connection 做了什么？</p><p>首先，把 session C 的线程状态设置为 KILL_CONNECTION；然后，关掉了 session C 的网络连接。这时候 session C 收到了断开连接的提示。</p></li></ol></li></ul><blockquote><p>第二类：终止逻辑耗时较长，比如超大事务执行被kill、大查询回滚、DDL命令执行到最后阶段</p></blockquote><p>终止逻辑耗时长的时候，从 <code>show processlist</code> 结果上看也是 <code>Command=Killed</code>，需要等到终止逻辑完成，语句才算真正被 kill。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-13-MySQL-%E6%95%85%E9%9A%9C%E5%88%A4%E6%96%AD/"/>
    <url>/2022/DataBase-MySQL-13-MySQL-%E6%95%85%E9%9A%9C%E5%88%A4%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h3 id="判断一个数据库是否故障？"><a href="#判断一个数据库是否故障？" class="headerlink" title="判断一个数据库是否故障？"></a>判断一个数据库是否故障？</h3><ol><li>select 1 判断</li><li>查表判断</li><li>更新判断</li><li>内部统计</li></ol><h3 id="select-1-判断"><a href="#select-1-判断" class="headerlink" title="select 1 判断"></a>select 1 判断</h3><ul><li>判断不一定准确，当 select 1成功返回，只能说明这个库的进程还在，并不能说明主库没问题。</li></ul><blockquote><p>场景：当 InnoDB 并发线程数量超过其设置的上限 innodb_thread_concurrency 时，InnoDB 再接收到新请求时会进入等待状态，直到有线程退出。</p></blockquote><ul><li>注意区分 ‘并发连接’ 和 ‘并发查询’<ol><li>并发连接：<code>show processlist;</code> 看到的是并发连接数量，该数量达到几千对数据库所在物理机的CPU影响不大，只是多占用一些内存。</li><li>并发查询：并发查询是指数据库<strong>当前正在执行</strong>的语句，影响CPU。</li><li>当一个线程进入锁等待后，并发线程的计数会减一。该线程进入锁等待后已经就不占用CPU处理时间了。</li></ol></li></ul><h3 id="查表判断"><a href="#查表判断" class="headerlink" title="查表判断"></a>查表判断</h3><ul><li><p>为了检测 InnoDB <strong>并发线程数</strong>过多导致系统不可用的情况，一般在系统数据库（mysql库）中创建一个表，比如命名为 <code>health_check</code>，里面只有一行数据，然后定期执行：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mysql.health_check;<br></code></pre></div></td></tr></table></figure></li><li><p>通过这个方法，可以检测出由于并发线程过多导致的数据库不可用的情况。</p></li><li><p>查表判断只能检查数据库<strong>查询事务</strong>是否正常，不能检查<strong>更新事务</strong>是否正常。</p></li></ul><h3 id="更新判断"><a href="#更新判断" class="headerlink" title="更新判断"></a>更新判断</h3><ul><li><p>更新事务需要写 binlog，当 binlog 所在磁盘空间占用率达到 100%，那么所有更新语句和事务提交的 commit 会被阻塞，此时系统还可以正常读数据，使用“更新判断”来检测主库和备库的可用性。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">update mysql.health_check <span class="hljs-keyword">set</span> t_modified<span class="hljs-operator">=</span>now();<br></code></pre></div></td></tr></table></figure></li><li><p>主备更新冲突：可用性检查也是需要写 binlog，一般数据库 A 和数据库 B 的主备关系被设计为双M结构，因此在备库B上执行的检测命令也要发给主库A，<strong>如果A和B都使用相同的更新命令，可能会出现行冲突，导致主备同步停止</strong>。因此 mysql.health_check 这个表不能只有一行数据，表结构应定义两个字段。</p></li><li><p>更新判断的表结构设计和检查命令可以参考以下代码：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 更新判断的建表语句</span><br><span class="hljs-comment">-- drop table health_check;</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `health_check` (<br>`id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;MySQL实例 server_id&#x27;</span>,<br>    `t_modified` <span class="hljs-type">timestamp</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-built_in">current_timestamp</span> comment <span class="hljs-string">&#x27;最后一次执行检测的时间&#x27;</span>,<br>    <span class="hljs-keyword">primary</span> key (`id`)<br>) engine<span class="hljs-operator">=</span>INNODB;<br><br><span class="hljs-comment">-- 检查命令</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> mysql.health_check(id, t_modified) <span class="hljs-keyword">values</span> (@<span class="hljs-variable">@server</span>_id, now()) <span class="hljs-keyword">on</span> duplicate key update t_modified<span class="hljs-operator">=</span>now();<br></code></pre></div></td></tr></table></figure></li><li><p>更新判断存在 “判定慢” 的问题：因为该判断是定时执行的，属于外部检测，具有随机性。在 CPU 负载达到 100% 时，该判断抢占到优先权，执行完并给 HA 系统“数据库正常”的反馈，但此时CPU已达 100%，下一秒数据库由于新连接导致不可用，但 HA 系统需要在隔一段时间才发起检测判断。导致主备切换不及时，服务故障。</p></li></ul><h3 id="内部统计"><a href="#内部统计" class="headerlink" title="内部统计"></a>内部统计</h3><ul><li>MySQL 针对磁盘利用率的问题，在 performace_schema 库中通过 file_summary_by_event_name 表统计了实例过程中内部每次IO请求的时间。</li></ul><blockquote><p>示例：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> performace_schema.file_summary_by_event_name <br><span class="hljs-keyword">where</span> event_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;file_summary_by_event_name&#x27;</span>\G;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220311095103.png" alt="performance_schema.file_summary_by_event_name的一行"></p><ul><li><p>上图统计分为三个部分：所有IO类型的统计、读操作统计、写操作统计以及其他类型数据的统计。</p><ol><li>前三个部分统计都记录了【总和、最小值、平均值、最大值、读/写字节】。</li><li>其他类型数据的统计可以认为是对 fsync 的统计。</li></ol></li><li><p>使用 performace_schema 会<strong>造成数据库性能损耗</strong>，打开所有 performace_schema 项，性能大概会下降 10%。</p></li><li><p>使用<strong>内部统计</strong>方案如下：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 只打开 redo_log 的时间监控</span><br>update setup_instruments <span class="hljs-keyword">set</span> ENABLED<span class="hljs-operator">=</span><span class="hljs-string">&#x27;YES&#x27;</span>, Timed<span class="hljs-operator">=</span><span class="hljs-string">&#x27;YES&#x27;</span> <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%wait/io/file/innodb/innodb_log_file%&#x27;</span>;<br><br><span class="hljs-comment">-- 通过 max_timer 来判断数据库是否出问题，假设单次IO请求时间超过200毫秒属于异常。</span><br><span class="hljs-keyword">select</span> event_name,MAX_TIMER_WAIT <span class="hljs-keyword">FROM</span> performance_schema.file_summary_by_event_name <span class="hljs-keyword">where</span> event_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;file_summary_by_event_name&#x27;</span>\G;<br> <br><span class="hljs-comment">-- 当检测到异常后，取得需要的信息之后，通过下述命令将之前的统计信息清空，后续监控中再次出现这个异常，就可以加入监控累积值。</span><br><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> performance_schema.file_summary_by_event_name<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>select 1 在实际应用中其实十分广泛，MHA（Master High Availablity）默认就是这个方法。</li><li>其他每个改进方案，都会增加额外损耗，无法用“对错”衡量，只能结合业务实际做相应的权衡。</li><li>推荐方案：优先考虑 update 系统表，再配合增加部分检测 performance_schema 的信息。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-12-MySQL%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    <url>/2022/DataBase-MySQL-12-MySQL%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="MySQL-读写分离"><a href="#MySQL-读写分离" class="headerlink" title="MySQL 读写分离"></a>MySQL 读写分离</h2><h3 id="MySQL-读写分离的两种架构："><a href="#MySQL-读写分离的两种架构：" class="headerlink" title="MySQL 读写分离的两种架构："></a>MySQL 读写分离的两种架构：</h3><ul><li>客户端直连：客户端 client 主动做负载均衡，将数据库连接信息放在客户端连接层，由客户端来选择后端数据库进行查询</li><li>带 proxy：在 MySQL 和客户端 client 之间有一个中间代理层 proxy。客户端只连 proxy，由 proxy 根据请求类型和上下文决定请求的分发路由。</li></ul><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220310142600.png" alt="图1 带proxy的读写分离架构"></p><h4 id="两种架构对比："><a href="#两种架构对比：" class="headerlink" title="两种架构对比："></a>两种架构对比：</h4><ol><li>客户端直连，少了proxy转发，查询性能稍微好点 ；整体架构简单，排查问题方便；需要了解后端部署细节，并且在主备切换、库迁移操作时，需要调整数据库连接信息，同时客户端会有感知。一般伴随一个负责后端的组件（zookeeper），让业务端只专注于业务逻辑的开发。</li><li>带 proxy 的架构，对客户端友好，客户端不需要关注后端细节，连接维护、后端信息维护等工作，都由 proxy 完成。proxy需要高可用架构，整体架构复杂，对后端维护团队要求更高，需要很了解才能排查问题。</li></ol><h4 id="无论哪种读写分离架构，都存在“过期读”的问题。"><a href="#无论哪种读写分离架构，都存在“过期读”的问题。" class="headerlink" title="无论哪种读写分离架构，都存在“过期读”的问题。"></a>无论哪种读写分离架构，都存在“过期读”的问题。</h4><blockquote><p>过期读发生在，用户更新完数据之后立刻发起查询，由于存在主备延迟导致从库还未更新，用户查询时选择该从库就会导致过期读现象。</p></blockquote><h3 id="过期读的处理方案："><a href="#过期读的处理方案：" class="headerlink" title="过期读的处理方案："></a>过期读的处理方案：</h3><ol><li>强制走主库；</li><li>sleep 方案；</li><li>判断主备无延迟；</li><li>配合 semi-sync</li><li>等主库位点</li><li>等 GTID</li></ol><h4 id="强制走主库"><a href="#强制走主库" class="headerlink" title="强制走主库"></a>强制走主库</h4><ul><li>对查询请求做分类。通常情况下，查询请求可以分为两类：<ol><li>必须拿到最新结果的请求，则必须走主库。</li><li>可以读到旧数据的请求，才将其发到从库上。</li></ol></li></ul><h4 id="Sleep-1"><a href="#Sleep-1" class="headerlink" title="Sleep(1)"></a>Sleep(1)</h4><ul><li><p>在对从库发起查询之前，先执行 sleep(1)。</p><p>以商家发布商品为例，商品发布后，用 Ajax 直接把客户输入的内容作为“新商品”显示在页面上，让卖家确认商品已经发布成功了，等商家再刷新页面时候已经超过1s，也就达到了 sleep 的目的。</p></li><li><p>严格意义上， sleep(1) 方案不精确：</p><ol><li> 请求只要 0.5 s就可以查到结果，但要等 1 s</li><li>如果主备延迟超过 1 s ，仍有过期读问题。</li></ol></li></ul><h4 id="备库直接判断主备无延迟"><a href="#备库直接判断主备无延迟" class="headerlink" title="备库直接判断主备无延迟"></a>备库直接判断主备无延迟</h4><p>有三种方案可以确保主备无延迟。</p><ol><li><p>通过 <code>show slave status</code> 结果中的 <code>seconds_behind_master</code> 参数的值来衡量。判断 <code>seconds_behind_master == 0</code>，等于0才执行查询请求。<strong>该方法单位为秒</strong>。</p></li><li><p>采用对比位点，通过 <code>show slave status</code> 结果中主库位点和备库执行的最新位点进行比较，如果值相同，表示接收到的日志已经同步完成。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220310151816.png" alt="图2 show slave status部分结果截图"></p><ul><li>主库最新位点：Master_Log_File 和 Read_Master_Log_Pos</li><li>备库执行的最新位点：Relay_Master_Log_File 和 Exec_Master_Log_Pos</li></ul></li><li><p>对比备库上的 GTID 集合，如果 Retrieved_Gtid_Set 集合和 Executed_Gtid_Set 集合相同，则表示备库接收的所有日志已经同步完成。</p><ul><li>Auto_Position = 1 ： 表示这对主备关系使用了 GTID 协议。</li><li>Retrieved_Gtid_Set：备库收到的所有日志的 GTID 集合。</li><li>Executed_Gtid_Set：备库所有执行完成的 GTID 集合。</li></ul></li></ol><ul><li>方案潜在问题：在业务更新的高峰期，可能出现从库上迟迟无法响应查询请求的情况。因为业务频繁请求更新，主库位点或则 GTID 集合也会更新很快，那么上述两个位点等值判断就会一直不成立。</li><li>对比 sleep 方案，准确度提升了，但不够“精确”。因为是根据备库接收上接收到的日志是否执行完成判断主备延迟情况的，没有考虑主库上存在未发送到备库的binlog日志。状态如下图：</li></ul><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220310155004.png" alt="图3 主库保存了binlog但未发给从库的情况"></p><h4 id="semi-sync-备库位点判断"><a href="#semi-sync-备库位点判断" class="headerlink" title="semi-sync + 备库位点判断"></a>semi-sync + 备库位点判断</h4><ul><li><p>semi-sync 确保了所有给客户端发送过确认的事务，都确保了备库已经接收到该日志。其设计如下：</p><ol><li>事务提交时，主库将 binlog 发给备库；</li><li>备库收到 binlog 后，给主库发回 ack 确认；</li><li>主库收到 ack 之后，才给客户端返回 “事务完成” 的确认。</li></ol></li><li><p>通过 semi-sync + 备库位点判断的方案，<strong>只对一主一备的场景成立</strong>，在一主多从场景中，主库等到了一个从库的ack就开始向客户端返回“事务完成”的确认，如果此时客户端的查询落到没有更新的其他从库，就会产生过期读的问题。</p></li><li><p>持续延迟的情况下，可能出现过度等待的问题，状态变化如下图。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220310164311.png" alt="图4 主备持续延迟一个事务的状态"></p></li></ul><h4 id="从库等主库位点方案"><a href="#从库等主库位点方案" class="headerlink" title="从库等主库位点方案"></a>从库等主库位点方案</h4><ul><li>查询主库位点的命令：</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> master_pos_wait(file, pos[,timeout]);<br><br><span class="hljs-comment">-- 执行逻辑：</span><br><span class="hljs-comment">-- 1. 在从库执行</span><br><span class="hljs-comment">-- 2. 参数 file 和 pos 指的是主库上的文件名和位置</span><br><span class="hljs-comment">-- 3. timeout 可选，设置为正整数N：表示这个函数最多等待 N 秒</span><br><span class="hljs-comment">-- 命令返回结果</span><br><span class="hljs-comment">-- 1. 正常结果返回一个正整数M：表示从命令开始执行，到引用为 file 和 pos 表示的binlog位置，执行了多少事务。</span><br><span class="hljs-comment">--2. 执行期间，备库同步线程异常，返回 NULL</span><br><span class="hljs-comment">--3. 等待超过 N 秒，返回 -1</span><br><span class="hljs-comment">--4. 刚开始执行时，发现已经执行过这个位置，返回 0</span><br></code></pre></div></td></tr></table></figure><p>对于图4 状态2，先执行 trx1，在执行一个查询请求的逻辑，为了保证能够查到正确的数据，可以使用如下逻辑：</p><ol><li>trx1 事务更新完成后，马上执行 <code>show master status</code> 得到当前主库执行到的 File 和 Position；</li><li>选定一个从库执行查询语句；</li><li>在从库上执行 <code>select master_pos_wait(file, pos[,timeout]);</code> </li><li>如果返回值 M&gt;=0，则在这个从库上执行查询语句；否则到主库执行查询语句。</li></ol><ul><li><p>上述流程如下图：</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220310223248.png" alt="master_pos_wait流程"></p></li></ul><h4 id="从库等待主库-GTID-同步方案"><a href="#从库等待主库-GTID-同步方案" class="headerlink" title="从库等待主库 GTID 同步方案"></a>从库等待主库 GTID 同步方案</h4><ul><li><p>从库查询 GTID 的命令（如果数据库开启了 GTID 模式，才可以使用”从库等待主库 GTID 同步“的方案）</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> wait_for_executed_gtid_set(gtid_set,<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">-- 执行逻辑：</span><br><span class="hljs-comment">--1. 等待，直到这个库执行的任务中包含传入的 gtid_set，返回 0</span><br><span class="hljs-comment">--2. 超时返回 1</span><br></code></pre></div></td></tr></table></figure></li><li><p>在等待主库位点的方案中，执行完更新任务之后，需要主动去主库执行 show master status。从 MySQL 5.7.6 版本开始，允许在执行完更新类事务后，把这个事务的 GTID 返回给客户端。通过这种方案可以减少一次查询。</p></li><li><p>“从库等待主库 GTID 同步“ 方案 的执行流程如下：</p><ol><li>trx 1 事务更新完成之后，从返回包中直接获取这个事务的 GTID，记为 gtid1; （需要将参数 <code>session_track_gtids</code> 设置为 OWN_GTID，然后客户端通过 API 接口 <code>mysql_session_track_get_first</code> 从返回包中解析出 GTID 的值。）</li><li>选定一个从库执行查询语句；</li><li>在从库上执行 <code>select wait_for_executed_gtid_set(gtid1,1);</code></li><li>如果返回值是 0， 则在这个从库上执行查询语句；否则到主库执行查询语句；</li></ol></li><li><p>上述方案流程如下图：</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220310230804.png" alt="wait_for_executed_gtid_set流程"></p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上述 6 种方案，有些方案看上去是做了妥协，有些方案看上去不是很靠谱，当都有实际应用，需要根据业务需求进行选择。</p><p>即使是最后”等待位点“和”等待GTID“的两个方案，虽然可靠，但需要权衡当所有从库都延迟时，那么请求都会落在主库上，这时候主库上的压力会陡增，甚至可能导致主库崩溃。</p><p>实际应用中是通过几个方案混合使用的。</p><ol><li>先对客户请求做分类，区分哪些请求可以接受过期读，哪些请求完全不能接受过期读；对于不能接受过期读的语句，再使用等 GTID 或者等位点的方案。可以减轻风险。</li></ol><blockquote><p>举例：</p></blockquote><ul><li>可以接受过期读的请求可能为：商品浏览、商品发布、购物车信息浏览等查询请求。</li><li>不可以接受过期读的请求为：金融相关业务，付款、转账完成后的请求。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-11-%E4%B8%80%E4%B8%BB%E5%A4%9A%E4%BB%8E%E7%9A%84%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8A%E5%88%87%E6%8D%A2%E6%B5%81%E7%A8%8B/"/>
    <url>/2022/DataBase-MySQL-11-%E4%B8%80%E4%B8%BB%E5%A4%9A%E4%BB%8E%E7%9A%84%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8A%E5%88%87%E6%8D%A2%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>基于同步位点的切换流程</p><p>基于 GTID 的切换流程</p><p>在 GTID 模式下，每个事务都会根一个 GTID意义对应。GTID 的生成方式有两种，使用哪种取决于 session 变量gtid_next 的值。</p><ol><li>gtid_next=automatic，使用默认值。<ol><li>记录 binlog 时，记录一行 <code>SET @@SESSION.GTID_NEXT=&#39;server_uuid:gno&#39;;</code></li><li>将 GTID 加入本实例的 GTID_SET 集合。</li></ol></li><li>gtid_next 是一个指定的 GTID值。比如通过 <code>set gtid_next=&#39;current_gtid&#39;;</code> 指定 gtid_next 为 current_gtid。该指定值有两种情况：<ol><li>如果 current_gtid 已经存在 GTID_SET 集合中，接下来执行的这个事务会被忽略</li><li>如果 current_gtid 不存在 GTID_SET 集合，就将这个 current_gtid 分配给下个事务，此时 gno 不用+1。</li></ol></li></ol><blockquote><p>注意：一个 current_gtid 只能给一个事务使用，该事务提交之后，执行下一个事务时就执行 set 命令，将 gtid_next 设置成另一个 gtid 后者 automatic。</p></blockquote><p>每个 MySQL 实例维护一个 GTID_SET 集合，用了对应 “这个实例执行过的所有事务”。</p><blockquote><p>案例</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t` (<br>`id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`c` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-10-MySQL-5-7-%E7%9A%84%E5%B9%B6%E8%A1%8C%E5%A4%8D%E5%88%B6%E7%AD%96%E7%95%A5/"/>
    <url>/2022/DataBase-MySQL-10-MySQL-5-7-%E7%9A%84%E5%B9%B6%E8%A1%8C%E5%A4%8D%E5%88%B6%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<p>MySQL 5.7 的并行复制策略</p><p>基于 WRITESET 的并行复制策略：binlog-transaction-dependency-tracking</p><p> ① COMMIT_ORDER： 按 prepare 和 commit 来判断两个事务是否可以并行</p><p>② WRITESET：计算一个事务中所有涉及更新的行的 hash 值组成 WRITESET 集合。判断两个事务的 WRITESET 集合是否没有交集，没有则可以并行。</p><p>③ WRITESET_SESSION：在 WRITESET 的基础上增加了约束，即在主库上<strong>同一个线程执行的2个事务区分先后顺序</strong>，在从库上执行的时候也需要按照该先后顺序执行。</p><blockquote><p>问题：假设一个 MySQL 5.7.22 版本的主库，单线程插入了很多数据，经过 3 个小时后，需要给这个主库搭建一个相同版本的备库。为了让备库更快追上主库，需要在备库上开启并行复制。需要将 <code>binlog-transaction-dependency-tracking</code> 设置为哪个参数?</p></blockquote><p>设置为 WRITESET。由于主库是单线程压力模式，每个事务的 commit_id 不同，设置为 COMMIT_ORDER 的话，从库也是单线程执行。WRITESET_SESSION 的话，要求同一个线程的事务区分先后顺序，所有在备库上也会退化成单线程复制。 </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-08-MySQL%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/"/>
    <url>/2022/DataBase-MySQL-08-MySQL%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-索引失效情况"><a href="#MySQL-索引失效情况" class="headerlink" title="MySQL 索引失效情况"></a>MySQL 索引失效情况</h1><p>MySQL 索引失效原因可能有：</p><ol><li>条件字段函数操作</li><li>字符串隐式转换</li><li>表连接时字符集不同</li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>假设现在维护了一个交易系统，其中交易记录表 tradelog 包含交易流水号（tradeid）,交易员id(operator)，交易时间(t_modified)。</p><p>建表语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tradelog` (<br>`id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`tradeid` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`operator` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`t_modified` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>KEY `tradeid` (`tradeid`),<br>KEY `t_modified` (`t_modified`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></div></td></tr></table></figure><h2 id="对索引字段进行函数计算"><a href="#对索引字段进行函数计算" class="headerlink" title="对索引字段进行函数计算"></a>对索引字段进行函数计算</h2><blockquote><p>需求一：统计发生在所有年份中7月份的交易记录总数。</p></blockquote><p>SQL 逻辑可以这么写：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> tradelog <span class="hljs-keyword">where</span> <span class="hljs-keyword">month</span>(t_modified)<span class="hljs-operator">=</span><span class="hljs-number">7</span>;<br></code></pre></div></td></tr></table></figure><p>在这种情况下，虽然 <code>t_modified</code> 上存在索引，但在上面 SQL 中对字段做了函数计算，破坏了索引值的有序性，因此优化器决定放弃走树搜索的功能。</p><p>InnoDB 虽然该选择了该索引，但对该索引树进行了<strong>全索引扫描</strong>。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220301095623.png" alt="字段使用函数计算时sql扫描流程"></p><p>为了使用 <code>t_modified</code> 索引，可以将该 sql 写法改成: </p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> tradelog <span class="hljs-keyword">where</span><br>(t_modified <span class="hljs-operator">&gt;=</span> <span class="hljs-string">&#x27;2016-7-1&#x27;</span> <span class="hljs-keyword">and</span> t_modified <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;2016-8-1&#x27;</span>) <span class="hljs-keyword">or</span><br>(t_modified <span class="hljs-operator">&gt;=</span> <span class="hljs-string">&#x27;2017-7-1&#x27;</span> <span class="hljs-keyword">and</span> t_modified <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;2017-8-1&#x27;</span>) <span class="hljs-keyword">or</span><br>(t_modified <span class="hljs-operator">&gt;=</span> <span class="hljs-string">&#x27;2018-7-1&#x27;</span> <span class="hljs-keyword">and</span> t_modified <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;2018-8-1&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>这种做法虽然能使用索引，但是当有其他新增年份的时候，需要修改 sql 语句。</p><blockquote><p>可以在业务代码中将年份的拼接进sql来达到一个完整的逻辑。</p></blockquote><p>另外，对于<code>select *fromtradelog where id + 1 = 10000</code>这个SQL语句，这个加1操作并不会改变有序性，但是MySQL优化器还是不能用id索引快速定位到9999这一行。所以，需要你在写SQL语句的时候，手动改写成 <code>where id = 10000 -1</code> 才可以。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-08-MySQL%E7%B4%A2%E5%BC%95%E5%8A%A0%E9%94%81/"/>
    <url>/2022/DataBase-MySQL-08-MySQL%E7%B4%A2%E5%BC%95%E5%8A%A0%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h2 id="MySQL-索引加锁"><a href="#MySQL-索引加锁" class="headerlink" title="MySQL 索引加锁"></a>MySQL 索引加锁</h2><h3 id="MySQL-数据加锁准则：2个原则，2-个优化，1个bug"><a href="#MySQL-数据加锁准则：2个原则，2-个优化，1个bug" class="headerlink" title="MySQL 数据加锁准则：2个原则，2 个优化，1个bug"></a>MySQL 数据加锁准则：2个原则，2 个优化，1个bug</h3><ul><li>2 个原则</li></ul><ol><li>单位为 next_key，前开后闭</li><li>访问到的对象才加锁</li></ol><ul><li>2 个优化</li></ul><ol><li>唯一索引等值查询，找到等值条件时后，next-key lock 退化为行锁。</li><li>非唯一索引等值查，找到满足条件加next-key lock，然后向右遍历加锁，直到到最后一个值时退化为间隙锁</li></ol><ul><li>1 个bug</li></ul><ol><li>唯一索引范围查询需要找到不满足条件的第一个值为止</li></ol><blockquote><p>例子：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `t` (<br>`id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    `c` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    `d` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    <span class="hljs-keyword">primary</span> key (`id`),<br>    key `c` (`c`)<br>) engine <span class="hljs-operator">=</span> INNODB;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>),(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>),(<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>),(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>),(<span class="hljs-number">25</span>,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>);<br></code></pre></div></td></tr></table></figure><h3 id="不等号条件中的等值查询分析"><a href="#不等号条件中的等值查询分析" class="headerlink" title="不等号条件中的等值查询分析"></a>不等号条件中的等值查询分析</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">begin</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> id <span class="hljs-operator">&gt;</span> <span class="hljs-number">9</span> <span class="hljs-keyword">and</span> id <span class="hljs-operator">&lt;</span> <span class="hljs-number">12</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">desc</span> <span class="hljs-keyword">for</span> update;<br></code></pre></div></td></tr></table></figure><ul><li>分析：<ol><li><code>order by id desc</code>：从右往左找，先找右边界 <code>id=12</code>，在表 t 中，找到 (10,15]。由于是主键唯一索引，退化为间隙锁。</li><li>往左遍历进行<strong>范围查找</strong>，找到满足 id&gt;9 的第一个左边界为 <code>id=5</code>，因为扫描到 id=5，会该行上加 next-key lock (0,5]。</li></ol></li><li>因此，该查询加锁为 (0,5]，(5,10]，(10,15)。</li></ul><h3 id="等值查询过程分析"><a href="#等值查询过程分析" class="headerlink" title="等值查询过程分析"></a>等值查询过程分析</h3><blockquote><p>等值 sql-1</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">begin</span>;<br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> c <span class="hljs-keyword">in</span> (<span class="hljs-number">5</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>) lock <span class="hljs-keyword">in</span> share mode;<br></code></pre></div></td></tr></table></figure><ul><li>分析：<ol><li>执行 c = 5，通过非唯一索引树找到 c=5 的行，加锁 (0,5]，向右遍历找到 c=10，满足优化2，加锁 (5,10)</li><li>执行 c = 10，加锁范围 (5,10]，(10,15)</li><li>执行 c=20，加锁范围 (15,20]，(20,25)</li></ol></li><li>因此，该范围的加锁顺序是 c=5, c=10, c= 20；加锁范围为：(0,5]，(5,10]，(10,15)，(15,20]，(20,25)</li></ul><blockquote><p>等值 sql-2</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> c <span class="hljs-keyword">in</span> (<span class="hljs-number">5</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> c <span class="hljs-keyword">desc</span> <span class="hljs-keyword">for</span> update;<br></code></pre></div></td></tr></table></figure><ul><li><p>分析：</p><p>加锁范围和“等值sql-1”的加锁范围一致，但由于存在 <code>order by c desc</code>，所以两者加锁顺序不一致。sql -2 的顺序为 c=20，c=10，c=5。</p><p>潜在问题：sql-1 和 sql-2 需要锁住相同资源，但是加锁顺序相反，因此 sql-1 和 sql-2 并发执行时，可能出现死锁。</p></li></ul><h3 id="死锁分析"><a href="#死锁分析" class="headerlink" title="死锁分析"></a>死锁分析</h3><ul><li><p><code>show engine oinnodb status</code> 查看死锁信息；（命令会输出很多信息，LATESTDETECTED DEADLOCK：记录最后一次死锁信息）</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220311143601.png" alt="image-20220311143559893"></p></li><li><p>上图显示了两个事务的死锁情况以及InnoDB选择回滚的事务</p></li><li><p>分析：</p><ol><li><p>事务1（红框）：该事务信息只说明了等锁的状态，在等待(c=10,id=10)这一行锁，没有说明该事务占有的其他锁。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">WAITING <span class="hljs-keyword">FOR</span> THIS LOCK <span class="hljs-keyword">TO</span> BE GRANTED<span class="hljs-comment">--表示的是这个事务在等待的锁信息；</span><br>index c <span class="hljs-keyword">of</span> <span class="hljs-keyword">table</span> `test`.`t` <span class="hljs-comment">-- 显示了该事务在等待表t的索引c上的锁。</span><br>lock mode S waiting <span class="hljs-comment">-- 表示要加一个读锁，当前为等待状态</span><br>Record lock <span class="hljs-comment">-- 表示这是一个记录锁</span><br>n_fields <span class="hljs-number">2</span><span class="hljs-comment">-- 表示这个记录时两列，即字段c和主键字段 id</span><br><span class="hljs-number">0</span>:len <span class="hljs-number">4</span>; hex <span class="hljs-number">0000000</span>a; <span class="hljs-keyword">asc</span>  ;; <span class="hljs-comment">-- 第一个字段 c，值为“十六进制a”，也就是10；asc表示值中“可打印字符”，值为10，不可打印，显示空格。</span><br><span class="hljs-number">0</span>:len <span class="hljs-number">4</span>; hex <span class="hljs-number">0000000</span>a; <span class="hljs-keyword">asc</span>  ;; <span class="hljs-comment">-- 第二个字段 id</span><br></code></pre></div></td></tr></table></figure></li><li><p>事务2（黄框）：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">HOLDS THE LOCK(S)<span class="hljs-comment">-- 用来显示这个事务持有哪些锁</span><br>index c <span class="hljs-keyword">of</span> <span class="hljs-keyword">table</span> `test`.`t` <span class="hljs-comment">-- 锁在表t的索引c上</span><br>hex <span class="hljs-number">00000000</span>a 和 hex <span class="hljs-number">00000014</span> <span class="hljs-comment">-- 表示该事务持有 c=10 和 c=20 这两个记录锁</span><br>WAITING <span class="hljs-keyword">FOR</span> THIS LOCK <span class="hljs-keyword">TO</span> BE GRANTED <span class="hljs-comment">-- 表示在等 (c=5, id=5) 这个记录锁</span><br></code></pre></div></td></tr></table></figure></li><li><p>比较：</p><ul><li>“lock in share mode” 的语句持有 c=5 的锁，在等 c=10 的锁；</li><li>“for update” 的语句持有  c=10 和 c = 20 的锁，在等 c=5 的锁；</li></ul></li><li><p>结论：</p><ul><li>锁是一个一个加的，要尽量避免死锁，对同一组资源最好按照相同的访问顺序。</li><li>发生死锁的时刻， for update 的语句占有资源更多，回滚成本更大，所以 InnoDB 选择了成本小的 lock in share mode 的语句进行回滚。</li></ul></li></ol></li></ul><h3 id="锁等待分析"><a href="#锁等待分析" class="headerlink" title="锁等待分析"></a>锁等待分析</h3><ul><li><p>场景： delete 导致间隙变化：session A 加锁资源： (5,10)，(10,15]。并没有锁住 id=10 这一行，所以一开始 session B 可以删除 id=10 ，但是重新 insert id=10 就被锁了。</p><table><thead><tr><th>session A</th><th>session B</th></tr></thead><tbody><tr><td>begin;<br />select * from t where id &gt; 10 and id &lt;= 15 for update;</td><td></td></tr><tr><td></td><td>delete from t where id = 10;<br />(Query OK)<br /><br />insert into t values(10,10,10);<br />(<strong>blocked</strong>)</td></tr></tbody></table></li><li><p>通过 <code>show engine innodb status;</code> 查看锁等待信息。在 TRANSACTIONS 这一节</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220311153552.png" alt="image-20220311153551195"></p><p>分析：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">n_fields <span class="hljs-number">5</span> 表示这个记录有 <span class="hljs-number">5</span> 列：<br><span class="hljs-number">0</span>:len <span class="hljs-number">4</span>;hex <span class="hljs-number">0000000</span>f; <span class="hljs-keyword">asc</span> ;; <span class="hljs-comment">-- 主键id=15,因为 id=10 不在了，表示间隙锁 (5,15)</span><br><span class="hljs-number">1</span>:len <span class="hljs-number">6</span>; hex <span class="hljs-number">000000000513</span>;<span class="hljs-keyword">asc</span> ;; <span class="hljs-comment">-- 长度为6字节的事务id，表示最后一个修改该行的事务为 trxid=1299</span><br><span class="hljs-number">2</span>:len <span class="hljs-number">7</span>; hex b000001250134; <span class="hljs-keyword">asc</span> <span class="hljs-operator">%</span><span class="hljs-number">4</span>;; <span class="hljs-comment">-- 长度为7字节的回滚段信息。</span><br><span class="hljs-number">3.</span><span class="hljs-number">.4</span>.. <span class="hljs-comment">-- 后两列为 c 和 d 的值，都为 15</span><br></code></pre></div></td></tr></table></figure><p>结果：由于 session B 执行的 delete 语句把 id=10 这一行删掉了，导致 session A 中原来两个间隙 (5,10) 和 (10,15) 变成了一个 (5,15)</p></li></ul><h3 id="update-情况下的锁分析"><a href="#update-情况下的锁分析" class="headerlink" title="update 情况下的锁分析"></a>update 情况下的锁分析</h3><table><thead><tr><th>session A</th><th>session B</th></tr></thead><tbody><tr><td>begin;<br />select * from t where c &lt; 5 lock in share mode;</td><td></td></tr><tr><td></td><td>update t set c = 1 where c = 5;<br />(Query OK;)<br /><br />update t set c = 5 where c = 1;<br />(<strong>blocked</strong>)</td></tr></tbody></table><ul><li><p>分析</p><ol><li><p>session A 在索引 c 上加锁范围成：为：(5,10]、(10,15]、(15,20]、(20,25] 和 (25,,supernum]</p><blockquote><p>由于 c &gt; 5 找到的第一个记录为 c=10，因此不会给 c=5 加 (0,5] 的next-key lock </p></blockquote></li><li><p>session B 上第一个update 语句可以拆成 insert(c=1,id=5)； delete(c=5,id=5)。经过这个操作之后，session A的上锁范围变成：(1,10]、(10,15]、(15,20]、(20,25] 和 (25,,supernum]</p></li><li><p>执行 session B 的第二个update语句：insert(c=5,id=5)；delete(c=1,id=5)的时候，试图在 (1,10]之间 insert(c=5,id=5)，因此blocked。</p></li></ol></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>加锁规则：2个原则2个优化1个bug</li><li>通过 explain的结果，分析 SQL 与的执行流程，对索引组织表、索引、锁应该有比较清晰的了解。</li><li>间隙锁取决于查找记录的间隙的两个边界，如果边界发生变化，那么间隙锁住的范围也会有所变化。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-07-MySQL-orderby%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/DataBase-MySQL-07-MySQL-orderby%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="order-by-两种排序方式"><a href="#order-by-两种排序方式" class="headerlink" title="order by 两种排序方式"></a>order by 两种排序方式</h1><p><code>Using filesort</code>:<br>    1. 全字段排序<br>    2. rowid 排序</p><p>假设查询城市是“杭州”的所有人名称，并按姓名排序返回前 1000 个人的姓名、年龄。</p><h2 id="构建测试环境"><a href="#构建测试环境" class="headerlink" title="构建测试环境"></a>构建测试环境</h2><ol><li>表定义<figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `person_t`(<br>    `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    `city` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    `age` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    `addr` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    <span class="hljs-keyword">primary</span> key (`id`),<br>    key `city`(`city`)<br>) engine<span class="hljs-operator">=</span>INNODB;<br></code></pre></div></td></tr></table></figure></li><li>数据<figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person_t <span class="hljs-keyword">values</span><br>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;安庆&#x27;</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">13</span>,<span class="hljs-string">&#x27;&#x27;</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;安庆&#x27;</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-string">&#x27;&#x27;</span>),<br>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;杭州&#x27;</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-number">25</span>,<span class="hljs-string">&#x27;&#x27;</span>),<br>(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;杭州&#x27;</span>,<span class="hljs-string">&#x27;赵六&#x27;</span>,<span class="hljs-number">26</span>,<span class="hljs-string">&#x27;&#x27;</span>),<br>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;杭州&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">27</span>,<span class="hljs-string">&#x27;&#x27;</span>),<br>(<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;杭州&#x27;</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol start="3"><li><p>排序语句</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> city,name,age <span class="hljs-keyword">from</span> person_t <span class="hljs-keyword">where</span> city<span class="hljs-operator">=</span>&quot;杭州&quot; <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> name limit <span class="hljs-number">1000</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>分析排序过程<br><code>where</code>用到了索引 city。</p><h3 id="全字段排序"><a href="#全字段排序" class="headerlink" title="全字段排序"></a>全字段排序</h3></li></ol><p>流程如下：<br><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220228103420.png" alt="图1 全字段排序流程"></p><p>“按name排序”，可能在内存中完成，也可能使用外部排序。取决于排序所需的内存和参数 sort_buffer_size.</p><ul><li>如果排序的数量小于 sort_buffer_size。则直接在内存中进行排序，否则使用磁盘临时文件辅助排序。</li></ul><blockquote><p>判断一个排序语句是否使用了临时文件？</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/* 打开optimizer_trace，只对本线程有效 */</span><br><span class="hljs-keyword">SET</span> optimizer_trace<span class="hljs-operator">=</span><span class="hljs-string">&#x27;enabled=on&#x27;</span>;<br><span class="hljs-comment">/* @a保存Innodb_rows_read的初始值 */</span><br><span class="hljs-keyword">select</span> VARIABLE_VALUE <span class="hljs-keyword">into</span> <span class="hljs-variable">@a</span> <span class="hljs-keyword">from</span> performance_schema.session_status <span class="hljs-keyword">where</span> variable_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Innodb_rows_read&#x27;</span>;<br><span class="hljs-comment">/* 执行语句 */</span><br><span class="hljs-keyword">select</span> city, name,age <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> city<span class="hljs-operator">=</span><span class="hljs-string">&#x27;杭州&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> name limit <span class="hljs-number">1000</span>;<br><span class="hljs-comment">/* 查看 OPTIMIZER_TRACE 输出 */</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `information_schema`.`OPTIMIZER_TRACE` `\G`;<br><span class="hljs-comment">/* @b保存Innodb_rows_read的当前值 */</span><br><span class="hljs-keyword">select</span> VARIABLE_VALUE <span class="hljs-keyword">into</span> <span class="hljs-variable">@b</span> <span class="hljs-keyword">from</span> performance_schema.session_status <span class="hljs-keyword">where</span> variable_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Innodb_rows_read&#x27;</span>;<br><span class="hljs-comment">/* 计算Innodb_rows_read差值 */</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@b</span><span class="hljs-operator">-</span><span class="hljs-variable">@a</span>; <span class="hljs-comment">-- 使用 INNODB引擎的话，把数据从临时表中取出来时候，会让 Innodb_rows_read的值+1.</span><br></code></pre></div></td></tr></table></figure><h3 id="rowid-排序"><a href="#rowid-排序" class="headerlink" title="rowid 排序"></a>rowid 排序</h3><p>当待排序的数据行长度超过 max_length_for_sort_data 时，MySQL 认为单行过长，需要换成row_id排序。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> max_length_for_sort_data <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br><span class="hljs-comment">-- 查询 select city,name,age 的总长度定义为36，将此参数设置为16，使得 MySQL 选择row_id排序。</span><br></code></pre></div></td></tr></table></figure><p>rowid 排序流程<br><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220228110159.png" alt="image-20220228110157948"></p><blockquote><p>rowid 排序需要多访问一次表t的主键索引。获取需要的结果集数据返回给客户端。（一条一条直接返回，不需要额外的内存空间存储）</p></blockquote><h3 id="MySQL-排序算法的选择"><a href="#MySQL-排序算法的选择" class="headerlink" title="MySQL 排序算法的选择"></a>MySQL 排序算法的选择</h3><p>MySQL 设计思想：<strong>如果内存够，就要多利用内存，尽量减少磁盘访问。</strong></p><blockquote><p>对于InnoDB表来说，rowid排序会要求回表多造成磁盘读，因此不被优先选择。</p></blockquote><p>因此，只有在排序内存过小的情况下，才会选择rowid排序算法。否则会优先选择“全字段排序”，将结果集中的字段放在 sort_buffer 中。<br>在内存中对 sort_buffer 排序完成之后直接从返回查询结果，不需要再进行回表查询。</p><blockquote><p>不是所有 order by 语句，都需要额外的排序。通过<strong>索引覆盖</strong>可以避免额外的排序操作。</p></blockquote><p>在 city，name，age 上建立联合索引。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">alert <span class="hljs-keyword">table</span> person_t <span class="hljs-keyword">add</span> index city_name(city,name);  <span class="hljs-comment">-- 可以避免排序，但是不能避免回表查询</span><br>alert <span class="hljs-keyword">table</span> person_t <span class="hljs-keyword">add</span> index city_name_age(city,name,age); <span class="hljs-comment">-- 索引覆盖，直接在二级索引树上就能得到结果集。</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220228173409.png" alt="图3 建立联合索引排序流程"></p><p>使用联合索引/索引覆盖，可以避免额外的排序操作，但使用联合索引是有维护代价的。需要在设计时进行相应的权衡。</p><h1 id="如何进行随机排序"><a href="#如何进行随机排序" class="headerlink" title="如何进行随机排序"></a>如何进行随机排序</h1><blockquote><p>需求: 在一个单词表中，随机选择 3 个单词进行展示。该单词表随着用户的添加而增大。</p></blockquote><h2 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h2><p>建立单词表</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `words` (<br>`id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) NOTNULLAUTO_INCREMENT,<br>`word` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) DEFAULTNULL,<br><span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB;<br></code></pre></div></td></tr></table></figure><p>定义 procedure 存储过程</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">delimiter ;;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> idata()<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> i <span class="hljs-type">int</span>;<br><span class="hljs-keyword">set</span> i<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>while i<span class="hljs-operator">&lt;</span><span class="hljs-number">10000</span> do<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> words(word) <span class="hljs-keyword">values</span>(concat(<span class="hljs-type">char</span>(<span class="hljs-number">97</span><span class="hljs-operator">+</span>(i div1000)), <span class="hljs-type">char</span>(<span class="hljs-number">97</span><span class="hljs-operator">+</span>(i <span class="hljs-operator">%</span> <span class="hljs-number">1000</span> div100)), <span class="hljs-type">char</span>(<span class="hljs-number">97</span><span class="hljs-operator">+</span>(i <span class="hljs-operator">%</span> <span class="hljs-number">100</span> div10)), <span class="hljs-type">char</span>(<span class="hljs-number">97</span><br><span class="hljs-keyword">set</span> i<span class="hljs-operator">=</span>i<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span> while;<br><span class="hljs-keyword">end</span>;;<br></code></pre></div></td></tr></table></figure><p>调用 procedure 存储过程</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">delimiter ;<br><span class="hljs-keyword">call</span> idata();<br></code></pre></div></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><h3 id="1-使用-order-by-rand-随机获取-3-个单词"><a href="#1-使用-order-by-rand-随机获取-3-个单词" class="headerlink" title="1. 使用 order by rand() 随机获取 3 个单词"></a>1. 使用 <code>order by rand()</code> 随机获取 3 个单词</h3><p>通过 <code>order by rand()</code>  随机选择 3 个单词展示的sql如下。使用简单，但执行流程比较复杂。执行代价较高。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> word <span class="hljs-keyword">from</span> words <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> rand() limit <span class="hljs-number">3</span>;<br></code></pre></div></td></tr></table></figure><p>该执行流程中可能会使用到内存临时表/磁盘临时表。</p><ol><li>当 <code>order by rand()</code> 使用了<strong>内存临时表</strong>，对内存临时表进行排序时使用 rowid 排序。</li><li>当 <code>order by rand()</code> 使用了<strong>磁盘临时表</strong>，如果 limit 返回的结果集数据量不大，则会使用<strong>优先队列排序算法</strong>获取结果集。（即构造一个 limit n 的大顶堆，对临时表中的数据进行遍历，找出满足条件排序的数据行返回）</li></ol><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220301012727.png" alt="使用‘内存临时表’执行流程"></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220301012904.png" alt="使用‘磁盘临时表’优先队列算法排序过程"></p><h3 id="2-随机排序算法-实现该业务逻辑"><a href="#2-随机排序算法-实现该业务逻辑" class="headerlink" title="2. 随机排序算法 实现该业务逻辑"></a>2. <strong>随机排序算法</strong> 实现该业务逻辑</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-06-MySQL-%E5%88%A0%E9%99%A4%E8%A1%A8%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/DataBase-MySQL-06-MySQL-%E5%88%A0%E9%99%A4%E8%A1%A8%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库表空间回收"><a href="#数据库表空间回收" class="headerlink" title="数据库表空间回收"></a>数据库表空间回收</h1><blockquote><p>为什么简单地删除表数据无法达到表空间回收的效果？  </p></blockquote><ul><li>一个 InnoDB 表包含两个部分：表结构定义和数据。</li><li>参数 innodb_file_per_table: 控制表数据存放在共享表空间，还是单独的文件。从 MySQL 5.6.6 开始，该参数为 ON，即每个表数据单独存放。<ul><li>innodb_file_per_table = OFF 时，表数据存放在系统表空间中，和数据字典存在一起</li><li>innodb_file_per_table = ON 时，每个 InnoDB 表数据单独存放在以 .ibd 结尾的文件中。<br>将 innodb_file_per_table 设置为 ON，然后通过 drop table 命令删除整张表数据的话，就可以回收表空间。但是大多数情况下都是删除某些数据行，而不是删除整站数据表。</li></ul></li></ul><h1 id="InnoDB-中的数据删除"><a href="#InnoDB-中的数据删除" class="headerlink" title="InnoDB 中的数据删除"></a>InnoDB 中的数据删除</h1><ol><li>删除的是某行数据：该行被标记删除，该行的位置可以留给之后限定范围的数据行申请使用。（数据页中存在数据碎片）</li><li>删除的是整页数据（即删除的是一整个叶子节点的数据）：整个数据页被标记删除，整页位置留给该表之后新的叶子节点申请使用。</li></ol><ul><li>共同点：删除只是标记删除，表示该行位置 or 该数据页“可复用”。不能回收表空间。</li><li>区别：数据页的复用跟记录的复用不同。数据页可以随机复用，记录只能是特定数据行才能复用。</li></ul><p>引起数据碎片的操作有：delete、insert、update。</p><ul><li>Insert 操作可能会造成数据页的分裂。这样就多张数据页上就存在数据碎片，空间利用率很低。因此，主键的最好选择业务无关的自增长序列。来维持数据库的空间的有效利用。</li><li>Update 操作可以理解为：删除一个旧的值，再插入一个新值。这样也会造成数据碎片。<br>因此，经过大量增删改操作的表，都可能是存在空洞的。可以通过“重建表”，来将这些空洞去掉，以达到收缩表空间的目的。</li></ul><h1 id="MySQL-的三种重建表"><a href="#MySQL-的三种重建表" class="headerlink" title="MySQL 的三种重建表"></a>MySQL 的三种重建表</h1><ol><li><code>alter table A engine=InnoDB;</code>： MySQL 5.6 之后，该过程是 Online 且 inplace 的。（后面会解释）</li><li><code>analyze table A;</code> ：只是对表的索引信息做重新统计，没有修改数据，过程中加了 MDL 读锁。</li><li><code>optimize table A;</code>：等于 alter + analyze 前面两个命令的组合。</li></ol><h2 id="alter-talbe-A-engine-InnoDB-流程"><a href="#alter-talbe-A-engine-InnoDB-流程" class="headerlink" title="alter talbe A engine=InnoDB; 流程"></a><code>alter talbe A engine=InnoDB;</code> 流程</h2><p>InnoDB 重建表流程：</p><ol><li>建立临时文件 tmp，扫描表 A 主键的所有数据页</li><li>用数据页中表 A 的记录生成 B+ 树，存储到临时文件中</li><li>生成临时文件的过程中，将所有对表 A 的操作记录在一个日志文件（row_log）中</li><li>临时文件生成后，将 row_log 应用到临时文件中，得到一个逻辑数据上和表 A 相同的数据文件。（Online）</li><li>用临时文件替换表 A 的数据文件。</li></ol><blockquote><p>MySQL 5.6 之前，没有 row_log，因此在重建表过程中，不能有更新操作。即该操作是非 Online 的。5.6 版本只会，对重建表操作做了优化。通过 row_log 实现了 Online DDL。</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220228003518.png" alt="图1 MySQL 5.6之前的重建表流程"></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220228003612.png" alt="图2 MySQL 5.6之后的重建表流程"></p><h2 id="Online-和-inpalce"><a href="#Online-和-inpalce" class="headerlink" title="Online 和 inpalce"></a>Online 和 inpalce</h2><ol><li>从图1中可以看出，tmp_table 是serve层创建的，因此对数据库来说看得到表复制，因此是非 inplace。</li><li>从图2中可以看出，tmp_file 是InnoDB引擎创建的，对于 MySQL server层不可见，因此是 inplace的。</li></ol><blockquote><p>代码上：<br>强制拷贝表，对应图1执行流程。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> A engine<span class="hljs-operator">=</span>innodb,ALGORITHM<span class="hljs-operator">=</span><span class="hljs-keyword">copy</span>;<br></code></pre></div></td></tr></table></figure><p>默认 alter 重建表其实是inplace的，对应图2执行流程。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> A engine<span class="hljs-operator">=</span>innodb,ALGORITHM<span class="hljs-operator">=</span>inpalce;<br></code></pre></div></td></tr></table></figure><p>Online 和 inpalce 两个逻辑之间的关系：</p><ol><li>DDL 过程如果是 Online，一定是 inplace 的；</li><li>DDL 过程如果是 inplace的，不一定是 Online。如，添加全文索引（FULLTEXT index）和空间索引（SPATIAL index）</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-05-MySQL%E6%A6%82%E6%8B%AC/"/>
    <url>/2022/DataBase-MySQL-05-MySQL%E6%A6%82%E6%8B%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="01-基础部分"><a href="#01-基础部分" class="headerlink" title="01-基础部分"></a>01-基础部分</h1><h2 id="1-MySQL-执行过程"><a href="#1-MySQL-执行过程" class="headerlink" title="1.MySQL 执行过程"></a>1.MySQL 执行过程</h2><h2 id="2-日志系统"><a href="#2-日志系统" class="headerlink" title="2. 日志系统"></a>2. 日志系统</h2><p>binlog 和 redo log </p><p>两阶段提交：完成 redo log 的写入存在两个提交标志：prepared 和 commit。</p><h2 id="3-事务隔离"><a href="#3-事务隔离" class="headerlink" title="3. 事务隔离"></a>3. 事务隔离</h2><p>MVCC 在 MySQL 中的实现。</p><p>通过<strong>视图</strong>和<strong>undo log</strong>实现。</p><h2 id="4-索引"><a href="#4-索引" class="headerlink" title="4. 索引"></a>4. 索引</h2><ul><li>索引分类： 哈希索引、全文索引、B+树索引</li></ul><p>InnoDB 采用 B+树索引。<br>好处：适合磁盘顺序IO。</p><h3 id="MySQL-优化器为什么会选错索引？"><a href="#MySQL-优化器为什么会选错索引？" class="headerlink" title="MySQL 优化器为什么会选错索引？"></a>MySQL 优化器为什么会选错索引？</h3><p>优化器优化逻辑：考虑扫描行数、是否排序、是否使用临时表</p><ul><li>扫描行数：通过 Candidacy 判断，按<em>索引区分度</em>采样统计得到Candidacy 。<ul><li>使用普通索引的时候，需要判断是否需要回表以及回表的开销。如果回表的开销过大，优化器会直接使用主键索引。</li><li>解决方案：<ol><li>可以通过 <code>analyze table 表名;</code> 来修正统计信息。</li><li>可以使用 force index(索引名) 强制使用某个索引。（坏处：变更查询字段时，需要修改sql语句。）</li></ol></li></ul></li><li>是否需要排序：根据 order by 的列进行。</li></ul><h2 id="5-锁"><a href="#5-锁" class="headerlink" title="5. 锁"></a>5. 锁</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-04-MySQL-%E6%85%A2sql/"/>
    <url>/2022/DataBase-MySQL-04-MySQL-%E6%85%A2sql/</url>
    
    <content type="html"><![CDATA[<h1 id="写-sql"><a href="#写-sql" class="headerlink" title="写 sql"></a>写 sql</h1><p>一条写sql执行过程：同样经过连接器、分析器、优化器、执行器。</p><p>区别于读：执行器和引擎存在写redolog和binlog的执行过程。</p><ul><li><p>redo log：用于保证 crash-safe。恢复粒度为：页数据</p></li><li><p>bin log：MySQL Server 层实现，用于归档。</p></li><li><p>两次写（两阶段提交）：将 redo log 的写入拆成了两个步骤：prepare 和 commit。<br>执行过程</p></li></ul><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220224094731.png" alt="sql执行过程"></p><p>写 sql 慢的原因可能是：</p><ol><li>缓冲池不足，mysql在刷脏页。</li><li>redo file 空间不足，innodb不断移动 checkpoint。</li><li>更新的数据表或行存在其他事务的锁，需要等待锁资源释放才能执行。</li></ol><h1 id="读-sql"><a href="#读-sql" class="headerlink" title="读 sql"></a>读 sql</h1><p>一条 sql 查询语句的执行过程。</p><h1 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h1><p>高并发读写情况下存在</p><h2 id="事务隔离性的实现"><a href="#事务隔离性的实现" class="headerlink" title="事务隔离性的实现"></a>事务隔离性的实现</h2><p>通过 MVCC 实现：<br><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220224141244.png" alt="image-20220224141242816"></p><p>可重复读的隔离级别下，在事务启动时，将整个数据库的状态创建“视图” – 通过<strong>一个数组</strong>记录当前所有<strong>未提交的事务id</strong>，将最高的事务 id+1 作为当前事务id。</p><p>通过该数组可以将读到的 row_trx_id 分为以下三个部分：</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220224144305.png" alt="创建视图的状态划分数据事务"></p><p>在“可重复读”隔离级别下，读到数据库中某行记录的 row_trx_id 判断落在上图的那块区域：</p><ol><li>row_trx_id &lt; 低水位id，该行此版本在绿色区，可见。</li><li>row_trx_id &gt; 高水位id，该行此版本在红色区，不可见。</li><li>低水位id &lt; row_trx_id &lt; 高水位id，在黄色区域，分为两种情况：<br> a. 在数组中找得到 row_trx_id，说明该行数据事务未提交，不可见。<br> b. 在数据中找不到，说明该行数据事务已提交，可见。</li></ol><p>如果读取到的行版本不可见，借助 undo log 将数据回滚至满足要求的版本生成对应的“快照数据”。</p><blockquote><p>小结：判断一条数据在某个事务中可能存在的三种情况：</p><ol><li>版本未提交，不可见。</li><li>版本已提交，但是是在当前事务创建之后提交的，不可见。</li><li>版本已提交，在事务创建之前提交的，可见。</li></ol></blockquote><h2 id="读数据下的-MVCC"><a href="#读数据下的-MVCC" class="headerlink" title="读数据下的 MVCC"></a>读数据下的 MVCC</h2><h2 id="更新数据下的-MVCC"><a href="#更新数据下的-MVCC" class="headerlink" title="更新数据下的 MVCC"></a>更新数据下的 MVCC</h2><p>更新数据都是<em>先读后写</em>的，这里的读取是“当前读”，<strong>读已提交最新版本。</strong></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220224153510.png" alt="image-20220224153509464"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-03-MySQL-%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%AE%80%E4%BB%8B/"/>
    <url>/2022/DataBase-MySQL-03-MySQL-%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-体系结构和存储引擎简介"><a href="#MySQL-体系结构和存储引擎简介" class="headerlink" title="MySQL 体系结构和存储引擎简介"></a>MySQL 体系结构和存储引擎简介</h1><ol><li><p>数据库和实例的区别</p><ul><li><strong>数据库</strong>是指物理操作系统文件或其他形式类型的集合。在 MySQL 中，数据库文件可以是 frm、MYD、MYI、ibd 结尾的文件。</li><li><strong>实例</strong>是由后台线程以及一个共享内存区组成。数据库实例才是真正用于操作数据库文件的。</li></ul><p><strong>MySQL 数据库实例在系统上的表现就是一个进程。</strong></p><p><strong>数据库是“数据文件”的集合。</strong></p></li><li><p>MySQL 体系结构分为几个部分</p><ul><li>连接池组件</li><li>管理服务和工具组件</li><li>SQL 接口组件</li><li>查询分析器组件</li><li>优化器组件</li><li>缓冲器（Cache)组件</li><li>插件式存储引擎（<strong>基于表</strong>）</li><li>物理文件（ibd、MYD、MYI 等）</li></ul></li><li><p>MySQL 可供选择的存储引擎有哪些。</p><p>InnoDB 、MyISAM 、NDB 、Memory 、Archive 、Federated 、Maria 、其他存储引擎</p><ul><li><p>InnoDB 存储引擎： </p><ol><li>支持在线事务处理（OLTP) 的应用。特点是行锁设计、支持外键。支持类似于 Oracle 的非锁定读。</li><li>通过多版本并发控制（MVCC）来获得高并发性，实现了 SQL 的 4 种隔离级别。默认时 REPEATABLE 级别。使用 next-key locking 的策略防止<strong>幻读</strong>。</li><li>提供<strong>插入缓冲、二次写、自适应哈希索引、预读</strong>等高性能和高可用的功能。</li><li>数据的存储采用聚集（clustered)的方式，因此每张表的存储都是按主键的顺序进行存放。如果没有显示地在定义表的时候指定主键，InnoDB 引擎会自动为每行生成一个 6 字节的 ROWID，并一次为主键。</li></ol></li><li><p>MyISAM 存储引擎：</p><ol><li>不支持事务、表锁设计。支持全文索引，面向 OLAP 数据库应用。</li><li>MyISAM 的缓冲池只缓存 <strong>索引文件</strong>，而不是缓冲数据文件。</li><li>存储引擎表由 MYD 和 MYI 组成。MYD 用来存放数据文件，MYI 用来存放索引文件。可以使用 myisampack 工具来进一步压缩文件。</li><li>在 5.1.23 版本之情，无论是 32 位还是 64 位，缓存区最大只能设置为 4 GB</li></ol></li><li><p>NDB 存储引擎：</p><ol><li>NDB 是一个集群存储引擎，类似于 Oracle 的 RAC 集群，区别在于 Oracle RAC 是 share everything 架构，而 NDB 是 share nothing 的集群架构。</li><li>NDB 的特点是<strong>数据全部存放在内存中</strong>，通过 NDB 数据存储结点（Data Node）可以相信提高数据库性能，是高可用、高性能的集群系统。</li><li>NDB 存储引擎的连接操作（JOIN）是在 MySQL 数据库层完成的，不是在存储引擎层完成的。即复杂的连接操作需要巨大的网络开销，因此 NDB 的查询速度很慢。</li></ol></li><li><p>Memory 存储引擎：</p><ol><li><p>也称为 Heap 存储引擎，将表中的数据存放在内存中。（适合用于存储临时数据的临时表以及数据仓库中的维度表。） </p></li><li><p>默认使用哈希索引。查询速度快，但只支持表锁，并发性差。</p><p><strong>MySQL 使用 Memory 存储引擎作为临时表来存放查询的中间结果集</strong>，如果中间结果集大于 Memory 存储引擎的容量设置，或者结果集含有 TEXT 或 BLOB 列类型字段，则 MySQL 会将中间结果集转到 MyISAM 存储引擎表存放到磁盘中。</p></li></ol></li><li><p>Archive 存储引擎：</p><ol><li>只支持 INSERT 和 SELECT 操作。MySQL 5.1 开始支持索引。</li><li>使用 zlib 算法将数据行（row）进行压缩存储，压缩比一般可达 1 : 10。</li><li>适合归档数据。如：日志信息。</li><li>使用 <strong>行锁</strong>来实现高并发的插入操作，但不是事务安全的存储引擎。</li></ol><p><strong>设计目标是提供高速的插入和压缩功能</strong></p></li><li><p>Federated 存储引擎：</p><ol><li>不存放数据，只是用来指向一台远程 MySQL 数据库服务器上的表。</li><li>只支持MySQL数据库表，不支持异构数据库表。</li></ol></li><li><p>Maria 存储引擎：</p><ol><li>可以看作是 MyISAM 的后续版本，支持缓存数据和索引文件。</li><li>应用了行锁设计，提供 MVCC 功能。支持事务 和 非事务安全的选项</li><li>更好的 BLOB 字符类型的处理性能。</li></ol></li><li><p>其他存储引擎：</p><p>除了上述 7 种存储引擎外，还有很多其他，包括 Merge、CSV、Sphinx 和 Inobright 等，都有各自使用的场合。</p></li></ul><p>可以通过 <code>SHOW ENGINES\G;</code>语句查看当前 MySQL 数据库支持的存储i引擎，或者通过查找 information_schema 架构下的 ENGINES 表。</p><ol><li>使用命令。</li></ol><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SHOW</span> ENGINES\G;<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>      Engine: FEDERATED<br>     Support: <span class="hljs-keyword">NO</span><br>     Comment: Federated MySQL storage engine<br>Transactions: <span class="hljs-keyword">NULL</span><br>          XA: <span class="hljs-keyword">NULL</span><br>  Savepoints: <span class="hljs-keyword">NULL</span><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">2.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>      Engine: MEMORY<br>     Support: YES<br>     Comment: Hash based, stored <span class="hljs-keyword">in</span> memory, useful <span class="hljs-keyword">for</span> temporary tables<br>Transactions: <span class="hljs-keyword">NO</span><br>          XA: <span class="hljs-keyword">NO</span><br>  Savepoints: <span class="hljs-keyword">NO</span><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">3.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>      Engine: InnoDB<br>     Support: <span class="hljs-keyword">DEFAULT</span><br>     Comment: Supports transactions, <span class="hljs-type">row</span><span class="hljs-operator">-</span>level locking, <span class="hljs-keyword">and</span> <span class="hljs-keyword">foreign</span> keys<br>Transactions: YES<br>          XA: YES<br>  Savepoints: YES<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">4.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>      Engine: PERFORMANCE_SCHEMA<br>     Support: YES<br>     Comment: Performance Schema<br>Transactions: <span class="hljs-keyword">NO</span><br>          XA: <span class="hljs-keyword">NO</span><br>  Savepoints: <span class="hljs-keyword">NO</span><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">5.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>      Engine: MyISAM<br>     Support: YES<br>     Comment: MyISAM storage engine<br>Transactions: <span class="hljs-keyword">NO</span><br>          XA: <span class="hljs-keyword">NO</span><br>  Savepoints: <span class="hljs-keyword">NO</span><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">6.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>      Engine: MRG_MYISAM<br>     Support: YES<br>     Comment: Collection <span class="hljs-keyword">of</span> identical MyISAM tables<br>Transactions: <span class="hljs-keyword">NO</span><br>          XA: <span class="hljs-keyword">NO</span><br>  Savepoints: <span class="hljs-keyword">NO</span><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">7.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>      Engine: BLACKHOLE<br>     Support: YES<br>     Comment: <span class="hljs-operator">/</span>dev<span class="hljs-operator">/</span><span class="hljs-keyword">null</span> storage engine (anything you write <span class="hljs-keyword">to</span> it disappears)<br>Transactions: <span class="hljs-keyword">NO</span><br>          XA: <span class="hljs-keyword">NO</span><br>  Savepoints: <span class="hljs-keyword">NO</span><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">8.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>      Engine: CSV<br>     Support: YES<br>     Comment: CSV storage engine<br>Transactions: <span class="hljs-keyword">NO</span><br>          XA: <span class="hljs-keyword">NO</span><br>  Savepoints: <span class="hljs-keyword">NO</span><br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">9.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>      Engine: ARCHIVE<br>     Support: YES<br>     Comment: Archive storage engine<br>Transactions: <span class="hljs-keyword">NO</span><br>          XA: <span class="hljs-keyword">NO</span><br>  Savepoints: <span class="hljs-keyword">NO</span><br><span class="hljs-number">9</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></div></td></tr></table></figure><ol start="2"><li>查询 ENGINES 表</li></ol><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> information_schema.ENGINES;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="hljs-operator">|</span> ENGINE             <span class="hljs-operator">|</span> SUPPORT <span class="hljs-operator">|</span> COMMENT                                                        <span class="hljs-operator">|</span> TRANSACTIONS <span class="hljs-operator">|</span> XA   <span class="hljs-operator">|</span> SAVEPOINTS <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="hljs-operator">|</span> FEDERATED          <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>      <span class="hljs-operator">|</span> Federated MySQL storage engine                                 <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>         <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> MEMORY             <span class="hljs-operator">|</span> YES     <span class="hljs-operator">|</span> Hash based, stored <span class="hljs-keyword">in</span> memory, useful <span class="hljs-keyword">for</span> temporary tables      <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>           <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> InnoDB             <span class="hljs-operator">|</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-operator">|</span> Supports transactions, <span class="hljs-type">row</span><span class="hljs-operator">-</span>level locking, <span class="hljs-keyword">and</span> <span class="hljs-keyword">foreign</span> keys     <span class="hljs-operator">|</span> YES          <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span> YES        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> PERFORMANCE_SCHEMA <span class="hljs-operator">|</span> YES     <span class="hljs-operator">|</span> Performance Schema                                             <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>           <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> MyISAM             <span class="hljs-operator">|</span> YES     <span class="hljs-operator">|</span> MyISAM storage engine                                          <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>           <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> MRG_MYISAM         <span class="hljs-operator">|</span> YES     <span class="hljs-operator">|</span> Collection <span class="hljs-keyword">of</span> identical MyISAM tables                          <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>           <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> BLACKHOLE          <span class="hljs-operator">|</span> YES     <span class="hljs-operator">|</span> <span class="hljs-operator">/</span>dev<span class="hljs-operator">/</span><span class="hljs-keyword">null</span> storage engine (anything you write <span class="hljs-keyword">to</span> it disappears) <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>           <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> CSV                <span class="hljs-operator">|</span> YES     <span class="hljs-operator">|</span> CSV storage engine                                             <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>           <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> ARCHIVE            <span class="hljs-operator">|</span> YES     <span class="hljs-operator">|</span> Archive storage engine                                         <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>           <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span><br><span class="hljs-number">9</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></div></td></tr></table></figure></li><li><p>各个存储引擎之间的对比</p><p>不同之处包括 存储容量的限制、事务支持、锁的粒度、MVCC 支持、支持的索引、备份和复制等。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220108044116.png" alt="image-20220108044107624"></p></li></ol><p>示例：</p><p>导入 MySQL 示例数据库 “员工数据库”，可以通过该<a href="https://dev.mysql.com/doc/index-other.html">链接</a>下载。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20220108045729.png" alt="image-20220108045728463"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-02-MySQL43%E9%97%AE/"/>
    <url>/2022/DataBase-MySQL-02-MySQL43%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<ol><li>请说下你对 MySQL 架构的了解？<br>cs结构，客户端通过jdbc连接服务端。<br>服务端包括两个内容，sever层和搜索引擎。</li><li>一条 SQL 语句在数据库框架中的执行流程？<br>客户端与sever连接(通过连接池or直接连接)，将sql语句发给服务端。服务端执行过程包括，分析器，优化器，执行器。sever通过分析器判断是否开启缓存以及sql是否存在过缓存，如果有直接返回结果。通过优化器对sql进行词法分析和语法分析，并生成执行计划。通过执行器执行计划，并与搜索引擎进行交互。</li><li>数据库的三范式是什么？<br>1NF：列的原子性<br>2NF：实体的完整依赖<br>3NF：</li><li>char 和 varchar 的区别？<br>char：固定长度。<br>varchar：伸缩长度。比实际存储的字符串多一个记录长度的字节，不利于order by 列排序。<br>空间上varchar优，时间上char优。</li><li>varchar(10) 和 varchar(20) 的区别？<br>存储长度相同，但是order by排序时间上有差别，短的更快。</li><li>谈谈你对索引的理解？<br>类似于目录，用于加快定位查询的数据。</li><li>索引的底层使用的是什么数据结构？<br>不同引擎使用不同的数据结构。MySQL引擎 InnoDB使用的B+树。也有使用Hash表数据结构。</li><li>谈谈你对 B+ 树的理解？</li><li>为什么 InnoDB 存储引擎选用 B+ 树而不是 B 树呢？</li><li>谈谈你对聚簇索引的理解？</li><li>谈谈你对哈希索引的理解？</li><li>谈谈你对覆盖索引的认识？</li><li>索引的分类？</li><li>谈谈你对最左前缀原则的理解？</li><li>怎么知道创建的索引有没有被使用到？或者说怎么才可以知道这条语句运行很慢的原因?</li><li>什么情况下索引会失效？即查询不走索引？</li><li>查询性能的优化方法？</li><li>InnoDB 和 MyISAM 的比较？</li><li>谈谈你对水平切分和垂直切分的理解？</li><li>主从复制中涉及到哪三个线程？</li><li>主从同步的延迟原因及解决办法？</li><li>谈谈你对数据库读写分离的理解？</li><li>请你描述下事务的特性？</li><li>谈谈你对事务隔离级别的理解？</li><li>解释下什么叫脏读、不可重复读和幻读？</li><li>MySQL 默认的隔离级别是什么？</li><li>谈谈你对MVCC 的了解？</li><li>说一下 MySQL 的行锁和表锁？</li><li>InnoDB 存储引擎的锁的种类有哪些？</li><li>MySQL 问题排查都有哪些手段？</li><li>MySQL 数据库 CPU 飙升到 500% 的话他怎么处理？</li><li>MySQL的redo log，undo log，bin log都是干什么的</li><li>SQL 与 MySQL 有什么区别</li><li>添加索引的原则</li><li>有哪些事务状态</li><li>什么是死锁？如何解决死锁？</li><li>什么是乐观锁和悲观锁？如何实现？</li><li>什么是超键？什么是主键？</li><li>UNION 与 UNION ALL 的区别</li><li>DROP、DELETE 与 TRUNCATE 的区别</li><li>为什么要分库分表</li><li>分库分表存在哪些问题</li><li>MySQL 读写分离的实现方案</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-01-study-guide/"/>
    <url>/2022/DataBase-MySQL-01-study-guide/</url>
    
    <content type="html"><![CDATA[<p>mysql 相关书籍：<br>《SQL必知必会》 – 掌握 sql 的使用<br>《MySQL技术内幕  InnoDB存储引擎  第2版》 – 掌握“索引”和“锁”<br>《高性能MySQL》 – 大头书</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/DataBase-MySQL-00-docker%E5%90%AF%E5%8A%A8mysql/"/>
    <url>/2022/DataBase-MySQL-00-docker%E5%90%AF%E5%8A%A8mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="docker-启动-mysql"><a href="#docker-启动-mysql" class="headerlink" title="docker 启动 mysql"></a>docker 启动 mysql</h1><p>命令</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">docker run -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> --name mysql -v <span class="hljs-regexp">/d/</span>docker<span class="hljs-regexp">/log/my</span>sql:<span class="hljs-regexp">/usr/my</span>data<span class="hljs-regexp">/mysql/</span>log -v <span class="hljs-regexp">/d/</span>docker<span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/mysql:/u</span>sr<span class="hljs-regexp">/mydata/my</span>sql<span class="hljs-regexp">/data -v /</span>d<span class="hljs-regexp">/docker/</span>etc<span class="hljs-regexp">/mysql/</span>conf.d:<span class="hljs-regexp">/usr/my</span>data<span class="hljs-regexp">/mysql/</span>conf -e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> -d mysql:latest<br></code></pre></div></td></tr></table></figure><p>解释</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">docker run -d mysql:latest             以后台的方式运行 mysql 版本的镜像，生成一个容器。<br>--name mysql                           容器名为 mysql<br>-e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span>          设置登陆密码为 <span class="hljs-number">123456</span>，登陆用户为 root<br>-p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span>                           将容器内部 <span class="hljs-number">3306</span> 端口映射到 主机的 <span class="hljs-number">3306</span> 端口，即通过 主机的 <span class="hljs-number">3306</span> 可以访问容器的 <span class="hljs-number">3306</span> 端口<br>-v <span class="hljs-regexp">/d/</span>docker<span class="hljs-regexp">/log/my</span>sql:<span class="hljs-regexp">/usr/my</span>data<span class="hljs-regexp">/mysql/</span>log    将容器的 日志文件夹 挂载到 主机的相应位置<br>-v <span class="hljs-regexp">/d/</span>docker<span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/mysql:/u</span>sr<span class="hljs-regexp">/mydata/my</span>sql/data   将容器的 数据文件夹 挂载到 主机的相应位置<br>-v <span class="hljs-regexp">/d/</span>docker<span class="hljs-regexp">/etc/my</span>sql<span class="hljs-regexp">/conf.d:/u</span>sr<span class="hljs-regexp">/mydata/my</span>sql/conf   将容器的 自定义配置文件夹 挂载到主机的相应位置<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/knowledge/RPC/"/>
    <url>/2022/knowledge/RPC/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/knowledge/git-detached/"/>
    <url>/2022/knowledge/git-detached/</url>
    
    <content type="html"><![CDATA[<p>HEAD detached at origin/分支名</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git status</span><br>HEAD detached at xxxxx<br>nothing to commit, working tree clean<br></code></pre></div></td></tr></table></figure><ol><li><p>detached HEAD state指的是什么<br>正常情况下，HEAD指向一个branch，而branch又指向一个commit。</p><p>detached HEAD state指的是HEAD指针没有指向任何的branch，而是指向了一个commit。</p></li><li><p>detached HEAD state时我能做什么</p><ol><li><p>提交，之后的commit链在这个 commit 的基础上展开</p></li><li><p>直接离开，这些 commit 会被当成垃圾被 git branch collection routine 回收。</p></li><li><p>保留 commits</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git checkout -b foo # 创建一个 branch 指向这个commit链，然后 head指向 branch<br>git branch foo #创建一个branch指向这个commit链，但是HEAD还是处于detached state<br>git tag foo # 创建一个tag指向这个commit链，HEAD还是处于detached state<br></code></pre></div></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/knowledge/DDD/"/>
    <url>/2022/knowledge/DDD/</url>
    
    <content type="html"><![CDATA[<p>领域驱动</p><p>充血模型、贫血模型</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/interview0/01-HashMap/"/>
    <url>/2022/interview0/01-HashMap/</url>
    
    <content type="html"><![CDATA[<p><strong>HashMap</strong></p><ol><li>散列表实现</li><li>扰动函数</li><li>初始化容量</li><li>负载因子</li><li>扩容元素拆分</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/Lottery/day09-ID%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5/"/>
    <url>/2022/Lottery/day09-ID%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<ul><li>随机id的作用：1. 表设计时，一般会有一个自增id作为主键，但还是需要设计一个的业务id作为唯一标识。id需要固定并且随机。</li></ul><ul><li><p>抽奖系统中，需要用到id的地方：订单id、策略id、活动号id。</p></li><li><p>生成策略有：雪花id、apache工具包RandomStringUtils、日期拼接</p></li><li><p>策略模式：</p></li></ul><ol><li>定义一个策略接口A，策略的具体实现需要继承A接口。不同的实现需要添加 @Component 注解</li><li>定义枚举类 ids 用来标识不同的实现类的key</li><li>实现一个返回Map&lt;枚举ids,策略接口&gt;的JavaBean，用来存放策略key和具体实现类。该map返回值可以通过get(key)获取相应的策略。</li></ol><ul><li>三种 id 生成策略的实现</li></ul><ol><li>实现雪花id<ul><li>hutools-all 工具包中封装了雪花算法，需要定义两个参数（工作机id和数据中心id），通过 IdUtil.createSnowflake(workId, dataCenterId) 19 位的数字字符串。工作机id 可以根据本地ip地址计算，也可以直接获取本机 ip 字符串。 0 &lt;= workId &lt;= 31</li><li>适合，短时间内生成大量且唯一的长码。</li></ul></li><li>实现日期拼接<ul><li>通过 Calendar 获取年、月、日、小时，将的得到几个值以及三位随机数进行打乱拼接，获得一个 8 位的数字字符串</li><li>关键：Calendar.get(YEAR)、Calendar.get(WEEK_OF_YEAR)、Calendar.get(DAY_OF_WEEK)、Calendar.get(HOUR_OF_DAY)、三位随机数 Random.nextInt(1000);</li><li>适用范围：短时间内只能生成少量的短码。</li></ul></li><li>实现随机算法<ul><li>使用 apache 工具包的 RandomStringUtils.randomNumeric(cnt) 生成指定cnt位的id。</li><li>适用范围：短码、大量、需要保证全局唯一。</li></ul></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/Lottery/day01/"/>
    <url>/2022/Lottery/day01/</url>
    
    <content type="html"><![CDATA[<p>Situation</p><p>Task</p><p>Action</p><p>Result</p><ul><li><p>创建项目：</p><ul><li>分支规范：</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">分支命名：220317_author_功能<br>类似：220317_four_buildFramework<br></code></pre></div></td></tr></table></figure><ul><li>commit 规范（可以安装插件 git commit template）</li></ul><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs makefile">commit 格式：author[type,..]: desc<br><span class="hljs-section">类似：four[build,revert]: 构建项目结构</span><br><br><span class="hljs-comment">#主要type</span><br><span class="hljs-section">fix: 修复bug</span><br><span class="hljs-section">feat: 添加内容</span><br><br><span class="hljs-comment"># 特殊type</span><br><span class="hljs-section">docs: 只修改了文档相关内容</span><br><span class="hljs-section">style: 只修改了代码格式，format之类的，不影响代码语义</span><br><span class="hljs-section">build: 构造工具或者外部依赖的改动</span><br><span class="hljs-section">refactor: 重构代码时使用</span><br><span class="hljs-section">revert: 执行git revert 打印的message</span><br><br><span class="hljs-comment"># 暂不使用type</span><br><span class="hljs-section">test:添加测试或修改现有测试</span><br><span class="hljs-section">perf:提高性能的改动</span><br><span class="hljs-section">ci:与CI相关的改动</span><br><span class="hljs-section">chore:除修改虽然挫折test的改动，如构建过程或者辅助文档的变动</span><br></code></pre></div></td></tr></table></figure></li><li><p>构建项目结构：</p><ul><li><p>建立相应的 moudle</p></li><li><p>配置基础层（infrastructure）配置数据 module【dao+po】</p></li><li><p>配置接口层（interfaces），接口层，用来</p><ol><li><p>在 appliaction.xml 中引入 spring-datasource、mybatis。</p></li><li><p>在 resource 创建 mybatis 配置相应的 config 和 mapper。</p></li><li><p>在 java 目录下，编写</p></li></ol></li><li></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>01-xxxxx</title>
    <link href="/01-xxxxx"/>
    <url>/01-xxxxx</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>软考</tag>
      
      <tag>知识点记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-xxxxx</title>
    <link href="/01-xxxxx"/>
    <url>/01-xxxxx</url>
    
    <content type="html"><![CDATA[<h1 id="1-1-基础知识"><a href="#1-1-基础知识" class="headerlink" title="1.1 基础知识"></a>1.1 基础知识</h1><h3 id="1-1-1-系统硬件组成"><a href="#1-1-1-系统硬件组成" class="headerlink" title="1.1.1 系统硬件组成"></a>1.1.1 系统硬件组成</h3>]]></content>
    
    
    
    <tags>
      
      <tag>软考</tag>
      
      <tag>知识点记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/Docker/Docker-Study-05-Docker%E9%95%9C%E5%83%8F/"/>
    <url>/2022/Docker/Docker-Study-05-Docker%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h1><h2 id="镜像的含义"><a href="#镜像的含义" class="headerlink" title="镜像的含义"></a>镜像的含义</h2><p>镜像是一个安装包</p><h2 id="镜像的加载"><a href="#镜像的加载" class="headerlink" title="镜像的加载"></a>镜像的加载</h2><p><strong>分层加载</strong>：不同容器之间可以使用相同的镜像层。</p><p>镜像是只读的。启动成功之后，容器是最外面的那一层内容。</p><h2 id="镜像提交"><a href="#镜像提交" class="headerlink" title="镜像提交"></a>镜像提交</h2><p>使用 commit 用来保存容器修改状态（类似于虚拟机的快照）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker commit -m=&quot;描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名称:[TAG]<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 测试</span><br><span class="hljs-meta">$</span><span class="bash"> docker commit -m=<span class="hljs-string">&quot;tomcat add webapps&quot;</span> -a=<span class="hljs-string">&quot;lifz&quot;</span> f79c491dbab7 tomcatweb:1.0</span><br></code></pre></div></td></tr></table></figure><p>结果：</p><p>提交成功后，在本地可以使用 <code>docker images</code> 找到我们保存的镜像</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211227001604.png" alt="image-20211227001602662"></p><p>如果想要push到远程仓库，需要先在 <code>https://hub.docker.com/repositories</code> 中新建仓库，使用 tag 命令标记本地镜像，将其归入该仓库中。最后使用 push 命令提交镜镜像。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker images <span class="hljs-comment"># 可以看到我们 commit 的 tomcatweb 镜像</span></span><br>REPOSITORY                TAG       IMAGE ID       CREATED             SIZE<br>tomcatweb                 1.0       2897816cb443   About an hour ago   690MB<br>tomcat                    latest    fb5657adc892   4 days ago          680MB<br><br><span class="hljs-meta"> #</span><span class="bash"> 使用 tag 命令标记本地镜像，将其归入fukuko/tomcatweb仓库中,该仓库需要先在上述网址中创建.</span><br><span class="hljs-meta">$</span><span class="bash"> docker tag tomcatweb:1.0 fukuko/tomcatweb</span><br><br><span class="hljs-meta">$</span><span class="bash"> docker images <span class="hljs-comment"># 可以看到 tag 标记后的 tomcatweb</span></span><br>REPOSITORY                TAG       IMAGE ID       CREATED             SIZE<br>fukuko/tomcatweb          latest    2897816cb443   About an hour ago   690MB<br>tomcatweb                 1.0       2897816cb443   About an hour ago   690MB<br>tomcat                    latest    fb5657adc892   4 days ago          680MB<br><br><span class="hljs-meta">#</span><span class="bash"> 使用 docker push 推送到远程仓库中</span><br><span class="hljs-meta">$</span><span class="bash"> docker push fukuko/tomcatweb</span> <br>Using default tag: latest<br>The push refers to repository [docker.io/fukuko/tomcatweb]<br>b2c4929c82c9: Pushed<br>3e2ed6847c7a: Pushed<br>bd2befca2f7e: Pushed<br>59c516e5b6fa: Pushed<br>3bb5258f46d2: Pushing [==================================================&gt;]  343.2MB<br>832e177bb500: Pushed<br>f9e18e59a565: Pushed<br>26a504e63be4: Pushed<br>8bf42db0de72: Pushed<br>31892cc314cb: Pushed<br>11936051f93b: Pushed<br>latest: digest: sha256:xxxxxxx size: 2633<br></code></pre></div></td></tr></table></figure><p>上传成功后即可在远程仓库中看到push的镜像</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211227010100.png" alt="image-20211227010057880"></p><p>使用 <code>docker pull</code> 即可拉取该镜像到本地</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker pull fukuko/tomcatweb</span><br>Using default tag: latest<br>latest: Pulling from fukuko/tomcatweb<br>0e29546d541c: Pulling fs layer<br>9b829c73b52b: Pulling fs layer<br>cb5b7ae36172: Pulling fs layer<br>6494e4811622: Waiting<br>668f6fcc5fa5: Waiting<br>dc120c3e0290: Waiting<br>.....<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker images</span><br>REPOSITORY                TAG       IMAGE ID       CREATED         SIZE<br>fukuko/tomcatweb          latest    2897816cb443   2 hours ago     690MB<br><span class="hljs-meta">$</span><span class="bash"> docker run -d -p 8088:8080 2897816cb443</span><br>8f4285f68c243b994d30ac37541438e73884296366687f7911ff7016a99671e6<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211227010921.png" alt="image-20211227010911440"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker-Study-03-win10桌面安装</title>
    <link href="/Docker-Study-03-win10%E6%A1%8C%E9%9D%A2%E5%AE%89%E8%A3%85"/>
    <url>/Docker-Study-03-win10%E6%A1%8C%E9%9D%A2%E5%AE%89%E8%A3%85</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>需要在其他新的 win10 环境中安装 Docker Desktop, 特此记录一下。</p><p>上<a href="https://docs.docker.com/desktop/windows/install/">官网</a></p><h1 id="下载-Docker-安装包"><a href="#下载-Docker-安装包" class="headerlink" title="下载 Docker 安装包"></a>下载 Docker 安装包</h1><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211206134646.png" alt="image-20211206134637422"></p><p>下载完成后双击安装，无脑下一步即可。</p><p>最后会提示电脑重启。</p><p>电脑重启之后，docker运行会失败(如下图)。提示wsl2环境没有配置。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211206140310.png" alt="image-20211206140308663"></p><h1 id="配置wsl2环境"><a href="#配置wsl2环境" class="headerlink" title="配置wsl2环境"></a>配置wsl2环境</h1><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211206135624.png" alt="image-20211206135623001"></p><p>但是需要先配置 wsl2 和 虚拟机 环境，相关配置参考：</p><ol><li><a href="https://www.cnblogs.com/360linux/p/13662355.html">启动Linux子系统以及虚拟机平台</a></li><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install">在win10下安装linux子系统</a><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wsl --list --online # 查看可通过在线商店下载的可用 Linux 发行版列表<br>wsl --install -d &lt;Distribution Name&gt; # 安装其他 Linux 发行版<br>wsl -l -v # 查看系统中已经安装的子系统以及其版本<br></code></pre></div></td></tr></table></figure></li><li><a href="https://www.bilibili.com/read/cv2874370/">在win10下将linux子系统配置为wsl2</a></li></ol><p>如果第3步提示如下：</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211206135657.png" alt="image-20211206135655576"></p><p>那么需要进行第4步，下载 Linux 内核更新包，安装升级wsl2<br>4. <a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">升级wsl2</a></p><p>重启docker，启动成功。<br><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211206140043.png" alt="image-20211206135838826"></p><h1 id="win10下-desktop-使用"><a href="#win10下-desktop-使用" class="headerlink" title="win10下 desktop 使用"></a>win10下 desktop 使用</h1><ol><li>随便打开cmd即可使用，可以不适用管理员身份打开cmd也能够使用。也可以用 git bash。</li><li>配置阿里云镜像加速<br>（1） 打开阿里云官网，登录<br>（2） 在产品的地方，搜索“容器镜像服务”，找到“镜像加速器”<br>（3） 将找到的“镜像加速器”地址配置到 Docker Engine 中即可。<br>配置效果如下：<figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;builder&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;gc&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;defaultKeepStorage&quot;</span>: <span class="hljs-string">&quot;20GB&quot;</span>,<br>      <span class="hljs-attr">&quot;enabled&quot;</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;debug&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;experimental&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;features&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;buildkit&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;insecure-registries&quot;</span>: [],<br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span>: [<br>    <span class="hljs-string">&quot;https://96r563oc.mirror.aliyuncs.com&quot;</span><br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法学习第一周</title>
    <link href="/67-%E7%AC%AC%E4%B8%80%E5%91%A8"/>
    <url>/67-%E7%AC%AC%E4%B8%80%E5%91%A8</url>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>链表</strong>：<br>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p><p><strong>优点</strong><br>增删方便，可扩容</p><p><strong>缺点</strong><br>指针域占用空间多，查询遍历麻烦</p><p><strong>适用场景</strong><br>数据量少，增删频繁，查询较少。</p><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><a href="#">Post not found: lc-0021-合并两个有序链表 合并两个有序链表</a><p>使用递归。结束条件为 l1 / l2 中有一个为nil时</p><a href="#">Post not found: lc-0141-环形链表 环形链表</a><p>追及问题，快慢指针。</p><a href="#">Post not found: lc-0075-颜色分类 颜色分类</a><p>区间归类。使用三个指针实现。</p><a href="#">Post not found: lc-0203-移除链表元素 移除链表元素</a><p>使用递归，如果head.Val 等于目标值时，返回head.Next。</p><hr><a href="#">Post not found: lc-0206-反转链表 反转链表</a><a href="#">Post not found: lc-0160-相交链表 相交链表</a><a href="#">Post not found: lc-0021-合并两个有序链表 合并两个有序链表</a><a href="#">Post not found: lc-0086-分隔链表 分隔链表</a><a href="#">Post not found: lc-0142-环形链表 II 环形链表 II</a><a href="#">Post not found: lc-0092-反转链表 II 反转链表 II</a><a href="#">Post not found: lc-0138-复制带随机指针的链表 复制带随机指针的链表</a><hr><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>栈：先进后出（LIFO）</p></li><li><p>要点：</p><ul><li>栈是一种线性结构，操作的是数组的子集。</li><li>只能在栈顶<strong>添加</strong>或<strong>取出</strong>元素。</li><li>应用场景：编译器分词器、JVM、撤销操作、回退操作</li></ul></li><li><p>栈实现</p></li></ol><table><thead><tr><th>接口</th><th>说明</th><th>复杂度</th></tr></thead><tbody><tr><td>void push(E e)</td><td>向栈顶加入元素</td><td>O(1)均摊</td></tr><tr><td>E pop()</td><td>弹出栈顶元素</td><td>O(1)均摊</td></tr><tr><td>E peek()</td><td>查看栈顶元素</td><td>O(1)</td></tr><tr><td>int getSize()</td><td>获取栈中元素个数</td><td>O(1)</td></tr><tr><td>boolean isEmpty()</td><td>判断栈是否为空</td><td>O(1)</td></tr></tbody></table><blockquote><p>说明：push 和 pop 操作在最后进行，有可能出发 resize() 但是均摊来算是 O(1)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        aboutStack();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">aboutStack</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 初始化栈，数据类型为Integer</span><br>        Stack&lt;Integer&gt; s = <span class="hljs-keyword">new</span> Stack&lt;Integer&gt;();<br><br>        <span class="hljs-comment">// 练习栈的 5 个基本操作</span><br>        <span class="hljs-comment">// 1. push(x) 压栈</span><br>        s.push(<span class="hljs-number">1</span>);<br>        s.push(<span class="hljs-number">2</span>);<br>        s.push(<span class="hljs-number">3</span>);<br>        s.push(<span class="hljs-number">4</span>);<br><br>        System.out.printf(<span class="hljs-string">&quot; s = %s \n&quot;</span>,s.toString());<br>        System.out.printf(<span class="hljs-string">&quot;--------------------------\n&quot;</span>);<br><br>        <span class="hljs-comment">// 2.top() 获取栈顶元素 , 在Java中使用 peek() 获取栈顶元素</span><br>        System.out.printf(<span class="hljs-string">&quot; s = %s \n&quot;</span>,s.peek());<br>        System.out.printf(<span class="hljs-string">&quot;--------------------------\n&quot;</span>);<br><br>        <span class="hljs-comment">// 3. pop() 出栈</span><br>        System.out.printf(<span class="hljs-string">&quot; s.pop = %s \n&quot;</span>,s.pop());<br>        System.out.printf(<span class="hljs-string">&quot;--------------------------\n&quot;</span>);<br>        <br>        <span class="hljs-comment">// 4. empty() 判断栈是否为空</span><br>        <span class="hljs-keyword">if</span>(s.isEmpty())&#123;<br>            System.out.printf(<span class="hljs-string">&quot;s is empty\n&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.printf(<span class="hljs-string">&quot;s is not empty\n&quot;</span>);<br>        &#125;<br>        <br><br>        <span class="hljs-comment">// 5. size() 栈空间</span><br>        System.out.printf(<span class="hljs-string">&quot; s.size = %s \n&quot;</span>,s.size());<br>        System.out.printf(<span class="hljs-string">&quot;--------------------------\n&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"> s = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>] <br>--------------------------<br> s = <span class="hljs-number">4</span> <br>--------------------------<br> s.pop = <span class="hljs-number">4</span> <br>--------------------------<br>s is not empty<br> s.size = <span class="hljs-number">3</span> <br>--------------------------<br></code></pre></div></td></tr></table></figure><h2 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h2><a href="#">Post not found: lc-0020-有效的括号 有效的括号</a><p>判断左括号和右括号是否匹配。</p><a href="#">Post not found: lc-0224-基本计算器 基本计算器</a><p>栈保存值和日期</p><a href="#">Post not found: lc-0155-最小栈 最小栈</a><p>普通栈+最小栈</p><a href="#">Post not found: lc-0946-验证栈序列 验证栈序列</a><p>依次入栈，判断出栈。最后出栈次数满足入栈次数即可。</p><a href="#">Post not found: lc-0739-每日温度 每日温度</a><p>两种做法，双层for循环判断当前日期到后续第一次升温日期的长度。单调栈：只有入栈元素比栈顶元素大的时候才入栈。栈保存的是数组索引。</p><a href="#">Post not found: lc-0042-接雨水 接雨水</a><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="基础知识-2"><a href="#基础知识-2" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>队列：先进先出（FIFO）</li><li>要点：<ul><li>队列是一种线性结构，操作的是数组的子集。</li><li>只能在队尾<strong>添加</strong>元素，在队头<strong>取出</strong>元素。</li><li>应用场景：</li></ul></li><li>队列实现：</li></ol><table><thead><tr><th>接口</th><th>说明</th><th>复杂度</th></tr></thead><tbody><tr><td>void offer(E e)</td><td>向队尾加入元素</td><td>O(1)均摊</td></tr><tr><td>E remove()</td><td>删除队头元素</td><td>O(1)均摊</td></tr><tr><td>E peek()</td><td>查看队头元素</td><td>O(1)</td></tr><tr><td>int size()</td><td>获取队列元素个数</td><td>O(1)</td></tr><tr><td>boolean isEmpty()</td><td>判断队列是否为空</td><td>O(1)</td></tr></tbody></table><blockquote><p>说明：push 和 pop 操作在最后进行，有可能出发 resize() 但是均摊来算是 O(1)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] maxSlidingWindow(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k) &#123;<br>        aboutQueue();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">aboutQueue</span><span class="hljs-params">()</span></span>&#123;<br>        Queue&lt;String&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;String&gt; ();<br><br>        <span class="hljs-comment">// 添加元素</span><br>        queue.offer(<span class="hljs-string">&quot;a&quot;</span>);<br>        queue.offer(<span class="hljs-string">&quot;b&quot;</span>);<br>        queue.offer(<span class="hljs-string">&quot;c&quot;</span>);<br>        queue.offer(<span class="hljs-string">&quot;d&quot;</span>);<br>        queue.offer(<span class="hljs-string">&quot;e&quot;</span>);<br>        <br>        <span class="hljs-keyword">for</span>(String q:queue)&#123;<br>            System.out.println(q);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;**************************************************&quot;</span>);<br>        <br>        <span class="hljs-comment">// 返回第一个元素</span><br>        System.out.println(<span class="hljs-string">&quot;返回第一个元素 :&quot;</span>+queue.peek());<br>        System.out.println(<span class="hljs-string">&quot;**************************************************&quot;</span>);<br><br>        <span class="hljs-comment">// 删除队头元素</span><br>        System.out.println(<span class="hljs-string">&quot;删除队头元素 :&quot;</span>+queue.remove());<br><br>        <span class="hljs-keyword">for</span>(String q:queue)&#123;<br>            System.out.println(q);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;**************************************************&quot;</span>);<br>        <br>        <span class="hljs-comment">// 判断队列是否为空</span><br>        <span class="hljs-keyword">if</span>(queue.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;queue is empty!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;queue is not empty!&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 获取队列元素个数</span><br>        System.out.println(<span class="hljs-string">&quot;获取队列元素个数 :&quot;</span>+queue.size());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">a<br>b<br>c<br>d<br>e<br>**************************************************<br>返回第一个元素 :a<br>**************************************************<br>删除队头元素 :a<br>b<br>c<br>d<br>e<br>**************************************************<br>queue is not empty!<br>获取队列元素个数 :<span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h2 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h2><a href="#">Post not found: lc-0232-用栈实现队列 用栈实现队列</a><a href="#">Post not found: lc-0239-滑动窗口最大值 滑动窗口最大值</a><a href="#">Post not found: lc-0641-设计循环双端队列 设计循环双端队列</a>]]></content>
    
    
    
    <tags>
      
      <tag>算法学习</tag>
      
      <tag>67</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GoTrip项目部署</title>
    <link href="/GoTrip%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2"/>
    <url>/GoTrip%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2</url>
    
    <content type="html"><![CDATA[<h1 id="搭建数据库环境"><a href="#搭建数据库环境" class="headerlink" title="搭建数据库环境"></a>搭建数据库环境</h1><h2 id="1-VirtualBox安装CentOS7镜像"><a href="#1-VirtualBox安装CentOS7镜像" class="headerlink" title="1. VirtualBox安装CentOS7镜像"></a>1. VirtualBox安装CentOS7镜像</h2><p>下载地址：<a href="https://mirrors.aliyun.com/centos/7/isos/x86_64/">https://mirrors.aliyun.com/centos/7/isos/x86_64/</a><br>选择镜像：<br><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211008171420.png" alt="image-20211008171410574"></p><p><strong>常规VM安装：新建 - 引入iso文件 - 启动安装</strong></p><h2 id="2-VirtualBox虚拟机配置CentOS7网络图文详解教程"><a href="#2-VirtualBox虚拟机配置CentOS7网络图文详解教程" class="headerlink" title="2. VirtualBox虚拟机配置CentOS7网络图文详解教程"></a>2. VirtualBox虚拟机配置CentOS7网络图文详解教程</h2><p>参考链接：<a href="https://www.linuxidc.com/Linux/2017-01/139345.htm">https://www.linuxidc.com/Linux/2017-01/139345.htm</a></p><h2 id="3-centos7-安装MySQL5-7"><a href="#3-centos7-安装MySQL5-7" class="headerlink" title="3. centos7 安装MySQL5.7"></a>3. centos7 安装MySQL5.7</h2><p>参考链接：<a href="https://blog.csdn.net/EB_NUM/article/details/105425622">https://blog.csdn.net/EB_NUM/article/details/105425622</a></p><h2 id="4-mysql使用source执行sql脚本"><a href="#4-mysql使用source执行sql脚本" class="headerlink" title="4. mysql使用source执行sql脚本"></a>4. mysql使用source执行sql脚本</h2><p>参考链接：<a href="https://www.cnblogs.com/elfin/p/11423809.html">https://www.cnblogs.com/elfin/p/11423809.html</a></p><h2 id="5-mysql-设置-date-默认为000"><a href="#5-mysql-设置-date-默认为000" class="headerlink" title="5.mysql  设置 date 默认为000"></a>5.mysql  设置 date 默认为000</h2><p><a href="https://blog.csdn.net/qq_26570215/article/details/105848024">https://blog.csdn.net/qq_26570215/article/details/105848024</a></p><h2 id="6-配置mysql5-1表名不区分大小写"><a href="#6-配置mysql5-1表名不区分大小写" class="headerlink" title="6.配置mysql5.1表名不区分大小写"></a>6.配置mysql5.1表名不区分大小写</h2><p><a href="https://blog.csdn.net/wushuchu/article/details/80529254">https://blog.csdn.net/wushuchu/article/details/80529254</a></p><h2 id="7-centos7-防火墙状态："><a href="#7-centos7-防火墙状态：" class="headerlink" title="7.centos7 防火墙状态："></a>7.centos7 防火墙状态：</h2><p>CentOS 6 之前的写法，也适用于CentOS7：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">service firewalld status/stop/start/restart<br></code></pre></div></td></tr></table></figure><p>CentOS 7 之后的写法：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl status/start/stop/disable firewalld.service<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Golang入门-01-基础语法</title>
    <link href="/Golang%E5%85%A5%E9%97%A8-01-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95"/>
    <url>/Golang%E5%85%A5%E9%97%A8-01-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95</url>
    
    <content type="html"><![CDATA[<h1 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h1><ol><li>go语言语法</li><li>微服务项目（使用go语言实现的web框架、redis、mysql、fastdfs）</li></ol><h2 id="go语言本身"><a href="#go语言本身" class="headerlink" title="go语言本身"></a>go语言本身</h2><ol><li>go语言出生: 2008年左右，由Google公司开发，成员都是c语言的大佬。</li><li>开发速度快，执行效率搞：<ol><li>开发速度 ：c &lt; go &lt; python</li><li>效率：python &lt; go &lt; c</li></ol></li><li>使用go语言开发的项目有：docker、k8s、区块链项目（以太坊、fabric）、七牛云、滴滴</li><li>公司开发新项目、旧项目重构：<strong>后台服务器、web服务器</strong> 都可以使用go语言</li></ol><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="go语言-vs-c语言"><a href="#go语言-vs-c语言" class="headerlink" title="go语言 vs c语言"></a>go语言 vs c语言</h1><p>go语言和c语言在语法上的区别可以参考此<a href="https://hyperpolyglot.org/c">链接</a></p><h1 id="一、Go语言概述"><a href="#一、Go语言概述" class="headerlink" title="一、Go语言概述"></a>一、Go语言概述</h1><h2 id="1-工程管理"><a href="#1-工程管理" class="headerlink" title="1. 工程管理"></a>1. 工程管理</h2><h3 id="GOPATH："><a href="#GOPATH：" class="headerlink" title="- GOPATH："></a>- GOPATH：</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><p><em>gopath是所有项目的根路径</em></p><p>go语言项目有特定的目录结构进行管理，一个标准的go工程使用GOPATH环境变量来指定，并且需要三个目录结构：</p><ul><li>src<ul><li>存放项目源代码</li></ul></li><li>bin<ul><li>使用 go install 命令后生成文件存放的路径，即存放编译后的程序（.exe等可执行二进制文件）</li></ul></li><li>pkg<ul><li>缓存包</li></ul></li></ul><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h4><ol><li><p>创建项目文件结构</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210803225500.png" alt="image-20210803225458547"></p></li><li><p>编辑系统环境变量</p></li></ol><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210803225342.png" alt="image-20210803225340280"></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210803225542.png" alt="image-20210803225541196"></p><h3 id="GOROOT"><a href="#GOROOT" class="headerlink" title="-  GOROOT"></a>-  GOROOT</h3><ol><li><p>概念</p><p>存放 go 语言标准库 sdk： software development kit 的</p></li><li><p>下载安装</p><p><a href="https://golang.google.cn/dl/">go标准库下载地址</a></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210803225938.png" alt="image-20210803225936654"></p><p>下载安装完成后，配置系统环境变量</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210803230221.png" alt="安装完成"></p><p>配置系统变量<br><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210803230338.png" alt="image-20210803230337444"></p></li></ol><h3 id="使用GoLand工具"><a href="#使用GoLand工具" class="headerlink" title="使用GoLand工具"></a>使用GoLand工具</h3><ol><li>使用 GoLand 工具打开项目</li></ol><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210803231046.png" alt="image-20210803231045045"></p><ol start="2"><li>配置 settings 中的 GOROOT 和 GOPATH</li></ol><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210803231920.png" alt="image-20210803231919957"></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210803231901.png" alt="image-20210803231900401"></p><h2 id="2-HelloWorld概述"><a href="#2-HelloWorld概述" class="headerlink" title="2. HelloWorld概述"></a>2. HelloWorld概述</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-comment">// 每个go程序，都必须有一个 package main</span><br><span class="hljs-comment">// 每个go程序，都是以 .go 结尾， go程序中没有 .h 没有 .o 只有 .go</span><br><span class="hljs-comment">// 一个 &quot;package 包名&quot; 相当于命名空间 std::cout</span><br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><span class="hljs-comment">// 导入一个标准包 fmt，format 用于格式化输出</span><br><br><span class="hljs-comment">// 主函数，所有的函数必须使用 func 开头</span><br><span class="hljs-comment">// 一个函数的返回值，不会放在 func 前面，而是放在参数列表后面</span><br><span class="hljs-comment">// 函数的左花括号必须与函数名同行，不能写到下一行</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// go语言语句不需要使用分号结尾</span><br>fmt.Println(<span class="hljs-string">&quot;say&quot;</span>);<br>fmt.Println(<span class="hljs-string">&quot;hello world&quot;</span>)<br>now := time.Now()<br>fmt.Println(now)<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-go语言特点"><a href="#3-go语言特点" class="headerlink" title="3. go语言特点"></a>3. go语言特点</h2><h2 id="4-goland终端配置成shell"><a href="#4-goland终端配置成shell" class="headerlink" title="4. goland终端配置成shell"></a>4. goland终端配置成shell</h2><h2 id="5-go命令"><a href="#5-go命令" class="headerlink" title="5. go命令"></a>5. go命令</h2><h1 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h1><h2 id="1-变量定义"><a href="#1-变量定义" class="headerlink" title="1. 变量定义"></a>1. 变量定义</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-comment">// idea会自动导入程序中使用的包</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// 变量定义： var</span><br><span class="hljs-comment">// 常量定义： const</span><br><br><span class="hljs-comment">// 01-先定义变量在赋值，</span><br><span class="hljs-comment">// 格式: var 变量名 数据类型</span><br><span class="hljs-keyword">var</span> name <span class="hljs-keyword">string</span><br>name = <span class="hljs-string">&quot;fuku&quot;</span> <span class="hljs-comment">//Ctrl + Alt +l 可以快速格式化代码</span><br><br><span class="hljs-keyword">var</span> age <span class="hljs-keyword">int</span><br>age = <span class="hljs-number">22</span><br><br>fmt.Println(<span class="hljs-string">&quot;name:&quot;</span>, name)<br>fmt.Printf(<span class="hljs-string">&quot;name: %s, age: %d \n&quot;</span>, name, age)<br><br><span class="hljs-comment">// 02-定义时候直接赋值</span><br><span class="hljs-keyword">var</span> gender = <span class="hljs-string">&quot;man&quot;</span><br>fmt.Println(<span class="hljs-string">&quot;gender:&quot;</span>, gender)<br><br><span class="hljs-comment">// 03-使用&quot;:=&quot;直接推导</span><br>address := <span class="hljs-string">&quot;北京&quot;</span><br>fmt.Println(<span class="hljs-string">&quot;address:&quot;</span>, address)<br><br><span class="hljs-comment">// 平行赋值</span><br>i, j := <span class="hljs-number">10</span>, <span class="hljs-number">20</span><br>fmt.Println(<span class="hljs-string">&quot;变换前 ==》 i:&quot;</span>, i, <span class="hljs-string">&quot;,j:&quot;</span>, j)<br><br>i, j = j, i<br>fmt.Println(<span class="hljs-string">&quot;变换后 ==》 i:&quot;</span>, i, <span class="hljs-string">&quot;,j:&quot;</span>, j)<br><br><span class="hljs-comment">// 测试函数</span><br>test(i,<span class="hljs-string">&quot;str&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">(a <span class="hljs-keyword">int</span>, b <span class="hljs-keyword">string</span>)</span></span>&#123;<br>fmt.Println(a)<br>fmt.Println(b)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210804003839.png" alt="image-20210804003837935"></p><h2 id="2-自增语法"><a href="#2-自增语法" class="headerlink" title="2. 自增语法"></a>2. 自增语法</h2><p> c语言：i++,i–,–i,++i<br> go语言：① i++,i–没有 –i 和 ++i<br>        ② 自增语法必须单独一行</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>i:=<span class="hljs-number">20</span><br>i++<br><span class="hljs-comment">// 错误使用</span><br><span class="hljs-comment">// ++i 为了使语义更加明确，go语法不允许使用 ++i</span><br><span class="hljs-comment">//fmt.Println(&quot;i:&quot;,i++) 这种也是错误的，不允许和其他代码放在一起，必须单独一行</span><br>fmt.Println(<span class="hljs-string">&quot;i:&quot;</span>,i)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="3-指针"><a href="#3-指针" class="headerlink" title="3. 指针"></a>3. 指针</h2><h2 id="4-不支持的语法汇总"><a href="#4-不支持的语法汇总" class="headerlink" title="4. 不支持的语法汇总"></a>4. 不支持的语法汇总</h2><h2 id="5-字符串string"><a href="#5-字符串string" class="headerlink" title="5. 字符串string"></a>5. 字符串string</h2><h2 id="6-定长数组"><a href="#6-定长数组" class="headerlink" title="6. 定长数组"></a>6. 定长数组</h2><h2 id="7-不定长数组（切片、slice）"><a href="#7-不定长数组（切片、slice）" class="headerlink" title="7. 不定长数组（切片、slice）"></a>7. 不定长数组（切片、slice）</h2><h2 id="8-字典-（map）"><a href="#8-字典-（map）" class="headerlink" title="8. 字典 （map）"></a>8. 字典 （map）</h2><h2 id="9-函数"><a href="#9-函数" class="headerlink" title="9. 函数"></a>9. 函数</h2><h2 id="10-import"><a href="#10-import" class="headerlink" title="10. import"></a>10. import</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GRPC-01-Protobuf语言指南</title>
    <link href="/GRPC-01-Protobuf%E8%AF%AD%E8%A8%80%E6%8C%87%E5%8D%97"/>
    <url>/GRPC-01-Protobuf%E8%AF%AD%E8%A8%80%E6%8C%87%E5%8D%97</url>
    
    <content type="html"><![CDATA[<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&mid=2247483855&idx=1&sn=5f41a7ec8b2f0634663933397d9727dc&chksm=fa80d058cdf7594e70b018e560ee08278a3f6722dc5502aab27d85cf6cd04a871ead94fd80af&scene=178&cur_album_id=1576438069854027776#rd">链接</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>grpc</tag>
      
      <tag>protobuf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker-Study-04-Docker常用命令</title>
    <link href="/Docker-Study-04-Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4"/>
    <url>/Docker-Study-04-Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4</url>
    
    <content type="html"><![CDATA[<h1 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h1><h2 id="1-帮助命令"><a href="#1-帮助命令" class="headerlink" title="1. 帮助命令"></a>1. 帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker version # 显示docker的版本信息<br>docker info # 显示docker的详细信息，包括镜像和容器数量<br>docker 命令 --help# 帮助命令<br></code></pre></div></td></tr></table></figure><h2 id="2-镜像命令"><a href="#2-镜像命令" class="headerlink" title="2. 镜像命令"></a>2. 镜像命令</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker images# 列出镜像<br>docker search   #搜索镜像（推荐上 dockerhub 搜索，可以查看镜像版本信息）<br>docker pull 镜像名[:tag] # 下载镜像 <br>docker rmi 镜像id       # 删除镜像<br></code></pre></div></td></tr></table></figure><p><strong>docker images</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker images<br>REPOSITORY    TAG       IMAGE ID       CREATED        SIZE<br>hello-world   latest    d1165f221234   4 months ago   13.3kB<br><br><br><span class="hljs-meta">#</span><span class="bash"> 解释</span><br>REPOSITORY   # 镜像仓库源<br>TAG# 镜像的标签<br>IMAGE ID# 镜像id<br>CREATED# 创建时间<br>SIZE# 镜像大小<br><span class="hljs-meta">#</span><span class="bash"> 可选项</span><br>Options:<br>  -a, --all             Show all images (default hides intermediate images)# 列出所有镜像<br>  -q, --quiet           Only show image IDs # 只显示镜像的id<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker images -aq # 列出所有镜像的id<br>d1165f221234<br></code></pre></div></td></tr></table></figure><p><strong>docker pull</strong> 下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> docker pull 镜像名[:tag]</span><br>docker pull tomcat:8<br>8: Pulling from library/tomcat # 如果不写tag，默认就是latest<br>0bc3020d05f1: Pull complete  # 分层下载：docker image 的核心 -&gt; 联合文件系统<br>a110e5871660: Pull complete <br>83d3c0fa203a: Pull complete <br>a8fd09c11b02: Pull complete <br>96ebf1506065: Pull complete <br>26b72ffca293: Pull complete <br>0bffa2ea17aa: Pull complete <br>d880cebcc7a6: Pull complete <br>d607223b73ca: Pull complete <br>27a5deacef56: Pull complete <br>Digest: sha256:a266dd222864de2fe72e0464e6d91c406a687c861bb72a07218e6d7c89fe1d3e # 签名: 防伪<br>Status: Downloaded newer image for tomcat:8<br>docker.io/library/tomcat:8 # 真实地址<br><br><span class="hljs-meta">#</span><span class="bash"> 等价于</span><br>docker pull tomcat:8<br>docker pull docker.io/library/tomcat:8<br></code></pre></div></td></tr></table></figure><p><strong>docker rmi 镜像id</strong> 删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker rmi -f 镜像id  # 删除指定镜像<br>docker rmi -f 镜像id 镜像id 镜像id   # 删除多个指定镜像<br>docker rmi -f $(docker images -aq)  # 删除全部镜像<br></code></pre></div></td></tr></table></figure><h2 id="3-容器命令"><a href="#3-容器命令" class="headerlink" title="3. 容器命令"></a>3. 容器命令</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker run 镜像id # 新建容器并启动<br>docker ps# 列出所有运行的容器 docker container list<br>docker rm 容器id# 删除指定容器<br>docker start 容器id # 启动容器<br>docker stop 容器id # 停止当前正在运行的容器<br>docker kill 容器id # 强制停止当前容器<br></code></pre></div></td></tr></table></figure><blockquote><p>说明：我们有了镜像才可以运行容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker container<br><br>Usage:  docker container COMMAND<br><br>Manage containers<br><br>Commands:<br>  attach      Attach local standard input, output, and error streams to a running container<br>  commit      Create a new image from a container&#x27;s changes<br>  cp          Copy files/folders between a container and the local filesystem<br>  create      Create a new container<br>  diff        Inspect changes to files or directories on a container&#x27;s filesystem<br>  exec        Run a command in a running container<br>  export      Export a container&#x27;s filesystem as a tar archive<br>  inspect     Display detailed information on one or more containers<br>  kill        Kill one or more running containers<br>  logs        Fetch the logs of a container<br>  ls          List containers<br>  pause       Pause all processes within one or more containers<br>  port        List port mappings or a specific mapping for the container<br>  prune       Remove all stopped containers<br>  rename      Rename a container<br>  restart     Restart one or more containers<br>  rm          Remove one or more containers<br>  run         Run a command in a new container<br>  start       Start one or more stopped containers<br>  stats       Display a live stream of container(s) resource usage statistics<br>  stop        Stop one or more running containers<br>  top         Display the running processes of a container<br>  unpause     Unpause all processes within one or more containers<br>  update      Update configuration of one or more containers<br>  wait        Block until one or more containers stop, then print their exit codes<br><br>Run &#x27;docker container COMMAND --help&#x27; for more information on a command.<br></code></pre></div></td></tr></table></figure><p><strong>新建容器并且启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker run [可选参数] image | docker container run [可选参数] image<br><span class="hljs-meta">#</span><span class="bash"> 参数说明</span><br>--name NAME容器名字 tomcat01  tomcat01 用来区分容器<br>-d   后台方式运行（需要有正在执行的前台程序）<br>-it   使用交互方式运行，进入容器查看内容<br>-p    指定容器的端口 -p 8080(宿主机):8080(容器)<br>-p ip:主机端口:容器端口<br>-p 主机端口:容器端口<br>-p 容器端口<br>容器端口<br>-P（大写）       随机指定端口<br></code></pre></div></td></tr></table></figure><p>测试：启动并且进入容器</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在宿主机执行 docker run 命令</span><br>[root@aliyun ~]# docker run -it centos /bin/bash<br>Unable to find image &#x27;centos:latest&#x27; locally<br>latest: Pulling from library/centos<br>7a0437f04f83: Pull complete <br>Digest: sha256:5528e8b1b1719d34604c87e11dcd1c0a20bedf46e83b5632cdeac91b8c04efc1<br>Status: Downloaded newer image for centos:latest<br><span class="hljs-meta">#</span><span class="bash"> 进入容器的 /bin/bash 控制台 执行 ls 命令</span><br>[root@c9134165c4c7 /]# ls<br>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<br><span class="hljs-meta">#</span><span class="bash"> 从容器退出主机</span><br>[root@c9134165c4c7 /]# exit<br>exit<br>[root@aliyun ~]# ls<br></code></pre></div></td></tr></table></figure><p><strong>列出所有运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> docker ps [OPTIONS] <span class="hljs-comment">#列出当前正在运行的容器</span></span><br>List containers<br>Options:<br>  -a, --all             Show all containers (default shows just running)<br>  -f, --filter filter   Filter output based on conditions provided<br>      --format string   Pretty-print containers using a Go template<br>  -n, --last int        Show n last created containers (includes all states) (default -1)<br>  -l, --latest          Show the latest created container (includes all states)<br>      --no-trunc        Don&#x27;t truncate output<br>  -q, --quiet           Only display container IDs<br>  -s, --size            Display total file sizes<br></code></pre></div></td></tr></table></figure><p>测试：比较 <code>docker ps [option]</code> 各种参数效果</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 列出所有正在运行的容器</span><br>[root@aliyun ~]# docker ps <br>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 当前没有正在运行的容器</span></span><br><br><br><span class="hljs-meta">#</span><span class="bash"> -a 列出所有正在运行以及之前运行过的容器</span><br>[root@aliyun ~]# docker ps -a<br>CONTAINER ID   IMAGE         COMMAND       CREATED         STATUS                     PORTS     NAMES<br>c9134165c4c7   centos        &quot;/bin/bash&quot;   8 minutes ago   Exited (0) 7 minutes ago             bold_bell<br>7c146f0991ac   hello-world   &quot;/hello&quot;      5 days ago      Exited (0) 5 days ago                tender_lichterman<br><br><span class="hljs-meta">#</span><span class="bash"> -q 列出所有正在运行的容器ID</span> <br>[root@aliyun ~]# docker ps -q<br>c9134165c4c7<br><br><span class="hljs-meta">#</span><span class="bash"> -aq 列出所有正在运行以及之前运行过的容器ID</span><br>[root@aliyun ~]# docker ps -aq<br>c9134165c4c7<br>7c146f0991ac<br><br><span class="hljs-meta">#</span><span class="bash"> -f=name=<span class="hljs-string">&#x27;tender_*&#x27;</span> 列出所有正在运行以及之前运行过的，满足过滤条件的容器</span><br>[root@aliyun ~]# docker ps -f=name=&#x27;tender_*&#x27;<br>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<br>[root@aliyun ~]# docker ps -a -f=name=&#x27;tender_*&#x27;<br>CONTAINER ID   IMAGE         COMMAND    CREATED      STATUS                  PORTS     NAMES<br>7c146f0991ac   hello-world   &quot;/hello&quot;   5 days ago   Exited (0) 5 days ago             tender_lichterman<br><br><span class="hljs-meta">#</span><span class="bash"> 列出最近运行过的一个容器</span><br>[root@aliyun ~]# docker ps -l<br>CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                      PORTS     NAMES<br>c9134165c4c7   centos    &quot;/bin/bash&quot;   11 minutes ago   Exited (0) 11 minutes ago             bold_bell<br><br></code></pre></div></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">exit # 从容器中直接退出<br>ctrl +P +Q # 从容器中退出，且不停止容器<br></code></pre></div></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker rm 容器id # 删除指定的容器，不能删除正在运行的容器，如果需要强制则可以使用 -f 参数<br>docker rm -f $(docker ps -aq) # 删除所有容器<br>docker ps -a -q|xargs docker rm # 删除所有容器<br></code></pre></div></td></tr></table></figure><p><strong>启动和停止容器的操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker start 容器id# 启动容器<br>dockers restart 容器id# 重启容器<br>docker stop 容器id# 停止当前正在运行的容器<br>docker kill 容器id# 强制停止当前容器<br></code></pre></div></td></tr></table></figure><h2 id="4-其他常用命令"><a href="#4-其他常用命令" class="headerlink" title="4. 其他常用命令"></a>4. 其他常用命令</h2><p><strong>后台启动命令</strong> </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令 docker run -d 镜像名[:tag]</span><br>[root@aliyun ~]# docker run -d centos<br>25d630457060e9736c911aa2b405552f1d57579cdf57af152cbb358606987834<br>[root@aliyun ~]# docker ps<br>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<br><span class="hljs-meta">#</span><span class="bash"> docker ps 查看，发现 centos 停止了</span><br></code></pre></div></td></tr></table></figure><blockquote><p> 常见坑点：docker 容器使用 -d 后台方式运行时，必须要有一个<strong>前台进程</strong>，否则 Docker-Server发现没有应用，就会自动停止。</p></blockquote><p>例如 ： nginx 容器启动后，发现自己没有提供服务，就会立刻停止容器。</p><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@aliyun ~]# docker logs --help<br>Usage:  docker logs [OPTIONS] CONTAINER # 使用方式<br>Fetch the logs of a container  # 获取容器的日志<br>Options:<br>      --details        Show extra details provided to logs<br>  -f, --follow         Follow log output<br>      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)<br>  -n, --tail string    Number of lines to show from the end of the logs (default &quot;all&quot;)<br>  -t, --timestamps     Show timestamps<br>      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)<br></code></pre></div></td></tr></table></figure><p>测试： 在 <code>centos</code> 中模拟日志输出1000条日志</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker run -d centos /bin/sh -c &quot;for((i=1;i&lt;=1000;i++));do echo 123; done&quot;<br></code></pre></div></td></tr></table></figure><p>显示日志</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">-tf #显示日志信息（一直更新）<br>-tail number #需要显示的日志条数<br>docker logs -t --tail n 容器id  # 查看n行日志<br>docker logs -tf 容器id  # 跟踪日志<br></code></pre></div></td></tr></table></figure><p><strong>查看容器中进程信息 <code>ps</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker top 容器id<br></code></pre></div></td></tr></table></figure><p><strong>查看镜像的元数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令</span><br>docker inspect 容器id<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 测试</span><br><span class="hljs-meta">$</span><span class="bash"> docker inspect 00ca57857283</span><br>[<br>    &#123;<br>        &quot;Id&quot;: &quot;00ca57857283e5a25da3f32164648859e192e46a5459fdac1c1d4fdfd873ffcc&quot;,<br>        &quot;Created&quot;: &quot;2021-12-25T06:56:57.7741567Z&quot;,<br>        &quot;Path&quot;: &quot;/usr/local/bin/docker-entrypoint.sh&quot;,<br>        &quot;Args&quot;: [<br>            &quot;eswrapper&quot;<br>        ],<br>        ....<br>    &#125;<br>]<br></code></pre></div></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><p>容器通常都是使用后台方式运行的，当我们需要进入容器修改一些配置时，可以使用 exec 或者 attach。</p><p>两者区别在于：</p><ol><li>docker exec 会开启一个新的终端，相当于进入了容器内部的 bash。（常用）</li><li>docker attach 是直接进入容器正在执行的终端。</li></ol><p>方式一：使用 <code>exec</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker exec -it 容器id bashshell<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 测试</span><br>docker exec -it 00ca57857283 /bin/sh<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211225192526.png" alt="image-20211225192524330"></p><p>方式二：使用 <code>attach</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker attach 容器id<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 测试</span><br>docker attach 容器id<br></code></pre></div></td></tr></table></figure><p><strong>将容器内的文件拷贝到主机上</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker cp 容器id:容器内路径主机目的路径<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 测试：在容器内部创建一个test.txt文件，退出容器，在主机中使用cp命令将容器中创建的文件复制到主机</span><br><span class="hljs-meta">$</span><span class="bash"> docker <span class="hljs-built_in">exec</span> -it 00ca57857283 /bin/sh <span class="hljs-comment"># 进入容器内部</span></span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello&quot;</span> &gt; test.txt <span class="hljs-comment"># 新建一个test.txt</span></span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">pwd</span>  <span class="hljs-comment"># 查看当前路径，由于在 win10 系统安装Docker Desktop操作，需要看下路径。</span></span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">exit</span> <span class="hljs-comment"># 退出容器</span></span><br><span class="hljs-meta">$</span><span class="bash"> docker cp 00ca57857283:/usr/share/elasticsearch/test.txt /e/ <span class="hljs-comment"># 复制文件到 e 盘</span></span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211226041814.png" alt="image-20211226041812694"></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20211226042324.png" alt="image-20211226042323068"></p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><ol><li>docker 主要包含四个部分：registry 仓库、images、container、host主机。<ol><li>registry 仓库中存放 images 镜像文件。可以通过 search 命令搜索镜像，通过 pull 、push 拉取或者推送镜像。</li><li>images 是启动容器的基础。通过 run 命令使用 images 初始化一个container容器。</li><li>container 容器与宿主机 host 隔离。可以通过 start、stop、kill、pause、unpase 进行容器状态的变更。<ol><li>在 host 主机通过 inspect、top、logs、ps、rm 等可以查看一个容器状态或者信息。通过 exec attach 可以从 host 主机进入容器终端。 </li><li>通过 cp 可以复制文件内容。</li></ol></li></ol></li><li>两种文件 tar files 和 Dockerfile。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker-Study-02-安装</title>
    <link href="/Docker-Study-03-%E5%AE%89%E8%A3%85"/>
    <url>/Docker-Study-03-%E5%AE%89%E8%A3%85</url>
    
    <content type="html"><![CDATA[<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="1-Docker的基本组成"><a href="#1-Docker的基本组成" class="headerlink" title="1. Docker的基本组成"></a>1. Docker的基本组成</h2><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210703013958.png" alt="image-20210703004251732"></p><ul><li><p><strong>镜像（image)</strong></p><p>docker镜像就像一个执行列表，通过这个列表来创建容器服务，tomcat镜像==》run==》容器（提供服务），通过一个镜像可以创建多个容器（最终服务或者项目运行就是在容器之中的）</p></li><li><p><strong>容器（container）</strong></p><p>通过镜像创建的，独立运行一个或者一组应用。</p><p>包含<strong>启动</strong>，<strong>停止</strong>，<strong>删除</strong>、<strong>查看日志</strong>等基本命令</p><p>每一个容器都是包括简易的Linux系统终端</p></li><li><p><strong>仓库（repository）</strong></p><p>仓库是存放镜像的地方</p><p>分为<strong>公有</strong>仓库和<strong>私有</strong>仓库</p><p>DockerHub是国外地址</p><p>阿里云…等都有容器服务器(通过配置镜像加速即可)</p></li></ul><h2 id="2-Docker安装步骤"><a href="#2-Docker安装步骤" class="headerlink" title="2.Docker安装步骤"></a>2.Docker安装步骤</h2><ul><li><p>环境准备</p><p>Linux要求内核(knel)在3.0以上</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">~ uname -r<br>3.10.0-957.21.3.el7.x86_64 # 内核要求 3.0 以上<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">~ cat /etc/os-release <br>NAME=&quot;CentOS Linux&quot;<br>VERSION=&quot;7 (Core)&quot;<br>ID=&quot;centos&quot;<br>ID_LIKE=&quot;rhel fedora&quot;<br>VERSION_ID=&quot;7&quot;<br>PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;<br>ANSI_COLOR=&quot;0;31&quot;<br>CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;<br>HOME_URL=&quot;https://www.centos.org/&quot;<br>BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;<br><br>CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;<br>CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;<br>REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;<br>REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;<br></code></pre></div></td></tr></table></figure></li><li><p>安装</p><blockquote><p>帮助文档: <a href="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/</a></p></blockquote></li></ul><ol><li><p>卸载旧版本</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-engine<br></code></pre></div></td></tr></table></figure></li><li><p>需要的安装包</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install -y yum-utils<br></code></pre></div></td></tr></table></figure></li><li><p>设置镜像的仓库</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">配置国内阿里云的镜像地址</span><br>yum-config-manager \<br>    --add-repo \<br>    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><span class="hljs-meta">#</span><span class="bash"> 官网配置地址是国外的,不推荐</span><br>yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></div></td></tr></table></figure></li><li><p>安装docker相关的服务 docker-ce 社区版 -ee 企业版</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install docker-ce docker-ce-cli containerd.io<br><span class="hljs-meta">#</span><span class="bash"> docker-ce docker服务器</span><br><span class="hljs-meta">#</span><span class="bash"> docker-ce-cli docker客户端</span><br><span class="hljs-meta">#</span><span class="bash"> contianerd.io 容器</span><br></code></pre></div></td></tr></table></figure></li><li><p>使用 docker version 查看是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">~ docker version<br>Client: Docker Engine - Community<br> Version:           20.10.7<br> API version:       1.41<br> Go version:        go1.13.15<br> Git commit:        f0df350<br> Built:             Wed Jun  2 11:58:10 2021<br> OS/Arch:           linux/amd64<br> Context:           default<br> Experimental:      true<br>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?<br><span class="hljs-meta">#</span><span class="bash"> 安装成功</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动 docker 并测试</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl start docker<br><span class="hljs-meta">#</span><span class="bash"> 运行 docker run hello-world 测试docker是否启动成功</span><br>docker run hello-world<br>Unable to find image &#x27;hello-world:latest&#x27; locally # 未在本地找到镜像<br>latest: Pulling from library/hello-world # 从镜像仓库中拉取最新镜像<br>b8dfde127a29: Pull complete # 下载完成<br>Digest: sha256:9f6ad537c5132bcce57f7a0a20e317228d382c3cd61edae14650eec68b2b345c # 签名<br>Status: Downloaded newer image for hello-world:latest<br><span class="hljs-meta">#</span><span class="bash"> 运行容器</span><br>Hello from Docker!<br>This message shows that your installation appears to be working correctly.<br><br>To generate this message, Docker took the following steps:<br> 1. The Docker client contacted the Docker daemon.<br> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.<br>    (amd64)<br> 3. The Docker daemon created a new container from that image which runs the<br>    executable that produces the output you are currently reading.<br> 4. The Docker daemon streamed that output to the Docker client, which sent it<br>    to your terminal.<br><br>To try something more ambitious, you can run an Ubuntu container with:<br><span class="hljs-meta"> $</span><span class="bash"> docker run -it ubuntu bash</span><br><br>Share images, automate workflows, and more with a free Docker ID:<br> https://hub.docker.com/<br><br>For more examples and ideas, visit:<br> https://docs.docker.com/get-started/<br></code></pre></div></td></tr></table></figure></li><li><p>查看下载的镜像</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker images<br>REPOSITORY    TAG       IMAGE ID       CREATED        SIZE<br>hello-world   latest    d1165f221234   3 months ago   13.3kB<br><span class="hljs-meta">#</span><span class="bash"> SIZE 才 KB 级别</span><br></code></pre></div></td></tr></table></figure></li><li><p>卸载docker(了解即可)</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 1. 卸载依赖</span><br>yum remove docker-ce docker-ce-cli containerd.io<br><span class="hljs-meta">#</span><span class="bash"> 2. 删除资源</span><br>rm -rf /var/lib/docker<br>rm -rf /var/lib/containerd<br></code></pre></div></td></tr></table></figure></li><li><p>配置阿里云镜像加速</p><ul><li><p>登录阿里云找到容器服务</p></li><li><p>找到镜像加速器，在服务器执行命令即可</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210703014003.png" alt="image-20210703013628470"></p></li><li><p>run hello-world 执行流程</p></li></ul></li></ol><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210703181136.png" alt="image-20210703181134596"></p><h2 id="3-底层原理"><a href="#3-底层原理" class="headerlink" title="3.底层原理"></a>3.底层原理</h2><ul><li><p><strong>Docker是怎么工作的？</strong></p><blockquote><p>Docker是一个Client-Server结构的系统，Docker的守护进程（Docker daemon组件服务）运行在宿主机上，我们一般使用客户端通过Socket访问服务。</p></blockquote><p><strong>Docker-Client</strong>：就是Docker提供命令行界面工具，是用户与Docker进行交互的主要方式。客户端可以构建，运行和停止Docker应用，还可以远程与Docker_Host进行交互。</p><p><strong>Docker Daemon</strong>：包括三个部分：Docker Server、Engine、Job。Docker Daemon运行在Docker host上，负责创建、运行、监控容器，构建、存储镜像。Docker Daemon可以认为是通过Docker Server模块接受Docker Client的请求，并在Engine中处理请求，创建出置顶的Job并运行。</p><p><strong>Docker-Server</strong>：接收到Docker-Client的指令，就会执行这个命令！</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210706222738.png" alt="image-20210706222736869"></p></li><li><p><strong>为什么Docker比VM快</strong></p><ol><li><p>docker有着比虚拟机更少的抽象层。由于 docker 不需要 Hypervisor 实现硬件资源虚拟化，运行在 docker 容器上的程序直接使用的是实际物理机的硬件资源。因此在CPU、内存利用率上、在运行效率上 docker 有明显的优势。</p></li><li><p>docker 利用的是宿主机的内核，不需要 Guest OS。</p><p>Guest OS： VM中的系统（OS）</p><p>HostOS：物理机里的系统（OS）</p></li></ol><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210706223133.png" alt="image-20210706223133"></p><p>每次启动一个虚拟机时，虚拟机软件都需要先加载GuestOS系统，进行一系列的系统引导和开机检查，而docker直接利用宿主机的操作系统，省略了这个复杂的过程。即在创建一个容器时，docker不需要像虚拟机一样重新加载一个操作系统的内核，从而避免了引导、加载操作系统内核等费时费资源的过程。因此新建一个docker容器只需要几秒钟的时间。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker-Study-02-概述</title>
    <link href="/Docker-Study-02-%E6%A6%82%E8%BF%B0"/>
    <url>/Docker-Study-02-%E6%A6%82%E8%BF%B0</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-概述"><a href="#Docker-概述" class="headerlink" title="Docker 概述"></a>Docker 概述</h1><h2 id="Docker的出现"><a href="#Docker的出现" class="headerlink" title="Docker的出现"></a>Docker的出现</h2><p>一款产品：开发 - 上线 ！需要部署两套环境( 应用环境，应用配置!)</p><p>开发 — 运维 之间的可能出现冲突问题： 在开发环境中可以运行，但是由于版本更新，代码出错，不同步等可能导致服务不可用。</p><p>开发即运维！！</p><blockquote><p>根本原因：环境配置是十分麻烦，每一台机器都要部署环境（集群Redis、ES、Hadoop…）费事费力。</p></blockquote><p>传统发布一个项目：  发布一个 jar包，或者war包</p><p>Docker模式下发布一个项目：<strong>jar包 + 环境（Redis、MySQL、JDK、ES、Hadoop…）</strong>，即项目带上环境安装打包！</p><h2 id="Docker的发展历史"><a href="#Docker的发展历史" class="headerlink" title="Docker的发展历史"></a>Docker的发展历史</h2><p>2010年，几个年轻人在美国成立了一家公司 <code>dotcloud</code>，提供一些<code>Pass</code>的云计算服务、LXC</p><p>(Linux Container容器)有关的容器技术。但是没有引起关注，面临倒闭。</p><p>2013年，Docker开源，越来越多人发现docker的优点：LXC作为一种系统内核虚拟化技术，通过提供轻量级的虚拟化，使得不同容器之间的进程和资源相互隔离。</p><p>2014年4月9日，Docker 1.0发布！</p><h2 id="Docker-vs-VM"><a href="#Docker-vs-VM" class="headerlink" title="Docker vs VM"></a>Docker vs VM</h2><p>在容器技术出来之前，我们都是使用虚拟机技术。</p><ul><li>虚拟机：通过VMware虚拟出一台或者多台电脑。每一台电脑都是一套虚拟硬件，并运行一个完整的操作系统，然后在这个系统上安装和运行软件。</li><li>Docker容器：Docker容器是直接运行在宿主机上的，没有自己的内核，也没有虚拟出一套硬件，所以十分轻便。</li><li>每个容器内有一个属于自己的文件系统，互不影响。</li></ul><h2 id="DevOps-（开发-运维）"><a href="#DevOps-（开发-运维）" class="headerlink" title="DevOps （开发 + 运维）"></a>DevOps （开发 + 运维）</h2><ul><li><p><strong>更快速：应用更快速的交付和部署</strong></p><p>传统： 一堆帮助文档，安装环境+程序。</p><p>Docker：打包镜像发布测试，一键运行即可。</p></li><li><p><strong>更便捷的升级和扩缩容</strong></p><p>使用了Docker之后，部署应用就像是搭积木，将项目打包成一个镜像，可以直接扩展到服务器A和服务器B</p></li><li><p><strong>更简单的系统运维</strong></p><p>使用容器化技术，开发和测试环境是高度一致的。</p></li><li><p><strong>更高效的计算机资源利用</strong></p><p>Docker是内核级别的虚拟化，可以在一个物理机上运行很多个容器实例，服务器的资源能够更充分的利用。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker-Study-01-导论</title>
    <link href="/Docker-Study-01-%E5%AF%BC%E8%AE%BA"/>
    <url>/Docker-Study-01-%E5%AF%BC%E8%AE%BA</url>
    
    <content type="html"><![CDATA[<blockquote><p>Docker 学习目录</p></blockquote><ul><li>Docker 概述</li><li>Docker 安装</li><li>Docker 命令<ul><li>镜像命令</li><li>容器命令</li><li>操作命令</li><li>其他常用命令</li><li>..</li></ul></li><li>Docker 镜像 ！</li><li>容器数据卷 !</li><li>DockerFile</li><li>Docker网络原理</li><li>IDEA 整合 Docker</li><li>Docker Compose （集群）</li><li>Docker Swarm  – 简化版本的 K8s,容器编排</li><li>CI\CD Jenkins</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven项目管理，pom文件划线变灰解决</title>
    <link href="/maven%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%8Cpom%E6%96%87%E4%BB%B6%E5%88%92%E7%BA%BF%E5%8F%98%E7%81%B0%E8%A7%A3%E5%86%B3"/>
    <url>/maven%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%EF%BC%8Cpom%E6%96%87%E4%BB%B6%E5%88%92%E7%BA%BF%E5%8F%98%E7%81%B0%E8%A7%A3%E5%86%B3</url>
    
    <content type="html"><![CDATA[<p>问题：</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210603092609.png" alt="image-20210603092608207"></p><p>解决：<br>settings -&gt; maven -&gt; Ignored Files</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210603092728.png" alt="image-20210603092727014"></p>]]></content>
    
    
    
    <tags>
      
      <tag>maven</tag>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习git分支操作-learngitbranching</title>
    <link href="/%E5%AD%A6%E4%B9%A0git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C-learngitbranching"/>
    <url>/%E5%AD%A6%E4%B9%A0git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C-learngitbranching</url>
    
    <content type="html"><![CDATA[<p>本篇文章用来记录git版本管理学习过程中的命令。</p><p><strong>起因</strong>：需要对个人学习的项目进行版本控制。虽然个人学习的项目，项目人员只有自己一个，但是由于白天和晚上用的是不同的电脑进行学习。经常会出现两边版本不同的问题，但是又在两个版本都进行了修改，更秀的是在修改之前忘了pull新的代码到工作空间。所以出现了以下 “社死” 的情况（其实就是自己整理难受）所以决定来系统的学习以下git版本管理控制。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210527005106.png" alt="image-20210527005103765"></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210527005127.png" alt="image-20210527005126739"></p><p><strong>经过</strong>：发现了一个有趣的git操作学习网站：<a href="https://learngitbranching.js.org/?NODEMO=&amp;locale=zh_CN">https://learngitbranching.js.org/?NODEMO=&amp;locale=zh_CN</a></p><p>整个学习过程是一个类似于通关的项目。动画效果也很棒~所以决定来记录一下学习内容。（命令啥的，以便回顾）</p><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="1-提交-Git-Commit"><a href="#1-提交-Git-Commit" class="headerlink" title="1. 提交 Git Commit"></a>1. 提交 <code>Git Commit</code></h2><h2 id="2-分支-Git-Branch"><a href="#2-分支-Git-Branch" class="headerlink" title="2. 分支 Git Branch"></a>2. 分支 <code>Git Branch</code></h2><h2 id="3-合并分支-Git-Merge-amp-Git-Rebase"><a href="#3-合并分支-Git-Merge-amp-Git-Rebase" class="headerlink" title="3. 合并分支 Git Merge  &amp; Git Rebase"></a>3. 合并分支 <code>Git Merge</code>  &amp; <code>Git Rebase</code></h2><p>合并分支有两种方式： <code>git merge</code> 和 <code>git rebase</code></p><p>第一种方法 —— <code>git merge</code>。在 Git 中合并两个分支时会产生一个特殊的提交记录，它有两个父节点。翻译成自然语言相当于：“我要把这两个父节点本身及它们所有的祖先都包含进来。”</p><p>第二种合并分支的方法是 <code>git rebase</code>。Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。</p><blockquote><p>Rebase 的优势就是可以创造更线性的提交历史，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。</p></blockquote><h1 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h1><h2 id="1-分离-HEAD"><a href="#1-分离-HEAD" class="headerlink" title="1. 分离 HEAD"></a>1. 分离 <code>HEAD</code></h2><h2 id="2-相对引用-（-）-和-（-）"><a href="#2-相对引用-（-）-和-（-）" class="headerlink" title="2. 相对引用 （^） 和  （~）"></a>2. 相对引用 （^） 和  （~）</h2><h2 id="3-撤销变更-git-reset-HEAD-和-git-revert-HEAD"><a href="#3-撤销变更-git-reset-HEAD-和-git-revert-HEAD" class="headerlink" title="3. 撤销变更 git reset HEAD^ 和 git revert HEAD"></a>3. 撤销变更 <code>git reset HEAD^</code> 和 <code>git revert HEAD</code></h2>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>branch</tag>
      
      <tag>学习git版本管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode算法学习-数组和字符串</title>
    <link href="/leetcode%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2"/>
    <url>/leetcode%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2</url>
    
    <content type="html"><![CDATA[<h1 id="数组的简介"><a href="#数组的简介" class="headerlink" title="数组的简介"></a>数组的简介</h1><h2 id="集合，列表，数组"><a href="#集合，列表，数组" class="headerlink" title="集合，列表，数组"></a>集合，列表，数组</h2><ol><li>集合：由一个或多个确定的元素所构成的整体。<blockquote><p>特点</p></blockquote><ol><li>元素类型不一定相同</li><li>没有顺序</li></ol></li></ol><ol start="2"><li><p>列表：是一种数据项构成的有限序列，即按照一定的线性顺序，排列而成的数据项的集合。</p><blockquote><p>特点</p><ol><li>有序</li><li>长度可变 </li><li>类型不一定相同 </li></ol></blockquote></li></ol><p>  常见形式：数组和链表</p><ol start="3"><li>数组：数组是列表的实现方式之一，也是面试中经常涉及到的数据结构。</li></ol><blockquote><p>特点<br>    1. 具备列表特性，具有自己的特点。<br>    2. 在c++和JAVA中不可变，元素类型一致。<br>    3. python中为list，长度可变，类型可以不一致。</p></blockquote><ol start="4"><li>列表和数组的区别<ol><li>是否存在索引，内存空间是否连续。</li></ol></li></ol><h2 id="数组的4种操作"><a href="#数组的4种操作" class="headerlink" title="数组的4种操作"></a>数组的4种操作</h2><h3 id="读取元素"><a href="#读取元素" class="headerlink" title="读取元素"></a>读取元素</h3><p>通过索引的方式来读取数组中的元素。</p><ol><li>索引一般从 0 开始，只保存了索引为 <code>0</code> 处的内存地址。</li><li>计算内存地址这个过程是很快的，而我们一旦知道了内存地址就可以立即访问到该元素，因此它的时间复杂度是常数级别，为 O(1)。</li></ol><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><p>在查找元素时，需从数组开头逐步向后查找。</p><ol><li>如果数组中的某个元素为目标元素，则停止查找；否则继续搜索直到到达数组的末尾。</li><li>查找元素的时间复杂度为 O(N)</li></ol><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><p>插入元素时，有三种情况：</p><ol><li>在末尾直接添加元素，数组长度+1，且不需要挪动元素</li><li>在中间添加元素，数组长度+1，挪动 N到末尾的元素</li><li>在最开头添加元素，挪动N个元素。最坏情况</li></ol><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>删除元素的时候也有三种情况：</p><ol><li>在末尾直接删除</li><li>在中间删除</li><li>删除第一个元素（索引值为 0 的元素）</li></ol><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="寻找数组的中心索引"><a href="#寻找数组的中心索引" class="headerlink" title="寻找数组的中心索引"></a>寻找数组的中心索引</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210512010701.png" alt="image-20210512010659914"></p><p><strong>示例 1</strong></p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">输入：nums = [1, 7, 3, 6, 5, 6]<br>输出：3<br>解释：<br>中心下标是<span class="hljs-number"> 3 </span>。<br>左侧数之和 (1 +<span class="hljs-number"> 7 </span>+<span class="hljs-number"> 3 </span>= 11)，<br>右侧数之和 (5 +<span class="hljs-number"> 6 </span>= 11) ，二者相等。<br></code></pre></div></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight fix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs fix"><span class="hljs-attr">输入：nums </span>=<span class="hljs-string"> [1, 2, 3]</span><br><span class="hljs-string">输出：-1</span><br><span class="hljs-string">解释：</span><br><span class="hljs-string">数组中不存在满足此条件的中心下标。</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 3</strong></p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">输入：nums = [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>]<br>输出：<span class="hljs-number">0</span><br>解释：<br>中心下标是 <span class="hljs-number">0</span> 。<br>下标 <span class="hljs-number">0</span> 左侧不存在元素，视作和为 <span class="hljs-number">0</span> ；<br>右侧数之和为 <span class="hljs-number">1</span> + (-<span class="hljs-number">1</span>) = <span class="hljs-number">0</span> ，二者相等。<br><br>作者：力扣 (LeetCode)<br>链接：https:<span class="hljs-regexp">//</span>leetcode-cn.com<span class="hljs-regexp">/leetbook/</span>read<span class="hljs-regexp">/array-and-string/y</span>f47s/<br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></div></td></tr></table></figure><h4 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pivotIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(nums== <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> leftSum=<span class="hljs-number">0</span>,rightSum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i&lt;nums.length; i++)&#123;<br>            rightSum += nums[i];<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(rightSum == leftSum)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 注意：从 1 开始计算right的值</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i&lt;nums.length; i++)&#123;<br>            rightSum -= nums[i];<br>            leftSum += nums[i-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(rightSum == leftSum)&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210512010643.png" alt="image-20210512010642715"></p><h3 id="寻找插入位置"><a href="#寻找插入位置" class="headerlink" title="寻找插入位置"></a>寻找插入位置</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;nums.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(target &lt;= nums[i]) <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums.length;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210512010621.png" alt="image-20210512010619895"></p><h3 id="合并区间"><a href="#合并区间" class="headerlink" title="合并区间"></a>合并区间</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p><code>[[a1, a2],[b1, b2]]</code></p><p>普通的两个区间之间的关系有以下六种情况：</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210512223408.png" alt="image-20210512223406528"></p><p>所以第一步要对起始位置进行排序，排完序的相邻两个区间分成三种情况：互斥，相交，包含。其中，只有互斥的情况不需要合并。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210512223622.png" alt="image-20210512223621286"></p><p>分析得到判断条件为：</p><p>互斥：<code> a2 &gt; b1</code></p><p>相交或者包含： a2 &lt;= b1, 取 a2 和 b2 中大的那一个作为区间的右边。</p><h4 id="解题代码-1"><a href="#解题代码-1" class="headerlink" title="解题代码"></a>解题代码</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[][] merge(<span class="hljs-keyword">int</span>[][] intervals) &#123;<br>        <span class="hljs-comment">// 边界判断</span><br>        <span class="hljs-keyword">if</span> (intervals.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> intervals;<br>        <span class="hljs-comment">// //按每行的第0列升序排序</span><br>        Arrays.sort(intervals, Comparator.comparingInt(a -&gt; a[<span class="hljs-number">0</span>]));<br>        <span class="hljs-comment">// 不知道合并后的二维数组的长度，所以用List类实现动态数组。</span><br>        List&lt;<span class="hljs-keyword">int</span>[]&gt; integerVector = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">int</span>[] ints = intervals[<span class="hljs-number">0</span>];<span class="hljs-comment">//定义一个Int类型数组用于作比较，默认值为第一组二维数组的值。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; intervals.length; i++) &#123;<span class="hljs-comment">//循环这个二维数组</span><br>            <span class="hljs-keyword">if</span> (ints[<span class="hljs-number">1</span>] &gt;= intervals[i][<span class="hljs-number">0</span>]) &#123;<span class="hljs-comment">//如果第一个数组的右端点大于等于下一个数组的左端点，做说明两个数组有所交集。</span><br>                ints[<span class="hljs-number">1</span>] = Math.max(ints[<span class="hljs-number">1</span>], intervals[i][<span class="hljs-number">1</span>]);<span class="hljs-comment">//int类型数组的右端点等于两个数组中右端点大的那个值。</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                integerVector.add(ints);<span class="hljs-comment">//把int类型一维数组ints添加到我们创建的List类里面。</span><br>                ints = intervals[i];<span class="hljs-comment">//给一维数组重新赋值。</span><br>            &#125;<br>        &#125;<br>        integerVector.add(ints);<span class="hljs-comment">//把最后一个区间添加到List里面</span><br>        <span class="hljs-keyword">return</span> integerVector.toArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[integerVector.size()][<span class="hljs-number">2</span>]);<span class="hljs-comment">//把List转换成二维数组返回。</span><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="二维数组简介"><a href="#二维数组简介" class="headerlink" title="二维数组简介"></a>二维数组简介</h1><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>二位数组：数组中的每个元素都一个数组。（即一维数组套娃数组）</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210813005311.png" alt="image-20210813005309766"></p><p>本质上，二维数组还是一个一维数组。索引从0开始。可以看成一个<strong>矩阵</strong>，用来处理矩阵相关问题。</p><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p>二维数组 A=[[1,2,3,4],[2,4,5,6],[1,4,6,7]] 在内存中仍然是连续存储的，开始索引为 <code>A[0][0]</code>的内存地址。</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210813005248.png" alt="image-20210813005238956"></p><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><h3 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h3><h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210813005523644.png" alt="image-20210813005523644"></p><p><strong>示例 1</strong></p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">给定 matrix = <br><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[1,2,3]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[4,5,6]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[7,8,9]</span></span><br><span class="hljs-comment">]</span>,<br><br>原地旋转输入矩阵，使其变为:<br><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[7,4,1]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[8,5,2]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[9,6,3]</span></span><br><span class="hljs-comment">]</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">给定 matrix =<br><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[ 5, 1, 9,11]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[ 2, 4, 8,10]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[13, 3, 6, 7]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[15,14,12,16]</span></span><br><span class="hljs-comment">]</span>, <br><br>原地旋转输入矩阵，使其变为:<br><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[15,13, 2, 5]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[14, 3, 4, 1]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[12, 6, 8, 9]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[16, 7,10,11]</span></span><br><span class="hljs-comment">]</span><br></code></pre></div></td></tr></table></figure><h4 id="具体代码："><a href="#具体代码：" class="headerlink" title="具体代码："></a>具体代码：</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;<br>         <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="零矩阵"><a href="#零矩阵" class="headerlink" title="零矩阵"></a>零矩阵</h3><h3 id="对角线遍历"><a href="#对角线遍历" class="headerlink" title="对角线遍历"></a>对角线遍历</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>leetcode--算法学习</title>
    <link href="/leetcode-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0"/>
    <url>/leetcode-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0</url>
    
    <content type="html"><![CDATA[<p>练习平台<strong>：  leetcode 牛客网  pat<br>记住</strong>四个要点**：</p><ol><li>从学习板块开始</li><li>从简单的开始</li><li>从通过率高的开始</li><li>从高频率的开始</li></ol><p>学习路径：</p><ul><li><input disabled="" type="checkbox"> 数组</li><li><input disabled="" type="checkbox"> 字符串</li><li><input disabled="" type="checkbox"> 初级算法</li><li><input disabled="" type="checkbox"> 队列</li><li><input disabled="" type="checkbox"> 栈</li><li><input disabled="" type="checkbox"> 递归</li><li><input disabled="" type="checkbox"> 二叉树</li><li><input disabled="" type="checkbox"> 链表</li><li><input disabled="" type="checkbox"> 哈希表</li><li><input disabled="" type="checkbox"> 二分排序</li><li><input disabled="" type="checkbox"> 深度优先</li><li><input disabled="" type="checkbox"> 广度优先</li><li><input disabled="" type="checkbox"> 动态规划</li></ul><p>另外的小tips：<br>codetop 面试 题库<br>利用题解，学习一题多解<br>多写题解。看算法书（1～2本即可）<br>参加竞赛（比赛 pat考试 乙级  甲级 ）<br>小灰漫画算法（刷知识点）</p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>认识和使用GTD时间管理法则</title>
    <link href="/%E8%AE%A4%E8%AF%86%E5%92%8C%E4%BD%BF%E7%94%A8GTD%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E6%B3%95%E5%88%99"/>
    <url>/%E8%AE%A4%E8%AF%86%E5%92%8C%E4%BD%BF%E7%94%A8GTD%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E6%B3%95%E5%88%99</url>
    
    <content type="html"><![CDATA[<p>前言：<br>今天看到一个很有趣的一句话：“我们总是很容易陷入两种状态：累成狗，闲成猪。” – 来自 topbook|高效生活视频书的一篇关于 GTD时间管理法则 的系列文章。<br>内容讲述了如何通过 <code>GTD时间管理法则</code> 来规划学习生活中的待办事项。本文记录一下学习该系列文章的过程。</p><hr><h1 id="第一节：GTD-Getting-Things-Done-把事情做好，而不是把事情做完。"><a href="#第一节：GTD-Getting-Things-Done-把事情做好，而不是把事情做完。" class="headerlink" title="第一节：GTD (Getting Things Done) 把事情做好，而不是把事情做完。"></a>第一节：GTD (Getting Things Done) 把事情做好，而不是把事情做完。</h1><p><strong>GTD 的基本理念是</strong>：真正的生产力不应该通过实现计划目标的<em>数量</em>来衡量，而应该由本质上<em>有价值的结果</em>来衡量。</p><p>所以GTD的目的有以下两个：</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210511232306.png" alt="image-20210511224023420"></p><h1 id="第二节：GTD-的具体流程"><a href="#第二节：GTD-的具体流程" class="headerlink" title="第二节：GTD 的具体流程"></a>第二节：GTD 的具体流程</h1><p>GTD 版本对比</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210511232253.png" alt="image-20210511230944056"></p><p>新的版本更强调几件事：一是<strong>主动性</strong>，主动捕获，而不是简单收集；二是<strong>强调结果</strong>，需要明晰，而不是简单整理；三是在计划的同时，更强调回顾；四是执行更强调与执行对象的密切联系，而不是简单地做。</p><h2 id="一、捕获"><a href="#一、捕获" class="headerlink" title="一、捕获"></a>一、捕获</h2><p>将遇到的大小事情都捕获到你的收集箱中。</p><h2 id="二、明晰"><a href="#二、明晰" class="headerlink" title="二、明晰"></a>二、明晰</h2><p>从收集箱中拎出来一件一件事情，并问自己以下五个问题，将所有事情归类到对应清单中：</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210511232300.png" alt="image-20210511231353338"></p><h2 id="三、组织"><a href="#三、组织" class="headerlink" title="三、组织"></a>三、组织</h2><ol><li>将项目清单中的事件一个开始的计划，并将开始计划放入执行清单。</li><li>对执行清单中的事情进行排序。确定当下该做什么。</li></ol><h2 id="四、回顾"><a href="#四、回顾" class="headerlink" title="四、回顾"></a>四、回顾</h2><p>当第一次建立好的分区并部署好 GTD，从第二次使用开始，当你进行第二步（明晰）的时候，就已经在开始第三步（组织）了。而第四步的回顾，才是及其重要的一步。回顾你的所有清单，查出错漏，以及检查你的安排是否科学。其中——</p><ol><li>从收集箱出去的项目永远不要再放回收集箱</li><li>项目清单中的事项需要你主动将其拆解，步骤，并为其谋划执行方案，把大项目拆解成小步骤，并分解到其他清单当中。记住 GTD 的第二大目的，随时随地都明确地知道，下一步应该做什么；</li><li>要特别保障等待清单、可能清单、回收箱三个分区当中的回顾，主动确定等待清单是否被完成、回收箱和可能清单中的事项是否有变动（变成可执行或其他）</li><li>日历或提醒事项应用中的提醒是否恰当，比如下个月末要完成论文是 Deadline，但是否应该这个月就提醒自己，并且分解开来？</li><li>为第四步腾出专门的时间，比如每天、每三天或每周、每月。</li></ol><h2 id="五、执行"><a href="#五、执行" class="headerlink" title="五、执行"></a>五、执行</h2><p>执行和回顾，也不是两个完全分开的步骤。在具体执行过程当中，就已经在进行回顾，特别是对于项目清单当中的事项来说。</p><p>需要记住，执行，是Engage，而不是 Do，换成人话就是，<strong>你需要去“拿结果”，而不是做了 “等结果”。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>GTD</tag>
      
      <tag>时间管理</tag>
      
      <tag>TODO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git分支操作（提交,合并）</title>
    <link href="/Git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C%EF%BC%88%E6%8F%90%E4%BA%A4,%E5%90%88%E5%B9%B6%EF%BC%89"/>
    <url>/Git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C%EF%BC%88%E6%8F%90%E4%BA%A4,%E5%90%88%E5%B9%B6%EF%BC%89</url>
    
    <content type="html"><![CDATA[<h1 id="Git分支操作（提交-合并）"><a href="#Git分支操作（提交-合并）" class="headerlink" title="Git分支操作（提交,合并）"></a>Git分支操作（提交,合并）</h1><blockquote><p>假如我们现在在dev分支上，刚开发完项目，执行了下列命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git  add .<br>git  commit -m &#x27;提交的备注信息&#x27;<br>git  push -u origin dev<br></code></pre></div></td></tr></table></figure><blockquote><p>想将dev分支合并到master分支，操作如下</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 首先切换到master分支上</span><br>git  checkout master<br><span class="hljs-meta">#</span><span class="bash"> 多人开发的话 需要把远程master上的代码pull下来</span><br>git pull origin master<br><span class="hljs-meta">#</span><span class="bash"> 然后我们把dev分支的代码合并到master上</span><br>git  merge dev<br><br></code></pre></div></td></tr></table></figure><blockquote><p>然后查看状态及执行提交命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git status<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210430133615.png" alt="image-20210430133606704"></p><blockquote><p>最后执行下面提交命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git push origin master<br></code></pre></div></td></tr></table></figure><blockquote><p>其他远程命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 更新远程分支列表</span><br>git remote update origin --prune<br><br><span class="hljs-meta">#</span><span class="bash"> 查看所有分支</span><br>git branch -a<br><br><span class="hljs-meta">#</span><span class="bash"> 删除远程分支Chapater6</span><br>git push origin --delete Chapater6<br><br><span class="hljs-meta">#</span><span class="bash"> 删除本地分支 Chapater6</span><br>git branch -d  Chapater6<br></code></pre></div></td></tr></table></figure><blockquote><p>拉取包含子模块的项目</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git clone --recurse-submodules https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/chaconinc/</span>MainProject<br></code></pre></div></td></tr></table></figure><blockquote><p>修改git最后一次 commit 信息</p></blockquote><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">commit</span> <span class="hljs-built_in">--amend</span> -<span class="hljs-string">m</span> <span class="hljs-string">&quot;c3&quot;</span><br></code></pre></div></td></tr></table></figure><p>参考链接：<br>[1] : <a href="https://hexo.fluid-dev.com/posts/hexo-static/#%E6%96%B9%E6%A1%88%E4%BC%98%E7%82%B9">https://hexo.fluid-dev.com/posts/hexo-static/#%E6%96%B9%E6%A1%88%E4%BC%98%E7%82%B9</a><br>[2] : <a href="https://weiweiblog.cn/github_action/">https://weiweiblog.cn/github_action/</a><br>[3] : <a href="https://blog.csdn.net/weixin_34242658/article/details/91372512">https://blog.csdn.net/weixin_34242658/article/details/91372512</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Branch</tag>
      
      <tag>Hexo</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux使用-切换JDK版本</title>
    <link href="/Linux%E4%BD%BF%E7%94%A8-%E5%88%87%E6%8D%A2JDK%E7%89%88%E6%9C%AC"/>
    <url>/Linux%E4%BD%BF%E7%94%A8-%E5%88%87%E6%8D%A2JDK%E7%89%88%E6%9C%AC</url>
    
    <content type="html"><![CDATA[<h1 id="Linux使用-切换JDK版本"><a href="#Linux使用-切换JDK版本" class="headerlink" title="Linux使用-切换JDK版本"></a>Linux使用-切换JDK版本</h1><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428153246.png" alt="image-20210428153244896"></p><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">java -version<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428154241.png" alt="image-20210428154240772"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /usr/local/soft/<br>ls<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428154430.png" alt="image-20210428154429377"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar -zxvf jdk-8u261-linux-x64.tar.gz<br>ls<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428154707.png" alt="image-20210428154706593"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd jdk1.8.0_261/<br>ls<br>pwd<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428154907.png" alt="image-20210428154906012"></p><p>删除 jdk-11 解压包，修改 <code>/etc/profile</code> 配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /etc/profile<br></code></pre></div></td></tr></table></figure><p>修改内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><br></code></pre></div></td></tr></table></figure><p>使得配置生效</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">source /etc/profile<br></code></pre></div></td></tr></table></figure><p>查看 jdk版本是否更换为 1.8 成功。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux使用之提示-bash:xxx:未找到命令(zip和unzip)</title>
    <link href="/Linux%E4%BD%BF%E7%94%A8%E4%B9%8B%E6%8F%90%E7%A4%BA-bash-%E6%9C%AA%E6%89%BE%E5%88%B0%E5%91%BD%E4%BB%A4-zip%E5%92%8Cunzip"/>
    <url>/Linux%E4%BD%BF%E7%94%A8%E4%B9%8B%E6%8F%90%E7%A4%BA-bash-%E6%9C%AA%E6%89%BE%E5%88%B0%E5%91%BD%E4%BB%A4-zip%E5%92%8Cunzip</url>
    
    <content type="html"><![CDATA[<h1 id="问题：提示-bash-xxx-未找到命令-zip和unzip"><a href="#问题：提示-bash-xxx-未找到命令-zip和unzip" class="headerlink" title="问题：提示-bash:xxx:未找到命令(zip和unzip)"></a>问题：提示-bash:xxx:未找到命令(zip和unzip)</h1><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428152114.png" alt="image-20210428152105999"></p><h1 id="解决：yum-安装一下"><a href="#解决：yum-安装一下" class="headerlink" title="解决：yum 安装一下"></a>解决：yum 安装一下</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看是否安装 zip 或 unzip</span><br>yum list | grep zip/unzip <br><span class="hljs-meta">#</span><span class="bash"> 安装 zip 或 unzip</span><br>yum install zip<br>yum install unzip<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Typora + PicGo + Gitee搭建个人博客图床</title>
    <link href="/Typora-PicGo-Gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A"/>
    <url>/Typora-PicGo-Gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A</url>
    
    <content type="html"><![CDATA[<h1 id="Gitee-PicGo-Typora-搭建个人博客图床"><a href="#Gitee-PicGo-Typora-搭建个人博客图床" class="headerlink" title="Gitee + PicGo + Typora   搭建个人博客图床"></a>Gitee + PicGo + Typora   搭建个人博客图床</h1><blockquote><p>搭建前提</p></blockquote><p>​        <strong>电脑已经安装nodejs环境（node，npm）</strong></p><blockquote><p>软件版本</p></blockquote><ul><li>gitee：gitee码云平台账号，建立是由仓库</li><li>Typora： latest 最新版本，旧版本可能没有上传服务设定</li><li>PicGo：v2.2.2稳定版本</li></ul><h2 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h2><h3 id="注册登录gitee账号"><a href="#注册登录gitee账号" class="headerlink" title="注册登录gitee账号"></a>注册登录gitee账号</h3><blockquote><p><code>gitee</code> 地址： <a href="https://gitee.com/login">https://gitee.com/login</a></p></blockquote><p>gitee注册登录过程**[略]**</p><h3 id="建立图片仓库"><a href="#建立图片仓库" class="headerlink" title="建立图片仓库"></a>建立图片仓库</h3><blockquote><p>进入新建仓库页面</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427234413.png" alt="image-20210427234411793"></p><blockquote><p>配置仓库信息</p></blockquote><p><img src="C:\Users\Fuku\AppData\Roaming\Typora\typora-user-images\image-20210427235139450.png" alt="image-20210427235139450"></p><p>创建完成之后，复制仓库 https 地址为： <a href="https://gitee.com/fuku-lee/gitee-pic.git">https://gitee.com/fuku-lee/gitee-pic.git</a></p><blockquote><p>得到repo地址：<code>fuku-lee/gitee-pic</code> 【后面配置PicGo的时候需要用到】</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/image-20210427235855898.png" alt="image-20210427235855898"></p><h3 id="生成-私人的-token"><a href="#生成-私人的-token" class="headerlink" title="生成 私人的 token"></a>生成 私人的 token</h3><blockquote><p>打开 设置 =&gt; 选择 安装设置中的私人令牌 =&gt; 点击生成新令牌</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428000203.png" alt="image-20210427235956214"></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428000408.png" alt="image-20210428000407087"></p><blockquote><p>配置并提交令牌</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428000711.png" alt="image-20210428000709014"></p><p>完成之后，复制并保存私人token，后续个人</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428000843.png"></p><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><blockquote><p>nodejs 下载地址：<a href="https://npm.taobao.org/mirrors/node/v12.20.0/">https://npm.taobao.org/mirrors/node/v12.20.0/</a></p></blockquote><p><strong>下载完成后，安装一路<code>next</code>即可。</strong></p><h3 id="查看-node-版本"><a href="#查看-node-版本" class="headerlink" title="查看 node 版本"></a>查看 node 版本</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">node -v<br></code></pre></div></td></tr></table></figure><h3 id="查看-npm-版本"><a href="#查看-npm-版本" class="headerlink" title="查看 npm 版本"></a>查看 npm 版本</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm -version<br></code></pre></div></td></tr></table></figure><h2 id="安装PicGo"><a href="#安装PicGo" class="headerlink" title="安装PicGo"></a>安装PicGo</h2><blockquote><p>详细介绍请查看官方github项目简介： <a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p></blockquote><h3 id="PicGo-v2-2-2-下载"><a href="#PicGo-v2-2-2-下载" class="headerlink" title="PicGo v2.2.2 下载"></a>PicGo v2.2.2 下载</h3><p><a href="https://github.com/Molunerfinn/PicGo/releases/download/v2.2.2/PicGo-Setup-2.2.2.exe">https://github.com/Molunerfinn/PicGo/releases/download/v2.2.2/PicGo-Setup-2.2.2.exe</a></p><blockquote><p>如需下载其他版本打开github项目，选择 tags</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427233137.png" alt="image-20210427233136035"></p><blockquote><p>进入PicGo版本选择相应版本下载空间，以v2.2.2为例</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427233346.png" alt="image-20210427233345021"></p><blockquote><p>windows 环境下，选择 exe 安装包进行下载</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427233459.png" alt="image-20210427233458029"></p><h3 id="安装-PicGo"><a href="#安装-PicGo" class="headerlink" title="安装 PicGo"></a>安装 PicGo</h3><blockquote><p>下载完成之后，双击 exe 文件，选择安装路径，其他一路 <code>next</code> 即可</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427233758.png" alt="image-20210427233757269"></p><h3 id="配置-PicGo-使用-gitee-仓库作为图床"><a href="#配置-PicGo-使用-gitee-仓库作为图床" class="headerlink" title="配置 PicGo 使用 gitee 仓库作为图床"></a>配置 PicGo 使用 gitee 仓库作为图床</h3><p>安装完成后，打开软件详情窗口</p><blockquote><p>选择插件设置，安装 gitee-uploader</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428001431.png" alt="image-20210428001429943"></p><blockquote><p>选择 PicGo 设置，<strong>选择 gitee 作为要显示的图床</strong>，打开使用时间戳命名，上传设置提醒，开机自启三个开关（这三个开关随意选择即可）</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428001737.png" alt="image-20210428001736707"></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428001812.png" alt="image-20210428001810393"></p><blockquote><p>选择图床设置下的gitee选项，进行相关配置</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428002228.png" alt="image-20210428002226965"></p><h3 id="测试上传图片"><a href="#测试上传图片" class="headerlink" title="测试上传图片"></a>测试上传图片</h3><blockquote><p>随意截图，然后点击剪切板上传，查看相册，如果可以查看到上传的内容则证明上传成功。</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428002852.png" alt="image-20210428002850317"></p><h2 id="Typora-的安装和配置"><a href="#Typora-的安装和配置" class="headerlink" title="Typora 的安装和配置"></a>Typora 的安装和配置</h2><h3 id="下载-Typora"><a href="#下载-Typora" class="headerlink" title="下载 Typora"></a>下载 Typora</h3><blockquote><p>打开 Typora 官网： <a href="https://www.typora.io/">https://www.typora.io/</a> ， 找到download目录，选择windows下载链接，下载对应版本</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428003451.png" alt="image-20210428003449385"></p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428003508.png" alt="image-20210428003506940"></p><blockquote><p>下载完成后，双击运行 exe 文件，选择安装目录，然后 一路 <code>next</code> 操作。</p></blockquote><h3 id="配置-Typora-使用-PicGo-作为图片服务"><a href="#配置-Typora-使用-PicGo-作为图片服务" class="headerlink" title="配置 Typora 使用 PicGo 作为图片服务"></a>配置 Typora 使用 PicGo 作为图片服务</h3><blockquote><p>打开 Typora， 选择 文件 - 打开 偏好设置 </p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428004329.png" alt="image-20210428004328113"></p><blockquote><p> 配置上传服务设定（<strong>如果没有这个模块</strong>，说明该Typora版本不是最新的，不支持图片上传服务）</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428004310.png" alt="image-20210428004309020"></p><blockquote><p> 验证一下，成功~</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210428004409.png" alt="image-20210428004407287"></p>]]></content>
    
    
    
    <tags>
      
      <tag>图床</tag>
      
      <tag>Typora</tag>
      
      <tag>PicGo</tag>
      
      <tag>Gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux环境部署之Redis_5.0.4</title>
    <link href="/Linux%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E4%B9%8BRedis-5-0-4"/>
    <url>/Linux%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E4%B9%8BRedis-5-0-4</url>
    
    <content type="html"><![CDATA[<h1 id="Redis官网"><a href="#Redis官网" class="headerlink" title="Redis官网"></a>Redis官网</h1><p>进入官网找到版本，下载地址 <a href="https://redis.io/download">https://redis.io/download</a><br>右键Download按钮，选择复制链接。</p><h1 id="通过wget下载"><a href="#通过wget下载" class="headerlink" title="通过wget下载"></a>通过wget下载</h1><p>进入 <code>/usr/local/soft</code>目录，通过 wget 命令下载 redis的 .tar.gz 包</p><blockquote><p>ps: wget命令会默认下载到当前目录，想要指定目录可以先 cd 到软件存放目录下。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget http://download.redis.io/releases/redis-5.0.7.tar.gz<br></code></pre></div></td></tr></table></figure><p>过程如下：<br><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427162357.png" alt="image-20210427162354866"></p><h1 id="解压并安装Redis"><a href="#解压并安装Redis" class="headerlink" title="解压并安装Redis"></a>解压并安装Redis</h1><h2 id="输入以下命令解压到当前目录"><a href="#输入以下命令解压到当前目录" class="headerlink" title="输入以下命令解压到当前目录"></a>输入以下命令解压到当前目录</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar -zvxf redis-5.0.7.tar.gz<br></code></pre></div></td></tr></table></figure><blockquote><p>解压后在根目录上输入ls 列出所有目录会发现与下载redis之前多了一个redis-5.0.7.tar.gz文件和 redis-5.0.7的目录。</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427162911.png" alt="image-20210427162909563"></p><h2 id="移动redis目录"><a href="#移动redis目录" class="headerlink" title="移动redis目录"></a>移动redis目录</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mv /usr/local/soft/redis-5.0.7 /usr/local/redis<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427163052.png" alt="image-20210427163050985"></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><blockquote><p>cd到/usr/local/redis目录，输入命令make执行编译命令，接下来控制台会输出各种编译过程中输出的内容。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">make<br></code></pre></div></td></tr></table></figure><p>编译结果：</p><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427163307.png" alt="image-20210427163306276"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">make PREFIX=/usr/local/redis install<br></code></pre></div></td></tr></table></figure><p>执行结果：<br><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427163634.png" alt="image-20210427163633773"></p><h2 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h2><p>在目录<code>/usr/local/redis</code>下，输入下面命令启动redis</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">./bin/redis-server&amp; ./redis.conf<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>环境</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux环境部署之MySQL5.7</title>
    <link href="/Linux%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E4%B9%8BMySQL5-7"/>
    <url>/Linux%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E4%B9%8BMySQL5-7</url>
    
    <content type="html"><![CDATA[<h1 id="1-卸载"><a href="#1-卸载" class="headerlink" title="1. 卸载"></a>1. 卸载</h1><h2 id="yum方式"><a href="#yum方式" class="headerlink" title="yum方式"></a>yum方式</h2><h3 id="1-yum查看是否安装过mysql"><a href="#1-yum查看是否安装过mysql" class="headerlink" title="1. yum查看是否安装过mysql"></a>1. yum查看是否安装过mysql</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum list installed mysql*<br></code></pre></div></td></tr></table></figure><h3 id="2-如果显示了列表，说明系统中使用yum命令安装过MySQL，根据列表上的名字进行卸载"><a href="#2-如果显示了列表，说明系统中使用yum命令安装过MySQL，根据列表上的名字进行卸载" class="headerlink" title="2. 如果显示了列表，说明系统中使用yum命令安装过MySQL，根据列表上的名字进行卸载"></a>2. 如果显示了列表，说明系统中使用yum命令安装过MySQL，根据列表上的名字进行卸载</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum remove mysql-community-client mysql-community-common mysql-community-libs mysql-community-libs-compat mysql-community-server mysql57-community-release<br>rm -rf /var/lib/mysql  <br>rm /etc/my.cnf<br></code></pre></div></td></tr></table></figure><h2 id="rpm方式"><a href="#rpm方式" class="headerlink" title="rpm方式"></a>rpm方式</h2><h3 id="1-rpm查看是否安装过mysql"><a href="#1-rpm查看是否安装过mysql" class="headerlink" title="1. rpm查看是否安装过mysql"></a>1. rpm查看是否安装过mysql</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -qa | grep -i mysql<br></code></pre></div></td></tr></table></figure><h3 id="2-rpm-卸载"><a href="#2-rpm-卸载" class="headerlink" title="2. rpm 卸载"></a>2. rpm 卸载</h3><blockquote><ol><li>删除对应包</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -e mysql57-community-release-el7-9.noarch<br>rpm -e mysql-community-server-5.7.17-1.el7.x86_64<br>rpm -e mysql-community-libs-5.7.17-1.el7.x86_64<br>rpm -e mysql-community-libs-compat-5.7.17-1.el7.x86_64<br>rpm -e mysql-community-common-5.7.17-1.el7.x86_64<br>rpm -e mysql-community-client-5.7.17-1.el7.x86_64<br>cd /var/lib/  <br>rm -rf mysql/<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>清除余项</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">whereis mysql # 查看文件<br><span class="hljs-meta">#</span><span class="bash"> 列出文件目录 .../usr/bin/mysql</span><br>rm -rf /usr/bin/mysql # 存在删除列表<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>删除配置</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rm –rf /usr/my.cnf<br>rm -rf /root/.mysql_sercret<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>检查剩余配置</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chkconfig --list | grep -i mysql<br>chkconfig --del mysqld<br></code></pre></div></td></tr></table></figure><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h1><h2 id="下载MySQL-yum-包"><a href="#下载MySQL-yum-包" class="headerlink" title="下载MySQL yum 包"></a>下载MySQL yum 包</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget http://repo.mysql.com/mysql57-community-release-el7-10.noarch.rpm<br></code></pre></div></td></tr></table></figure><h2 id="rpm安装MySQL源"><a href="#rpm安装MySQL源" class="headerlink" title="rpm安装MySQL源"></a>rpm安装MySQL源</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -Uvh mysql57-community-release-el7-10.noarch.rpm<br><br></code></pre></div></td></tr></table></figure><h2 id="安装MySQL服务端"><a href="#安装MySQL服务端" class="headerlink" title="安装MySQL服务端"></a>安装MySQL服务端</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install -y mysql-community-server<br></code></pre></div></td></tr></table></figure><h2 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl start mysqld.service<br></code></pre></div></td></tr></table></figure><h2 id="检查是否启动成功"><a href="#检查是否启动成功" class="headerlink" title="检查是否启动成功"></a>检查是否启动成功</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl status mysqld.service<br></code></pre></div></td></tr></table></figure><h2 id="获取临时密码"><a href="#获取临时密码" class="headerlink" title="获取临时密码"></a>获取临时密码</h2><p>mysql5.7为root用户随机生成了一个密码</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grep &#x27;temporary password&#x27; /var/log/mysqld.log<br></code></pre></div></td></tr></table></figure><h2 id="登录mysql，修改密码"><a href="#登录mysql，修改密码" class="headerlink" title="登录mysql，修改密码"></a>登录mysql，修改密码</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mysql -u root -p<br></code></pre></div></td></tr></table></figure><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> <span class="hljs-built_in">set</span> global validate_password_policy=0;</span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> <span class="hljs-built_in">set</span> global validate_password_length=1;</span><br></code></pre></div></td></tr></table></figure><h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;yourpassword&#x27;</span>;</span><br></code></pre></div></td></tr></table></figure><h2 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> use mysql;</span><br><span class="hljs-meta">#</span><span class="bash">%代表所有连接</span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> update user <span class="hljs-built_in">set</span> Host = <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-built_in">where</span> Host = <span class="hljs-string">&#x27;localhost&#x27;</span> and User=<span class="hljs-string">&#x27;root&#x27;</span>;</span><br><span class="hljs-meta">#</span><span class="bash">刷新权限表</span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> flush privileges;</span><br></code></pre></div></td></tr></table></figure><h2 id="开启开机自启MySQL"><a href="#开启开机自启MySQL" class="headerlink" title="开启开机自启MySQL"></a>开启开机自启MySQL</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl enable mysqld<br>systemctl daemon-reload<br></code></pre></div></td></tr></table></figure><h2 id="设置字符集"><a href="#设置字符集" class="headerlink" title="设置字符集"></a>设置字符集</h2><blockquote><ol><li>打开配置文件</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /etc/my.cnf<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>修改内容</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[mysql]<br>default-character-set=utf8<br> <br>[mysqld]<br>datadir=/var/lib/mysql<br>socket=/var/lib/mysql/mysql.sock<br>default-storage-engine=INNODB<br>character_set_server=utf8<br> <br>symbolic-links=0<br> <br>log-error=/var/log/mysqld.log<br>pid-file=/var/run/mysqld/mysqld.pid<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>重启mysql，使配置生效</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">service mysqld restart<br></code></pre></div></td></tr></table></figure><h1 id="3-开启防火墙"><a href="#3-开启防火墙" class="headerlink" title="3. 开启防火墙"></a>3. 开启防火墙</h1><h2 id="防火墙相关启停命令"><a href="#防火墙相关启停命令" class="headerlink" title="防火墙相关启停命令"></a>防火墙相关启停命令</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 开启防火墙</span><br>systemctl start firewalld.service <br><br><span class="hljs-meta">#</span><span class="bash"> 设置开机启动防火墙</span><br>systemctl enable firewalld.service<br><br><span class="hljs-meta">#</span><span class="bash"> 重启防火墙</span><br>systemctl restart firewalld.service<br><br></code></pre></div></td></tr></table></figure><h2 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --state<br></code></pre></div></td></tr></table></figure><blockquote><p>关闭状态</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427111453.png" alt="image-20210427111451975"></p><blockquote><p>启动状态</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427112217.png" alt="image-20210427112216084"></p><h2 id="查看防火墙是否开机自启"><a href="#查看防火墙是否开机自启" class="headerlink" title="查看防火墙是否开机自启"></a>查看防火墙是否开机自启</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看开机自启防火墙是否设置成功</span><br>systemctl is-enabled firewalld.service;echo $?<br></code></pre></div></td></tr></table></figure><blockquote><p>设置成功</p></blockquote><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427112447.png" alt="image-20210427112445496"></p><h2 id="防火墙设置相关端口命令"><a href="#防火墙设置相关端口命令" class="headerlink" title="防火墙设置相关端口命令"></a>防火墙设置相关端口命令</h2><p>在此以打开3306端口为例</p><ol><li>打开端口命令，出现success即为成功</li></ol><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427143246.png" alt="image-20210427143238270"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --zone=public --add-port=3306/tcp --permanent<br></code></pre></div></td></tr></table></figure><blockquote><p>命令含义：</p><ul><li>zone #作用域</li><li>add-port=3306/tcp  #添加端口，格式为：端口/通讯协议</li><li>permanent   #永久生效，没有此参数重启后失效</li></ul></blockquote><ol start="2"><li>查看端口开放情况：<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">netstat -ntlp<br></code></pre></div></td></tr></table></figure>或：<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">firewall-cmd --list-ports<br></code></pre></div></td></tr></table></figure></li></ol><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427143506.png" alt="image-20210427143505255"></p><h1 id="4-mysqld-启动失败排查"><a href="#4-mysqld-启动失败排查" class="headerlink" title="4. mysqld 启动失败排查"></a>4. mysqld 启动失败排查</h1><blockquote><p>报错信息：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Starting mysqld (via systemctl):  Job for mysqld.service failed because the control process exited with error code. See &quot;systemctl status mysqld.service&quot; and &quot;journalctl -xe&quot; for details.<br></code></pre></div></td></tr></table></figure><p>按照报错信息提示<strong>命令</strong>查看系统日志<br>查看系统日志，用<code>journalctl -xe</code>或者<code>journalctl -r</code>都可以，区别的话百度一下。然后看到这两个报错提示。</p><blockquote><p>系统日志查看命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">journalctl -xe<br></code></pre></div></td></tr></table></figure><blockquote><p>报错信息</p></blockquote><p>报错信息看不出什么用，什么守护进程没启动之类的…直接略过吧。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">-- Unit session-2.scope has begun starting up.<br>Jan 20 18:26:48 spark01 sshd[2916]: pam_unix(sshd:session): session opened for user spark by (uid=0)<br>Jan 20 18:26:52 spark01 su[2944]: (to root) spark on pts/1<br>Jan 20 18:26:52 spark01 su[2944]: pam_unix(su-l:session): session opened for user root by spark(uid=1000)<br>Jan 20 18:26:56 spark01 polkitd[909]: Registered Authentication Agent for unix-process:2974:117137 (system bus name :1.25<br>Jan 20 18:26:56 spark01 systemd[1]: Starting SYSV: MySQL database server....<br>-- Subject: Unit mysqld.service has begun start-up<br>-- Defined-By: systemd<br>-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel<br>-- <br>-- Unit mysqld.service has begun starting up.<br></code></pre></div></td></tr></table></figure><blockquote><p>查看一下mysql自带的警告日志，路径一般在/var/log/mysqld.log下面</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat /var/log/mysqld.log   | grep ERROR<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427154755.png" alt="image-20210427154754377"></p><p>发现是字段配置错误，修改 /etc/my.cnf 中的配置，位置配置错误</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp">[<span class="hljs-meta">mysql</span>]<br><span class="hljs-literal">default</span>-character-<span class="hljs-keyword">set</span>=utf8<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>MySQL</tag>
      
      <tag>环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue学习</title>
    <link href="/Vue%E5%AD%A6%E4%B9%A0"/>
    <url>/Vue%E5%AD%A6%E4%B9%A0</url>
    
    <content type="html"><![CDATA[<h1 id="1-Vue-基础"><a href="#1-Vue-基础" class="headerlink" title="1. Vue 基础"></a>1. Vue 基础</h1><p>概要：</p><ul><li>了解vue.js框架，理解vue框架核心概念</li><li>掌握如何引入vue并初始化实例 </li><li>掌握vue如何定义，操作，调用实例的数据和方法</li><li>掌握vue的计算属性和监听器</li><li>掌握vue生命周期</li></ul><blockquote><p>了解vue.js框架</p></blockquote><ol><li>渐进式，自底向上逐层应用：Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。</li><li>Vue 的核心是视图层，便于整合三方库：Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</li><li>为复杂的单页应用提供驱动；当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</li></ol><blockquote><p>引入vue并初始化实例</p></blockquote><ol><li>在html文件中引入vue<br> 下载vue.js,通过<code>&lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</code>标签引用即可。<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>或者<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>初始化vue实例 （声明式渲染）</li></ol><h1 id="2-vue之事件以及数据绑定"><a href="#2-vue之事件以及数据绑定" class="headerlink" title="2. vue之事件以及数据绑定"></a>2. vue之事件以及数据绑定</h1><ul><li>掌握事件的监听及绑定 </li><li>掌握数据双向绑定 </li><li>掌握常用指令使用</li></ul><h2 id="1-事件的监听及绑定"><a href="#1-事件的监听及绑定" class="headerlink" title="1. 事件的监听及绑定"></a>1. 事件的监听及绑定</h2><p>v-on</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;view&gt;<br>        &lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;Add 1&lt;&#x2F;button&gt;<br>        &lt;text&gt;The button above has been clicked &#123;&#123; counter &#125;&#125; times.&lt;&#x2F;text&gt;<br>    &lt;&#x2F;view&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>    export default &#123;<br>        data() &#123;<br>            return &#123;<br>                counter:0<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;&#x2F;script&gt;<br></code></pre></div></td></tr></table></figure><h2 id="掌握数据双向绑定"><a href="#掌握数据双向绑定" class="headerlink" title="掌握数据双向绑定"></a>掌握数据双向绑定</h2><p>v-model : 这里的双向数据绑定可以用在很多表单元素上，比如input、textarea、select。</p><h2 id="Vue-对比-JS-区别"><a href="#Vue-对比-JS-区别" class="headerlink" title="Vue 对比 JS 区别"></a>Vue 对比 JS 区别</h2><ol><li>文件类型变化</li><li>文件内代码架构</li><li>外部文件引用方式变化</li><li>组件/标签的变化</li><li>js的变化</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hello-world"/>
    <url>/hello-world</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br>$ hexo g -d<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Test</title>
    <link href="/Test"/>
    <url>/Test</url>
    
    <content type="html"><![CDATA[<p>Test One</p><p>Test Two: Git Action Deploy</p><p>Test Three : Git Action Deploy</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
