

<!DOCTYPE html>
<html lang="zh-CN" data-default-color-scheme=&#34;auto&#34;>



<head>
  <meta charset="UTF-8">
  <link rel="apple-touch-icon" sizes="76x76" href="/img/fishes.png">
  <link rel="icon" href="/img/fishes.png">
  <meta name="viewport"
        content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  
  <meta name="theme-color" content="#2f4154">
  <meta name="description" content="">
  <meta name="author" content="Fuku Lee">
  <meta name="keywords" content="">
  
  <title>算法学习第一周 - Fuku</title>

  <link  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" />


  <link  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/github-markdown-css@4.0.0/github-markdown.min.css" />
  <link  rel="stylesheet" href="/lib/hint/hint.min.css" />

  
    
    
      
      <link  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/highlight.js@10.4.0/styles/github-gist.min.css" />
    
  

  
    <link  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css" />
  



<!-- 主题依赖的图标库，不要自行修改 -->

<link rel="stylesheet" href="//at.alicdn.com/t/font_1749284_ba1fz6golrf.css">



<link rel="stylesheet" href="//at.alicdn.com/t/font_1736178_kmeydafke9r.css">


<link  rel="stylesheet" href="/css/main.css" />

<!-- 自定义样式保持在最底部 -->

  
<link rel="stylesheet" href="/css/diy/shubiao.css">



  <script id="fluid-configs">
    var Fluid = window.Fluid || {};
    var CONFIG = {"hostname":"example.com","root":"/","version":"1.8.10","typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":true},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"progressbar":{"enable":true,"height_px":3,"color":"#29d","options":{"showSpinner":false,"trickleSpeed":100}},"copy_btn":true,"image_zoom":{"enable":true,"img_url_replace":["",""]},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"lazyload":{"enable":true,"loading_img":"/img/loading.gif","onlypost":false,"offset_factor":2},"web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}}};
  </script>
  <script  src="/js/utils.js" ></script>
  <script  src="/js/color-schema.js" ></script>
<meta name="generator" content="Hexo 5.4.0"></head>


<body>
  <header style="height: 70vh;">
    <nav id="navbar" class="navbar fixed-top  navbar-expand-lg navbar-dark scrolling-navbar">
  <div class="container">
    <a class="navbar-brand"
       href="/">&nbsp;<strong>F's Log</strong>&nbsp;</a>

    <button id="navbar-toggler-btn" class="navbar-toggler" type="button" data-toggle="collapse"
            data-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <div class="animated-icon"><span></span><span></span><span></span></div>
    </button>

    <!-- Collapsible content -->
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav ml-auto text-center">
        
          
          
          
          
            <li class="nav-item">
              <a class="nav-link" href="/">
                <i class="iconfont icon-home-fill"></i>
                首页
              </a>
            </li>
          
        
          
          
          
          
            <li class="nav-item">
              <a class="nav-link" href="/archives/">
                <i class="iconfont icon-archive-fill"></i>
                归档
              </a>
            </li>
          
        
          
          
          
          
            <li class="nav-item">
              <a class="nav-link" href="/categories/">
                <i class="iconfont icon-category-fill"></i>
                分类
              </a>
            </li>
          
        
          
          
          
          
            <li class="nav-item">
              <a class="nav-link" href="/tags/">
                <i class="iconfont icon-tags-fill"></i>
                标签
              </a>
            </li>
          
        
          
          
          
          
            <li class="nav-item">
              <a class="nav-link" href="/about/">
                <i class="iconfont icon-user-fill"></i>
                关于
              </a>
            </li>
          
        
        
          <li class="nav-item" id="search-btn">
            <a class="nav-link" target="_self" data-toggle="modal" data-target="#modalSearch">&nbsp;<i
                class="iconfont icon-search"></i>&nbsp;</a>
          </li>
        
        
          <li class="nav-item" id="color-toggle-btn">
            <a class="nav-link" target="_self">&nbsp;<i
                class="iconfont icon-dark" id="color-toggle-icon"></i>&nbsp;</a>
          </li>
        
      </ul>
    </div>
  </div>
</nav>

    <div class="banner" id="banner" parallax=true
         style="background: url('https://gitee.com/fuku-lee/blog-pic-store/raw/master/img/20210427005926.jpg') no-repeat center center;
           background-size: cover;">
      <div class="full-bg-img">
        <div class="mask flex-center" style="background-color: rgba(0, 0, 0, 0.3)">
          <div class="page-header text-center fade-in-up">
            <span class="h2" id="subtitle" title="算法学习第一周">
              
            </span>

            
              <div class="mt-3">
  
  
    <span class="post-meta">
      <i class="iconfont icon-date-fill" aria-hidden="true"></i>
      <time datetime="2021-10-11 10:04" pubdate>
        2021年10月11日 上午
      </time>
    </span>
  
</div>

<div class="mt-1">
  
    
    <span class="post-meta mr-2">
      <i class="iconfont icon-chart"></i>
      1.4k 字
    </span>
  

  
    
    <span class="post-meta mr-2">
      <i class="iconfont icon-clock-fill"></i>
      
      
      18
       分钟
    </span>
  

  
  
</div>

            
          </div>

          
        </div>
      </div>
    </div>
  </header>

  <main>
    
      

<div class="container-fluid nopadding-x">
  <div class="row nomargin-x">
    <div class="d-none d-lg-block col-lg-2"></div>
    <div class="col-lg-8 nopadding-x-md">
      <div class="container nopadding-x-md" id="board-ctn">
        <div class="py-5" id="board">
          <article class="post-content mx-auto">
            <!-- SEO header -->
            <h1 style="display: none">算法学习第一周</h1>
            
            <div class="markdown-body">
              <h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>链表</strong>：<br>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>
<p><strong>优点</strong><br>增删方便，可扩容</p>
<p><strong>缺点</strong><br>指针域占用空间多，查询遍历麻烦</p>
<p><strong>适用场景</strong><br>数据量少，增删频繁，查询较少。</p>
<h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><a href="#">Post not found: lc-0021-合并两个有序链表 合并两个有序链表</a>
<p>使用递归。结束条件为 l1 / l2 中有一个为nil时</p>
<a href="#">Post not found: lc-0141-环形链表 环形链表</a>
<p>追及问题，快慢指针。</p>
<a href="#">Post not found: lc-0075-颜色分类 颜色分类</a>
<p>区间归类。使用三个指针实现。</p>
<a href="#">Post not found: lc-0203-移除链表元素 移除链表元素</a>
<p>使用递归，如果head.Val 等于目标值时，返回head.Next。</p>
<hr>
<a href="#">Post not found: lc-0206-反转链表 反转链表</a>
<a href="#">Post not found: lc-0160-相交链表 相交链表</a>
<a href="#">Post not found: lc-0021-合并两个有序链表 合并两个有序链表</a>
<a href="#">Post not found: lc-0086-分隔链表 分隔链表</a>
<a href="#">Post not found: lc-0142-环形链表 II 环形链表 II</a>
<a href="#">Post not found: lc-0092-反转链表 II 反转链表 II</a>
<a href="#">Post not found: lc-0138-复制带随机指针的链表 复制带随机指针的链表</a>

<hr>
<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>栈：先进后出（LIFO）</p>
</li>
<li><p>要点：</p>
<ul>
<li>栈是一种线性结构，操作的是数组的子集。</li>
<li>只能在栈顶<strong>添加</strong>或<strong>取出</strong>元素。</li>
<li>应用场景：编译器分词器、JVM、撤销操作、回退操作</li>
</ul>
</li>
<li><p>栈实现</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>接口</th>
<th>说明</th>
<th>复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>void push(E e)</td>
<td>向栈顶加入元素</td>
<td>O(1)均摊</td>
</tr>
<tr>
<td>E pop()</td>
<td>弹出栈顶元素</td>
<td>O(1)均摊</td>
</tr>
<tr>
<td>E peek()</td>
<td>查看栈顶元素</td>
<td>O(1)</td>
</tr>
<tr>
<td>int getSize()</td>
<td>获取栈中元素个数</td>
<td>O(1)</td>
</tr>
<tr>
<td>boolean isEmpty()</td>
<td>判断栈是否为空</td>
<td>O(1)</td>
</tr>
</tbody></table>
<blockquote>
<p>说明：push 和 pop 操作在最后进行，有可能出发 resize() 但是均摊来算是 O(1)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        aboutStack();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">aboutStack</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 初始化栈，数据类型为Integer</span><br>        Stack&lt;Integer&gt; s = <span class="hljs-keyword">new</span> Stack&lt;Integer&gt;();<br><br>        <span class="hljs-comment">// 练习栈的 5 个基本操作</span><br>        <span class="hljs-comment">// 1. push(x) 压栈</span><br>        s.push(<span class="hljs-number">1</span>);<br>        s.push(<span class="hljs-number">2</span>);<br>        s.push(<span class="hljs-number">3</span>);<br>        s.push(<span class="hljs-number">4</span>);<br><br>        System.out.printf(<span class="hljs-string">&quot; s = %s \n&quot;</span>,s.toString());<br>        System.out.printf(<span class="hljs-string">&quot;--------------------------\n&quot;</span>);<br><br>        <span class="hljs-comment">// 2.top() 获取栈顶元素 , 在Java中使用 peek() 获取栈顶元素</span><br>        System.out.printf(<span class="hljs-string">&quot; s = %s \n&quot;</span>,s.peek());<br>        System.out.printf(<span class="hljs-string">&quot;--------------------------\n&quot;</span>);<br><br>        <span class="hljs-comment">// 3. pop() 出栈</span><br>        System.out.printf(<span class="hljs-string">&quot; s.pop = %s \n&quot;</span>,s.pop());<br>        System.out.printf(<span class="hljs-string">&quot;--------------------------\n&quot;</span>);<br>        <br>        <span class="hljs-comment">// 4. empty() 判断栈是否为空</span><br>        <span class="hljs-keyword">if</span>(s.isEmpty())&#123;<br>            System.out.printf(<span class="hljs-string">&quot;s is empty\n&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.printf(<span class="hljs-string">&quot;s is not empty\n&quot;</span>);<br>        &#125;<br>        <br><br>        <span class="hljs-comment">// 5. size() 栈空间</span><br>        System.out.printf(<span class="hljs-string">&quot; s.size = %s \n&quot;</span>,s.size());<br>        System.out.printf(<span class="hljs-string">&quot;--------------------------\n&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"> s = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>] <br>--------------------------<br> s = <span class="hljs-number">4</span> <br>--------------------------<br> s.pop = <span class="hljs-number">4</span> <br>--------------------------<br>s is not empty<br> s.size = <span class="hljs-number">3</span> <br>--------------------------<br></code></pre></div></td></tr></table></figure>

<h2 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h2><a href="#">Post not found: lc-0020-有效的括号 有效的括号</a>
<p>判断左括号和右括号是否匹配。</p>
<a href="#">Post not found: lc-0224-基本计算器 基本计算器</a>
<p>栈保存值和日期</p>
<a href="#">Post not found: lc-0155-最小栈 最小栈</a>
<p>普通栈+最小栈</p>
<a href="#">Post not found: lc-0946-验证栈序列 验证栈序列</a>
<p>依次入栈，判断出栈。最后出栈次数满足入栈次数即可。</p>
<a href="#">Post not found: lc-0739-每日温度 每日温度</a>
<p>两种做法，双层for循环判断当前日期到后续第一次升温日期的长度。单调栈：只有入栈元素比栈顶元素大的时候才入栈。栈保存的是数组索引。</p>
<a href="#">Post not found: lc-0042-接雨水 接雨水</a>


<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="基础知识-2"><a href="#基础知识-2" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>队列：先进先出（FIFO）</li>
<li>要点：<ul>
<li>队列是一种线性结构，操作的是数组的子集。</li>
<li>只能在队尾<strong>添加</strong>元素，在队头<strong>取出</strong>元素。</li>
<li>应用场景：</li>
</ul>
</li>
<li>队列实现：</li>
</ol>
<table>
<thead>
<tr>
<th>接口</th>
<th>说明</th>
<th>复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>void offer(E e)</td>
<td>向队尾加入元素</td>
<td>O(1)均摊</td>
</tr>
<tr>
<td>E remove()</td>
<td>删除队头元素</td>
<td>O(1)均摊</td>
</tr>
<tr>
<td>E peek()</td>
<td>查看队头元素</td>
<td>O(1)</td>
</tr>
<tr>
<td>int size()</td>
<td>获取队列元素个数</td>
<td>O(1)</td>
</tr>
<tr>
<td>boolean isEmpty()</td>
<td>判断队列是否为空</td>
<td>O(1)</td>
</tr>
</tbody></table>
<blockquote>
<p>说明：push 和 pop 操作在最后进行，有可能出发 resize() 但是均摊来算是 O(1)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] maxSlidingWindow(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k) &#123;<br>        aboutQueue();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">aboutQueue</span><span class="hljs-params">()</span></span>&#123;<br>        Queue&lt;String&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;String&gt; ();<br><br>        <span class="hljs-comment">// 添加元素</span><br>        queue.offer(<span class="hljs-string">&quot;a&quot;</span>);<br>        queue.offer(<span class="hljs-string">&quot;b&quot;</span>);<br>        queue.offer(<span class="hljs-string">&quot;c&quot;</span>);<br>        queue.offer(<span class="hljs-string">&quot;d&quot;</span>);<br>        queue.offer(<span class="hljs-string">&quot;e&quot;</span>);<br>        <br>        <span class="hljs-keyword">for</span>(String q:queue)&#123;<br>            System.out.println(q);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;**************************************************&quot;</span>);<br>        <br>        <span class="hljs-comment">// 返回第一个元素</span><br>        System.out.println(<span class="hljs-string">&quot;返回第一个元素 :&quot;</span>+queue.peek());<br>        System.out.println(<span class="hljs-string">&quot;**************************************************&quot;</span>);<br><br>        <span class="hljs-comment">// 删除队头元素</span><br>        System.out.println(<span class="hljs-string">&quot;删除队头元素 :&quot;</span>+queue.remove());<br><br>        <span class="hljs-keyword">for</span>(String q:queue)&#123;<br>            System.out.println(q);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;**************************************************&quot;</span>);<br>        <br>        <span class="hljs-comment">// 判断队列是否为空</span><br>        <span class="hljs-keyword">if</span>(queue.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;queue is empty!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;queue is not empty!&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 获取队列元素个数</span><br>        System.out.println(<span class="hljs-string">&quot;获取队列元素个数 :&quot;</span>+queue.size());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">a<br>b<br>c<br>d<br>e<br>**************************************************<br>返回第一个元素 :a<br>**************************************************<br>删除队头元素 :a<br>b<br>c<br>d<br>e<br>**************************************************<br>queue is not empty!<br>获取队列元素个数 :<span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure>


<h2 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h2><a href="#">Post not found: lc-0232-用栈实现队列 用栈实现队列</a>
<a href="#">Post not found: lc-0239-滑动窗口最大值 滑动窗口最大值</a>
<a href="#">Post not found: lc-0641-设计循环双端队列 设计循环双端队列</a>


            </div>
            <hr>
            <div>
              <div class="post-metas mb-3">
                
                
                  <div class="post-meta">
                    <i class="iconfont icon-tags"></i>
                    
                      <a class="hover-with-bg" href="/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/">算法学习</a>
                    
                      <a class="hover-with-bg" href="/tags/67/">67</a>
                    
                  </div>
                
              </div>
              
                <p class="note note-warning">
                  
                    本博客所有文章除特别声明外，均采用 <a target="_blank" href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh" rel="nofollow noopener noopener">CC BY-SA 4.0 协议</a> ，转载请注明出处！
                  
                </p>
              
              
                <div class="post-prevnext">
                  <article class="post-prev col-6">
                    
                    
                      <a href="/Docker-Study-03-win10%E6%A1%8C%E9%9D%A2%E5%AE%89%E8%A3%85">
                        <i class="iconfont icon-arrowleft"></i>
                        <span class="hidden-mobile">Docker-Study-03-win10桌面安装</span>
                        <span class="visible-mobile">上一篇</span>
                      </a>
                    
                  </article>
                  <article class="post-next col-6">
                    
                    
                      <a href="/GoTrip%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2">
                        <span class="hidden-mobile">GoTrip项目部署</span>
                        <span class="visible-mobile">下一篇</span>
                        <i class="iconfont icon-arrowright"></i>
                      </a>
                    
                  </article>
                </div>
              
            </div>

            
          </article>
        </div>
      </div>
    </div>
    
      <div class="d-none d-lg-block col-lg-2 toc-container" id="toc-ctn">
        <div id="toc">
  <p class="toc-header"><i class="iconfont icon-list"></i>&nbsp;目录</p>
  <div class="toc-body" id="toc-body"></div>
</div>

      </div>
    
  </div>
</div>

<!-- Custom -->


    

    
      <a id="scroll-top-button" href="#" role="button">
        <i class="iconfont icon-arrowup" aria-hidden="true"></i>
      </a>
    

    
      <div class="modal fade" id="modalSearch" tabindex="-1" role="dialog" aria-labelledby="ModalLabel"
     aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header text-center">
        <h4 class="modal-title w-100 font-weight-bold">搜索</h4>
        <button type="button" id="local-search-close" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body mx-3">
        <div class="md-form mb-5">
          <input type="text" id="local-search-input" class="form-control validate">
          <label data-error="x" data-success="v"
                 for="local-search-input">关键词</label>
        </div>
        <div class="list-group" id="local-search-result"></div>
      </div>
    </div>
  </div>
</div>
    

    
  </main>

  <footer class="text-center mt-5 py-3">
  <div class="footer-content">
     <a href="https://hexo.io" target="_blank" rel="nofollow noopener"><span>Hexo</span></a> <i class="iconfont icon-love"></i> <a href="https://github.com/fluid-dev/hexo-theme-fluid" target="_blank" rel="nofollow noopener"><span>Fluid</span></a> 
  </div>
  

  

  
</footer>


  <!-- SCRIPTS -->
  
  <script  src="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.min.js" ></script>
  <link  rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.min.css" />

  <script>
    NProgress.configure({"showSpinner":false,"trickleSpeed":100})
    NProgress.start()
    window.addEventListener('load', function() {
      NProgress.done();
    })
  </script>


<script  src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js" ></script>
<script  src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js" ></script>
<script  src="/js/events.js" ></script>
<script  src="/js/plugins.js" ></script>

<!-- Plugins -->


  
    <script  src="/js/img-lazyload.js" ></script>
  



  



  <script  src="https://cdn.jsdelivr.net/npm/tocbot@4.12.0/dist/tocbot.min.js" ></script>



  <script  src="https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js" ></script>



  <script  src="https://cdn.jsdelivr.net/npm/anchor-js@4.3.0/anchor.min.js" ></script>



  <script defer src="https://cdn.jsdelivr.net/npm/clipboard@2.0.6/dist/clipboard.min.js" ></script>






  <script  src="https://cdn.jsdelivr.net/npm/typed.js@2.0.11/lib/typed.min.js" ></script>
  <script>
    (function (window, document) {
      var typing = Fluid.plugins.typing;
      var title = document.getElementById('subtitle').title;
      
      typing(title)
      
    })(window, document);
  </script>



  <script  src="/js/local-search.js" ></script>
  <script>
    (function () {
      var path = "/local-search.xml";
      $('#local-search-input').on('click', function() {
        searchFunc(path, 'local-search-input', 'local-search-result');
      });
      $('#modalSearch').on('shown.bs.modal', function() {
        $('#local-search-input').focus();
      });
    })()
  </script>














  
<script src="/js/diy/caidai.js"></script>



<!-- 主题的启动项 保持在最底部 -->
<script  src="/js/boot.js" ></script>


</body>
</html>
